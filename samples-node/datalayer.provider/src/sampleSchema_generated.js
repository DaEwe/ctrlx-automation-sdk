// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var sample = sample || {};

/**
 * @const
 * @namespace
 */
sample.schema = sample.schema || {};

/**
 * @constructor
 */
sample.schema.InertialValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {sample.schema.InertialValue}
 */
sample.schema.InertialValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sample.schema.InertialValue=} obj
 * @returns {sample.schema.InertialValue}
 */
sample.schema.InertialValue.getRootAsInertialValue = function(bb, obj) {
  return (obj || new sample.schema.InertialValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {sample.schema.InertialValue=} obj
 * @returns {sample.schema.InertialValue}
 */
sample.schema.InertialValue.getSizePrefixedRootAsInertialValue = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new sample.schema.InertialValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
sample.schema.InertialValue.prototype.x = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
sample.schema.InertialValue.prototype.y = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
sample.schema.InertialValue.prototype.z = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
sample.schema.InertialValue.startInertialValue = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 */
sample.schema.InertialValue.addX = function(builder, x) {
  builder.addFieldInt16(0, x, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} y
 */
sample.schema.InertialValue.addY = function(builder, y) {
  builder.addFieldInt16(1, y, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} z
 */
sample.schema.InertialValue.addZ = function(builder, z) {
  builder.addFieldInt16(2, z, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
sample.schema.InertialValue.endInertialValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
sample.schema.InertialValue.finishInertialValueBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
sample.schema.InertialValue.finishSizePrefixedInertialValueBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
sample.schema.InertialValue.createInertialValue = function(builder, x, y, z) {
  sample.schema.InertialValue.startInertialValue(builder);
  sample.schema.InertialValue.addX(builder, x);
  sample.schema.InertialValue.addY(builder, y);
  sample.schema.InertialValue.addZ(builder, z);
  return sample.schema.InertialValue.endInertialValue(builder);
}

// Exports for Node.js and RequireJS
this.sample = sample;
