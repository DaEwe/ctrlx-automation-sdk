{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"Home"},{"location":"about.html","text":"About \u00b6 Copyright \u00a9 2020-2021 Bosch Rexroth AG. All rights reserved. https://www.boschrexroth.com Bosch Rexroth AG Bgm.-Dr.-Nebel-Str. 2 97816 Lohr am Main GERMANY General Terms of Use \u00b6 In order to download and use the binary packages of the ctrlX AUTOMATION Software Development Kit you have to accept the General Terms of Use Licenses \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"About"},{"location":"about.html#about","text":"Copyright \u00a9 2020-2021 Bosch Rexroth AG. All rights reserved. https://www.boschrexroth.com Bosch Rexroth AG Bgm.-Dr.-Nebel-Str. 2 97816 Lohr am Main GERMANY","title":"About"},{"location":"about.html#general-terms-of-use","text":"In order to download and use the binary packages of the ctrlX AUTOMATION Software Development Kit you have to accept the General Terms of Use","title":"General Terms of Use"},{"location":"about.html#licenses","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licenses"},{"location":"appdevguide.html","text":"ctrlX CORE App Development Guideline \u00b6 Liability The information in this guideline is intended for product description purposes only and shall not be deemed to be a guaranteed characteristic, unless expressly stipulated by contract. All rights are reserved with respect to the content of this documentation and the availability of the product. Table of content \u00b6 1 Introduction 2 App Validation Process 3 App Categories 4 Basic App Information (mandatory) 5 Further App Information (conditional) 6 Working Set Overview (mandatory) 7 ctrlX Basic Mechanisms (mandatory) 8 ctrlX Security System (optional) 9 ctrlX User Interface and Project Handling (optional) 10 ctrlX AUTOMATION System Functions (optional) 11 Real Time Extension (optional) 1 Introduction \u00b6 This guideline give orientation to App developers and Partners who want to contribute with new Apps to the ctrlX World Ecosystem. This is a so-called \"living document\". New Apps might lead to new topics and may result in new guidelines at any time. 1.1 App development for ctrlX AUTOMATION \u00b6 The open ctrlX AUTOMATION system architecture allows developers to implement further system functions with low effort at any time as Apps and as open source software. This document gives orientation on how to create apps to integrate best into ctrlX AUTOMATION. With a dedicated app validation and signing process, Bosch Rexroth approves an App as qualified for ctrlX AUTOMATION . This process ensures that the app meets the quality standards of ctrlX AUTOMATION. This document describes all aspects which have to be considered when an App is developed. Some aspects are mandatory , both from legal and technical viewpoint. Others are optional and decribe how an App can be fully integrated in the ctrlX system architecture to provide the best user experience. 1.2 Obligation of technical aspects \u00b6 This document describes technical aspects for ctrlX Apps. These aspects in each case have one of the following obligations: MANDATORY - This aspect is stricly required and must be implemented OPTIONAL This Aspect brings an added-value and can or should be implemented. CONDITIONAL - Aspect must be implemented in special cases . Bosch Rexroth and the Partner will identify the requirements during the App integration process. 1.3 Partner Contract and Legal Framework \u00b6 This Development Guide describes the technical integration of an app into ctrlX. In addition, as non-technical prerequisites, the following documents need to be available and signed, before an app gets published: The Software Distribution Framework Agreement (\"Partner Contract\") describes fundamental constraints of the partnership between you as app developer and Bosch Rexroth and affiliates A License Contract describes all app related licenses as part of the product to be sold within Bosch Rexroth and affiliates sales channels Optionally a Letter of Intent (LOI) Optionally a Non Disclosure Agreement (NDA) 2 App Validation Process \u00b6 As a mandatory step of an App integration into ctrlX, Bosch Rexroth will perform a standard App validation and signing process. For handover, Bosch Rexroth provides an according ctrlX World Partner Portal SharePoint space, which will be prepared during the Partner contracting process. 2.1 Inital Meeting for the App Validation \u00b6 Before the validation starts, the Partner / App Developer must provide the app architecture A picture of the main communication paths is needed, including a building block overview of the App a short description of the communication paths to other Apps / Devices the App configuration and data storage concept a description of a typical standard scenario The architecture overview should be stored as \" architecture-overview.x \" in the {app-name} folder and should be delivered with each new App version. This document typically will be provided for an initial meeting with the Partner / App Developer, the according Bosch Rexroth Partner Manager and the Bosch Rexroth App validation Team. At this point, the partner also should already have uploaded the necessary artifacts in order to be able to clarify any open points. 2.2 Artifacts Delivery \u00b6 In an automated validation Framework, Bosch Rexroth checks the provided artefacts and the described behaviour of an App that is to be signed as official ctrlX App. This validation Framework requires a standard format for artifacts and information. To simplify the artifact's delivery, we provide a base folder structure with description and schema files. This will help App developers to deliver the required artefacts and us to simplify the validation work. Please use the given structure, folder names and file names like given below, without any renaming. The provided artifacts and information must be organized in the following way: General Folder structure {company-name}\\ - Partner Company Name. Folder name is created by Bosch Rexroth {app-name}\\ - Technical App Name. This App name is unique. A folder will be created by the partner {version}\\ - The version folder separates the different versions. Format is three numbers separated by dots, e.g. \"1.0.2\". Each version has to be stored in a separate folder. A folder will be created by the partner {artifacts}\\ - The required documents as input for the validation process (see 4.1) Handover of artifacts After all required information is available in your local folder, zip the folder with Windows-zip and upload it as \" artifacts.zip \" to the ctrlX World Partner Portal space in the \" .../{company-name}/{app-name}/{version}/ \" path. Important To avoid problems during upload of the artifacts.zip file, please use the Windows-zip function 2.4 Validation and Signing \u00b6 The Validation typically will be done in several iterations, depending on the result of a particular validation activity. If all required information is provided in the ctrlX World Partner Portal space, an according mail to ctrlx.world@boschrexroth.de will trigger a validation loop. Basically, the workflow will look like the following: Partner / App Developer: Upload required artefacts and inform Bosch Rexroth Bosch Rexroth checks the artefacts for completeness. If rework is required, the partner will be notified via Email with an attached report in the \" .../{company-name}/{app-name}/{version}/results \" folder When artefats are complete, the validation will start. Again, if rework is required, the partner will be notified with an attached report When validation was sucessful, Bosch Rexroth will sign the App and inform the Partner via Email. 3 App Categories \u00b6 Apps can be integrated into ctrlX on different levels. As an orientation for the prerequisites and possibilities on different levels, three categories are defined. A category, however, is no formal boundary, and an app can seamless support aspects of the different categories. Also, subsequent versions of an app might support more aspects than an earlier version. In addition, there is no correlation between the category and the business value of an app. However, at least all aspects that are mentioned in Category 1 need to be met, since they are considered as mandatory . In this chapter, the aspects are briefly described. The remainder of these documents provides detailed information about all aspects and also refers to additional sources of information, like how-to documents and code samples. 3.1 Category 1 (Basic): Apply to ctrlX Basic Mechanisms \u00b6 To be approved as an official ctrlX CORE app, an app must support a minimum set of mandatory aspects. 3.1.1 Overview \u00b6 The App itself and an according user documentation needs to be provided. Also legal aspects like FOSS are required. Working set information is needed, to support the test and validation process. During runtime, the App must use the onboard licensing mechanism of ctrlX CORE. 3.1.2 Customer User Experience \u00b6 Customers find the App in the ctrlX App Store. They know how the App is licensed and can use the overall Bosch Rexroth licensing system for ctrlX. They also can be sure that the App contributes to the basic ctrlX Security Mechanisms. 3.1.3 Technical Prerequisites \u00b6 Note As mentioned, the aspects which are listed here are MANDATORY . Means, all of them are required for an official ctrlX app. Basic App Information: App Artifacts (\u201cExecutables\u201d for ctrlX CORE and ctrlX CORE virtual and basic technical information) App Documentation / User Manual and Release Notes Additional App Properties according to Linux Ubuntu conventions FOSS Information Working Set Overview: Information about Security behavior (Linux Slots & Plugs, Ports, Sockets) Information about Resource Consumption and Read/Write Operations Standard task scheduling overview Test Setup Description for typical usage scenario Integration into ctrlX Basic Mechanisms: Use of ctrlX License Handling App signed by Bosch Rexroth 3.2 Category 2 (Advanced): Contribute to ctrlX Engineering Concepts \u00b6 For a good integration into ctrlX from a user's point of view, an App should fulfil the aspects of Category 2 - even if these aspects are not necessary for App validation. 3.2.1 Overview \u00b6 The App uses the according ctrlX system interfaces and supports ctrlX platform features like Identity Management, Data Management and Backup/Restore. 3.2.2 Customer User Experience \u00b6 The App contributes to the ctrlX User Interface and System Behaviour. It integrates into basic user stories for configuration and maintenance of a ctrlX Application. 3.2.3 Technical Recommendations \u00b6 Note As mentioned, the aspects which are listed here are OPTIONAL . However, they are highly recommended for a good user experience. Also, the aspects of category 2 and 3 are overlapping and not formally separated Further App Information: FOSS Sources Semantic versioning scheme Integration into ctrlX Security System: ctrlX Reverse Proxy ctrlX Key & Certificate Management ctrlX Identity Management Improved Network Security (no insecure protocols) Integration into ctrlX User Interface and Project Handling ctrlX Navigation Pane and Landing Page ctrlX Configuration Storage 3.3 Category 3 (Extended): Extend ctrlX AUTOMATION features \u00b6 Finally, an App can integrate in the Automation framework and extend the ctrlX real time system Note Real time integration requires additional training and support from Bosch Rexroth to avoid unexpected system behavior and impacts on the ctrlX real time kernel. 3.3.1 Description \u00b6 The App exposes information in the ctrlX Data Layer for all other Apps. It also can extend the real time functions of ctrlX if it connected to the real time task scheduler 3.3.2 Customer User Experience \u00b6 The App extends the ctrlX AUTOMATION system functions, e.g. for Motion and/or PLC 3.3.3 Technical Recommendations \u00b6 Integration into ctrlX AUTOMATION System Functions: ctrlX Data Layer ctrlX Logbook and Diagnostics System Real Time Extension: ctrlX Scheduler 4 Basic App Information ( MANDATORY ) \u00b6 The Basic App Information is checked as prerequisite by Bosch Rexroth, before the validation starts. 4.1 App Artifacts ( MANDATORY ) \u00b6 4.1.1 Artifacts folder template \u00b6 The ctrlX World Partner Portal provides a file (artifacts.zip) which can be downloaded and extract locally. This will create the required folder structure for the mandatory artifacts out-of-the-box, with default descriptions and schema files. !!!! important Please use the given structure, folder names and file names unchanged. This will support an efficient validation process. The artifacts are organized in five sub folders: 4.1.2 \"Disclosure\" folder ( MANDATORY ) \u00b6 In the disclosure folder the FOSS source files and license text files are stored \"fossinfo.json\" ( MANDATORY ) - license texts of all used open source software of an App. For more information about format and content, refer the example json and the according json-schema in the standard \"artifacts.zip\" file. \"foss-sources.zip\" ( CONDITIONAL ) - In the foss-sources.zip file, the sources of all used open source libraries / packages are zipped without a password. \"foss-offer.x\" ( CONDITIONAL ) - If the foss-sources.zip file is not given, a human-readable file with the name \"offer.x\" is needed. It explains how the user can get the sources. Either FOSS sources or FOSS offer is required . 4.1.3 \"Build Info\" folder ( MANDATORY ) \u00b6 The build info folder stores all build relevant information. Note: For the {xxx}-description files, a default file (with explanation) and the according schema is provided in the standard artifacts.zip example. \"snapcraft.yaml\" ( MANDATORY ) - The snapcraft.yaml file is the main entry point to create a snap through Snapcraft. It contains all the details the snapcraft command needs to build a snap. See also https://snapcraft.io/docs/snapcraft-yaml-reference \"package-manifest.json\" ( MANDATORY ) - The package-manifest.json covers essential settings, like the proxy URL \"portlist-description.json\" ( MANDATORY ) - In the port list all used ports are described \"unixsocket-description.json\" ( MANDATORY ) - In the Unix socket description all used Unix sockets are described. If your app don\u00b4t us a Unix socket, provide a empty description file \"slotplug-description.json\" ( MANDATORY ) - In the slot and plug description all used slot and plugs are described 4.1.4 \"Documentation\" folder ( MANDATORY ) \u00b6 Here, all App relevant documentation is provided \"manual.pdf\" ( MANDATORY ) - The App description (User Manual) documents the overall functionality of the App \"test-setup-description.pdf\" ( MANDATORY ) - The App setup describes how to configure the App on a ctrlX device for a typical usage and test scenario \"release-notes.pdf\" ( MANDATORY ) - In the release notes the newest changes, workarounds and defects are mentioned 4.1.5 \"App States\" folder ( MANDATORY ) \u00b6 The app validation framework tries to establish relevant states which have to be tested. Therefore, a sequence of API calls has to be provided to bring the App to the test state \"standard-scenario1.json\" ( MANDATORY ) - Each file contains a collection (sequence of Rest API calls) to generate the standard usage scenario. In each of these scenarios, the validation process monitors the memory and storage usage, the CPU load and the Ethernet communication load. The collections/files are to be created with Postman. \"standard-scenario{2 to n}.json\" (optional) - one or more scenarios, if appropriate 4.1.6 \"Snaps\" folder ( MANDATORY ) \u00b6 ctrlX currently support the amd64 and the arm64 processor architecture. The according target snaps for the App are provided here \"{TechnicalAppName}_{version}_arm64.snap\" ( MANDATORY ) - Snap which runs in armd64 environments. Currently, the arm64 architecture is used in ctrlX CORE hardware. \"{TechnicalAppName}_{version}_amd64.snap\" ( OPTIONAL ) - Snap which runs in amd64 environments. The amd64 is used in ctrlX CORE virtual. However, future ctrlX CORE hardware will also use amd64 architecture. So, it is recommended to provide also a snap for this platform to avoid future inconvenience. 4.2 App Documentation ( MANDATORY ) \u00b6 4.2.1 User Manual ( MANDATORY ) \u00b6 A user manual must be delivered together with the App. The user manual must describe typical user actions for commissioning and operation of the App from a user / customer perspective. 4.2.2 Test Setup Description ( MANDATORY ) \u00b6 A test setup description must be delivered together with the App. The test setup description must contain instructions to realize a test scenario. It must include a description of sequences and dependencies, e.g. additional hardware. If you use plugs and slots, please provide an explanation here., 4.2.3 Release Notes ( MANDATORY ) \u00b6 A release note documentation must be delivered together with the App. 4.2.4 General App Description for the ctrlX App Zone ( CONDITIONAL ) \u00b6 Each app needs product information as part of the sales package. The description shall be generated based on the App description template (from the ctrlX World Partner Portal) The App description package is necessary in case the App will be shown also in the App Zone of the ctrlX AUTOMATION Community or other marketing channels. 4.3 Additional App Information according to Linux Ubuntu conventions ( MANDATORY ) \u00b6 The following properties must be defined within the \"snapcraft.yaml\" file (see https://snapcraft.io/docs/snapcraft-yaml-reference), which also need to be exclusively part of the App and have to be collision free with other Apps. Title - The general name of the App, that will be shown in all sales channels and customer touch points, e.g. App overview or ctrlX App Store. Definition will be done together with the partner manager, as part of the business model definitions. Example: \"My App\" Name - The technical name of the snap. The name has to unique in the snap-universe and across all snap developer and device vendors. The snap name has to start with \"ctrlx-\" and must be lowercase and a maximum length of 32 characters . ctrlX World Partners add their company name to the snap name. Example: \"ctrlx-partnername-myapp\" Confinement - Must be set to \"strict\" for releases. See also https://snapcraft.io/docs/snap-confinement Grade - Defines the quality grade of the App. During development, you may choose to use \"devel\" . When releasing the application, the grade must be set to \"stable\" . 4.4 FOSS Info Provisioning ( MANDATORY ) \u00b6 If the App uses Free and Open Source Software (FOSS), it is necessary to ship certain license information with the App. With \"fossinfo.xml\" Open source license text must be obliged to disclose for copyright reasons. Bosch Rexroth offers the possibility to display the license texts of the used open source software in the web interface of ctrlX, For more information about \"fossinfo.xml\" please refer to the guideline in the SDK. If the display of FOSS license texts is implemented within the App, at least a reference to the license display in the App must be provided in the \"fossinfo.xml\". Since users must be able to view the license texts before the open source software is installed, the \"fossinfo.xml\" must also be stored outside the App in the \"disclosure\" directory (see chapter 3.1.2). In addition, the license texts must be listed within the user documentation or at least a reference must be inserted where the FOSS license texts are located. 5 Further App Information ( CONDITIONAL ) \u00b6 5.1 FOSS Sources ( CONDITIONAL ) \u00b6 Bosch Rexroth recommends putting all FOSS sources in a zip file with the file name \"foss-sources.zip\" and store it in the \"disclosure\" directory, where the \"fossinfo.xml\" is provided. In case that the FOSS sources are not directly provided, a written offer is mandatory for open source software with copyleft clause (e.g. GPLv2 or GPLv3) . This means, a human-readable file with the name \"foss-offer.x\" needs to be provided, which explains how the user can get the FOSS sources of the App. 5.2 Semantic versioning scheme ( OPTIONAL ) \u00b6 It is recommended to use a versioning scheme which is based on the https://semver.org/ for versioning of the App. This setting is also relevant in the snapcraft.yaml file during creation of the snap. Note Increasing version numbers are mandatory, independent of the used version scheme 5.3 Restart Delay ( OPTIONAL ) \u00b6 The restart-delay of the App daemon should be set \"5s\" or similar in the snapcraft.yaml to prevent the 10s lock-out 6 Working Set Overview ( MANDATORY ) \u00b6 6.1 Security Information & Considerations \u00b6 ctrlX CORE is designed with strong security requirements. Also, the overall ctrlX CORE architecture is built to be compliant to be certified as defined by IEC62433. This also implies some requirements to the Apps and software running in the ctrlX Ecosystem. For ctrlX App, this means Only encrypted and secured communication protocols (e.g. https) must be used. Unsecure protocols (e.g. http) are not to be used, unless explicitly defined in the validation process. The attack surface of the device should be kept as minimal as possible. This means for example that the number of open ports of an App should be reduced to a minimum. 6.1.1 Interfaces / Slots & Plugs ( MANDATORY ) \u00b6 Used interfaces (Slots & Plugs) must be documented in the snapcraft.yaml file. The following considerations must be taken into account: Use as fewer interfaces (slots/plugs) as possible . The amount of interfaces (slots & plugs) shall be limited to a minimum . The App should declare only the interfaces (slots and/or plugs) which are absolutely required to minimize the attack surface. When reviewing the App, Bosch Rexroth needs to know for which purpose a specific slot and/or plug is required by an App. The according justification must be provided together with the App. No global slots & plugs . App developers must avoid assigning global slots & plugs, which are valid for all applications. Global slots & plugs should be used only if absolutely necessary. Debug interfaces only on demand . By default, the App should not provide any open network debug interfaces. If debugging is required, the user shall be able to enable the debug interface on demand and only after successful authentication (and authorization). In general, debug interfaces shall not be accessible without authentication and/or insufficient or even hard-coded credentials. The following Operating System interfaces are denied or restricted for usage. See also https://snapcraft.io/docs/supported-interfaces. Interface Direction Parameters Exceptions Reason udisk2 Plug & Slot system-files Plug * \"read=^(\\/dev\\/shm| \\/dev\\/shm\\/.+)$\", \"write=^(\\/dev\\/shm| \\/dev\\/shm\\/.+)$\" snapd-control Plug * Prevent uncontrolled access to system configuration. raw-volumes Plug Prevent mounting of partitions. process-control Plug Prevent tampering with running processes. content Plug content=package-certificates Prevent apps to act as device admin. content Plug content=package-run Prevent apps to act as device admin. content Plug content=package-assets Prevent apps to act as device admin. content Slot content=auth-service Prevent unauthorized access, service to service authentication. content Slot content=active-solution Prevent apps to act as solution snap. block-devices Plug Prevent mounting of partitions. account-control Plug * Prevent uncontrolled access to user and group databases. removable-media Plug Prevent uncontrolled access to removal media (micro sd, USB). This list is subject to change and might be extended. If unsure, please provide the slot/plug you want to use inside your application together with a justification to check or not this specific slot/plug is allowed and find potential alternatives. 6.1.2 Network Security and Ports ( CONDITIONAL ) \u00b6 The package-manifest.json must provide information about the used network interfaces. The app must keep it's network footprint as low as possible: No open debug ports by default Binding of the webserver to unix socket (preferred) or at least localhost Security protocols are to be be used by default. This means: No exposure of insecure protocols like http or websocket. ctrlX reverse proxy integration should be used for those specific protocols - or. in cases where that is not possible, https/websocket secure should be used in the App. For non-web Apps, secure protocols shall be used. When the App supports secure & insecure protocols, a secure configuration preset must be used for the App, so that the user must choose the override this setting if he wants to choose the insecure variant The App must provide a list of ports to be used in order to avoid conflicts. Thus, the App must be robust to already open / used ports. At least a warning shall be given to the user. The following ports are blocked and cannot be used by an App: 22 80 81 443 1338 (UDP) 1880 1900 (UDP) 2069 2070 4840 5355 (UDP) 5353 6000 7878 8069 11740 11741 This list is subject to change and might be extended. 6.1.3 File permissions ( CONDITIONAL ) \u00b6 It is very likely that an App stores settings & configuration data in the application's folder (e.g. $SNAP_DATA or $SNAP_COMMON). All file permissions have to be proper set so that only the owner of the files is allowed to read or alter the content. 6.2 Resource Consumption and Read/Write Operations ( MANDATORY ) \u00b6 Typically, more than one App is running on a ctrlX device. Thus, it is very important than an App does not consume too much system resources (e.g. RAM or disk space). In addition, the available virtual memory on the device is limited to the amount of physical available memory, because the possibility of swapping unused RAM to disk is disabled on ctrlX devices. Reasons for this is the otherwise negative impact on realtime capability and flash disk lifetime. 6.2.1 Resource Consumption \u00b6 Recommended amount of resources per App: RAM: <75 MB Snap-Size: ideally <100 MB, as small as possible If an App exceed these values by far, then please get in contact with your App partner support for further clarifications. 6.2.2 Integrated storage / Flash lifetime \u00b6 The App must not write diagnostics or similar data cyclically to the internal solid-state memory, as this will damage the flash cells. Instead, cyclical writing can be only be done to a network storage or any other external storage, as these allow easy and regular replacement for this use-case. The integrated storage medium and file system in the ctrlX CORE hardware is based on a solid state flash memory, which has by its nature a limited lifetime based on the number of erase cycles of its memory cells. In order to increase the overall lifetime of the device it is necessary to reduce the number of write/erase cycles on the flash cells. 6.3 Standard task scheduling ( MANDATORY ) \u00b6 The App must not have a negative impact for the realtime behavior of other apps. Scheduling / task scheme must stay flexible to allow to operate other apps, e.g. the ctrlX Motion App. 6.4 Test Setup for typical usage scenario ( MANDATORY ) \u00b6 For a fast and efficient start of the validation process, a usage scenario should be provided which does not require any peripheral components. This will help to identify first findings quickly and with rather low effort. If the App requires additional periphery for proper operation, a separate usage scenario should be provided which describes the interaction with the external component. Videos and further media can be attached. 7 ctrlX Basic Mechanisms ( MANDATORY ) \u00b6 7.1 ctrlX License Handling ( MANDATORY ) \u00b6 A license model must be defined for each App which is part of ctrlX World. To ensure the maximum usability for a ctrlX CORE user, the App must call the ctrlX license manager API on start or in operation to check if a license is activated. If a license is missing, the missing license will be shown to the user via a user interface (Note: This will be available after July 2021). A warning or error must be shown in case the license is missing. Each software license (SWL) bought by a customer generates one or more capabilities: Each App checks the existence of these capabilities, using the license manager interface The enforcement of an App license shall be realized according to the App business model as part of the contract addendum The usage of other licensing mechanisms is not allowed Licensing Interface will be available by March 2021 Note Currently, the License Manager returns no licenses on a ctrlX COREvirtual. 7.2 App signing by Bosch Rexroth ( MANDATORY ) \u00b6 To make sure that only Apps, which have successfully passed the validation process, are available as ctrlX App, these Apps need to be signed by Bosch Rexroth. During the signing process, the App binaries are checked and combined with a signature. This signature guarantees that the App cannot be modified after the validation and signing process. Note Currently, only Bosch Rexroth can sign ctrlX Apps 8 ctrlX Security System ( OPTIONAL ) \u00b6 8.1 ctrlX Reverse Proxy ( OPTIONAL ) \u00b6 The proxy URL is the most important setting in the package-manifest.json file, so that the App is integrated seamlessly into the ctrlX CORE. The reverse proxy will forward requests to the URL that are defined for the App web service. An App shall be bound to a unix socket instead of a local port. This will also prevent potential collisions with other services. Warning We strongly recommend binding the App web service to a unix socket, e.g. /var/snap/my-app/current/package-run/my-app/my-app.web.sock , instead of a local port. This will also prevent potential collisions with other services. The path length of a unix socket is limited to 108 characters. The complete path must respect that limit and the highlighted part has a maximal length of 50 characters. The path can be shortened if necessary by replacing \"package-run\" with \"run\" and shorting the file name from \"my-app.web.sock\" to \"web.sock\". However the folder name within the package-run (or run) folder must always be the name of the snap. Note Example code can be found here: https://developer.community.boschrexroth.com/t5/ctrlX-WORKS/Example-IntegrationWebServer-to-Reverse-Proxy/m-p/20193#M216 8.2 ctrlX Key & Certificate Management ( OPTIONAL ) \u00b6 The ctrlX CORE certificate management shall be used in order to manage the certificates of your application via the web interface. (package-manifest.json, snapcraft.yaml) Note: When the application acts as a ctrlX client, key & certificate based authentication has to be used whenever possible. In case if user & password based authentication is used, the configuration file permissions have to be correct so that no other user(s) on the system can read those data. 8.3 ctrlX Identity Management / Authentication & Authorization ( OPTIONAL ) \u00b6 When running a web service, the App should use the authentication & authorization mechanisms that the ctrlX CORE provides to protect the App against unauthorized access. If the mechanisms the ctrlX CORE provides are not used, hardcoded accounts / credentials have to be avoided. The ctrlX CORE's so called \"scopes\" shall be used to model App permissions. Scopes allow the assignment of permissions to users & groups via the web interface. In case permissions are used, the enforcement of the permissions must be implemented within the App (package-manifest.json) 9 ctrlX User Interface and Project Handling ( OPTIONAL ) \u00b6 9.1 ctrlX Configuration Storage ( CONDITIONAL ) \u00b6 The ctrlX CORE system provides multiple ways for an App to store its data. In order to provide a consistent backup and restore mechanism to users, the App data must be persisted within one of these locations. 9.1.1 Solution Handling ( OPTIONAL ) \u00b6 The so-called \"Solution\" is an essential part of any ctrlX CORE device. It provides a central storage location for all ctrlX Apps, that need to persist their app data in configurations. Configuration files are saved to the solution storage or loaded from the storage on demand (by the user or by REST API calls). A Configuration file contain project-specific data, like machine-related, PLC, HMI, fieldbus configurations. Shall be used in case of one or more configurations that can be easily switched by the user. Configurations are used and shared by multiple apps. It does not contain data that is related to a specific device, e.g. certificates, network configurations, users and their permissions, or should be valid for multiple configurations (e.g. app settings). Should be non-binary (in future version control system / GIT will be used). However, If there is no alternative and the files are not changing too often, small binaries can be stored in a configuration. 9.2.2 Environment Variables ( CONDITIONAL ) \u00b6 Environment variables are widely used across Linux to provide convenient access to system and application properties (see also https://snapcraft.io/docs/environment-variables) In the specific context of ctrlX, the environment variables $SNAP_COMMON or $SNAP_DATA ... ...Contain App-related data, that can be used across multiple configurations, e.g. solutions. ...Shall not contain data related to the user application, e.g. machine program, and should be applicable on multiple configurations. $SNAP_DATA shall be used for App data related to a specific app version (snap revision). $SNAP_COMMON shall be used App data across versions (snap revisions). External storage / SD Card and USB storage device (not available yet) \u00b6 Note These external storage devices are not supported at the moment. In the future, they Can contain large data (>100MB) or data that is frequently changed, e.g. logs, analytics, database. Must contain only non-confidential (public) data or data must be protected on app side. Data can be accessed or manipulated from external. 10 ctrlX AUTOMATION System Functions ( OPTIONAL ) \u00b6 10.1 ctrlX Logbook and Diagnostics System \u00b6 For further information see https://docs.automation.boschrexroth.com 11 Real Time Extension ( OPTIONAL ) \u00b6 Please contact your Partner Manager if a real time extension might be required for your App. Copyright \u00a9 Bosch Rexroth AG 2021 This guideline, as well as the data, specifications and other information set forth in it, are the exclusive property of Bosch Rexroth AG. It may not be reproduced or given to third parties without our consent.","title":"Developer Guideline"},{"location":"appdevguide.html#ctrlx-core-app-development-guideline","text":"Liability The information in this guideline is intended for product description purposes only and shall not be deemed to be a guaranteed characteristic, unless expressly stipulated by contract. All rights are reserved with respect to the content of this documentation and the availability of the product.","title":"ctrlX CORE App Development Guideline"},{"location":"appdevguide.html#table-of-content","text":"1 Introduction 2 App Validation Process 3 App Categories 4 Basic App Information (mandatory) 5 Further App Information (conditional) 6 Working Set Overview (mandatory) 7 ctrlX Basic Mechanisms (mandatory) 8 ctrlX Security System (optional) 9 ctrlX User Interface and Project Handling (optional) 10 ctrlX AUTOMATION System Functions (optional) 11 Real Time Extension (optional)","title":"Table of content"},{"location":"appdevguide.html#1-introduction","text":"This guideline give orientation to App developers and Partners who want to contribute with new Apps to the ctrlX World Ecosystem. This is a so-called \"living document\". New Apps might lead to new topics and may result in new guidelines at any time.","title":"1 Introduction"},{"location":"appdevguide.html#11-app-development-for-ctrlx-automation","text":"The open ctrlX AUTOMATION system architecture allows developers to implement further system functions with low effort at any time as Apps and as open source software. This document gives orientation on how to create apps to integrate best into ctrlX AUTOMATION. With a dedicated app validation and signing process, Bosch Rexroth approves an App as qualified for ctrlX AUTOMATION . This process ensures that the app meets the quality standards of ctrlX AUTOMATION. This document describes all aspects which have to be considered when an App is developed. Some aspects are mandatory , both from legal and technical viewpoint. Others are optional and decribe how an App can be fully integrated in the ctrlX system architecture to provide the best user experience.","title":"1.1 App development for ctrlX AUTOMATION"},{"location":"appdevguide.html#12-obligation-of-technical-aspects","text":"This document describes technical aspects for ctrlX Apps. These aspects in each case have one of the following obligations: MANDATORY - This aspect is stricly required and must be implemented OPTIONAL This Aspect brings an added-value and can or should be implemented. CONDITIONAL - Aspect must be implemented in special cases . Bosch Rexroth and the Partner will identify the requirements during the App integration process.","title":"1.2 Obligation of technical aspects"},{"location":"appdevguide.html#13-partner-contract-and-legal-framework","text":"This Development Guide describes the technical integration of an app into ctrlX. In addition, as non-technical prerequisites, the following documents need to be available and signed, before an app gets published: The Software Distribution Framework Agreement (\"Partner Contract\") describes fundamental constraints of the partnership between you as app developer and Bosch Rexroth and affiliates A License Contract describes all app related licenses as part of the product to be sold within Bosch Rexroth and affiliates sales channels Optionally a Letter of Intent (LOI) Optionally a Non Disclosure Agreement (NDA)","title":"1.3 Partner Contract and Legal Framework"},{"location":"appdevguide.html#2-app-validation-process","text":"As a mandatory step of an App integration into ctrlX, Bosch Rexroth will perform a standard App validation and signing process. For handover, Bosch Rexroth provides an according ctrlX World Partner Portal SharePoint space, which will be prepared during the Partner contracting process.","title":"2 App Validation Process"},{"location":"appdevguide.html#21-inital-meeting-for-the-app-validation","text":"Before the validation starts, the Partner / App Developer must provide the app architecture A picture of the main communication paths is needed, including a building block overview of the App a short description of the communication paths to other Apps / Devices the App configuration and data storage concept a description of a typical standard scenario The architecture overview should be stored as \" architecture-overview.x \" in the {app-name} folder and should be delivered with each new App version. This document typically will be provided for an initial meeting with the Partner / App Developer, the according Bosch Rexroth Partner Manager and the Bosch Rexroth App validation Team. At this point, the partner also should already have uploaded the necessary artifacts in order to be able to clarify any open points.","title":"2.1 Inital Meeting for the App Validation"},{"location":"appdevguide.html#22-artifacts-delivery","text":"In an automated validation Framework, Bosch Rexroth checks the provided artefacts and the described behaviour of an App that is to be signed as official ctrlX App. This validation Framework requires a standard format for artifacts and information. To simplify the artifact's delivery, we provide a base folder structure with description and schema files. This will help App developers to deliver the required artefacts and us to simplify the validation work. Please use the given structure, folder names and file names like given below, without any renaming. The provided artifacts and information must be organized in the following way: General Folder structure {company-name}\\ - Partner Company Name. Folder name is created by Bosch Rexroth {app-name}\\ - Technical App Name. This App name is unique. A folder will be created by the partner {version}\\ - The version folder separates the different versions. Format is three numbers separated by dots, e.g. \"1.0.2\". Each version has to be stored in a separate folder. A folder will be created by the partner {artifacts}\\ - The required documents as input for the validation process (see 4.1) Handover of artifacts After all required information is available in your local folder, zip the folder with Windows-zip and upload it as \" artifacts.zip \" to the ctrlX World Partner Portal space in the \" .../{company-name}/{app-name}/{version}/ \" path. Important To avoid problems during upload of the artifacts.zip file, please use the Windows-zip function","title":"2.2 Artifacts Delivery"},{"location":"appdevguide.html#24-validation-and-signing","text":"The Validation typically will be done in several iterations, depending on the result of a particular validation activity. If all required information is provided in the ctrlX World Partner Portal space, an according mail to ctrlx.world@boschrexroth.de will trigger a validation loop. Basically, the workflow will look like the following: Partner / App Developer: Upload required artefacts and inform Bosch Rexroth Bosch Rexroth checks the artefacts for completeness. If rework is required, the partner will be notified via Email with an attached report in the \" .../{company-name}/{app-name}/{version}/results \" folder When artefats are complete, the validation will start. Again, if rework is required, the partner will be notified with an attached report When validation was sucessful, Bosch Rexroth will sign the App and inform the Partner via Email.","title":"2.4 Validation and Signing"},{"location":"appdevguide.html#3-app-categories","text":"Apps can be integrated into ctrlX on different levels. As an orientation for the prerequisites and possibilities on different levels, three categories are defined. A category, however, is no formal boundary, and an app can seamless support aspects of the different categories. Also, subsequent versions of an app might support more aspects than an earlier version. In addition, there is no correlation between the category and the business value of an app. However, at least all aspects that are mentioned in Category 1 need to be met, since they are considered as mandatory . In this chapter, the aspects are briefly described. The remainder of these documents provides detailed information about all aspects and also refers to additional sources of information, like how-to documents and code samples.","title":"3 App Categories"},{"location":"appdevguide.html#31-category-1-basic-apply-to-ctrlx-basic-mechanisms","text":"To be approved as an official ctrlX CORE app, an app must support a minimum set of mandatory aspects.","title":"3.1 Category 1 (Basic): Apply to ctrlX Basic Mechanisms"},{"location":"appdevguide.html#311-overview","text":"The App itself and an according user documentation needs to be provided. Also legal aspects like FOSS are required. Working set information is needed, to support the test and validation process. During runtime, the App must use the onboard licensing mechanism of ctrlX CORE.","title":"3.1.1 Overview"},{"location":"appdevguide.html#312-customer-user-experience","text":"Customers find the App in the ctrlX App Store. They know how the App is licensed and can use the overall Bosch Rexroth licensing system for ctrlX. They also can be sure that the App contributes to the basic ctrlX Security Mechanisms.","title":"3.1.2 Customer User Experience"},{"location":"appdevguide.html#313-technical-prerequisites","text":"Note As mentioned, the aspects which are listed here are MANDATORY . Means, all of them are required for an official ctrlX app. Basic App Information: App Artifacts (\u201cExecutables\u201d for ctrlX CORE and ctrlX CORE virtual and basic technical information) App Documentation / User Manual and Release Notes Additional App Properties according to Linux Ubuntu conventions FOSS Information Working Set Overview: Information about Security behavior (Linux Slots & Plugs, Ports, Sockets) Information about Resource Consumption and Read/Write Operations Standard task scheduling overview Test Setup Description for typical usage scenario Integration into ctrlX Basic Mechanisms: Use of ctrlX License Handling App signed by Bosch Rexroth","title":"3.1.3 Technical Prerequisites"},{"location":"appdevguide.html#32-category-2-advanced-contribute-to-ctrlx-engineering-concepts","text":"For a good integration into ctrlX from a user's point of view, an App should fulfil the aspects of Category 2 - even if these aspects are not necessary for App validation.","title":"3.2 Category 2 (Advanced): Contribute to ctrlX Engineering Concepts"},{"location":"appdevguide.html#321-overview","text":"The App uses the according ctrlX system interfaces and supports ctrlX platform features like Identity Management, Data Management and Backup/Restore.","title":"3.2.1 Overview"},{"location":"appdevguide.html#322-customer-user-experience","text":"The App contributes to the ctrlX User Interface and System Behaviour. It integrates into basic user stories for configuration and maintenance of a ctrlX Application.","title":"3.2.2 Customer User Experience"},{"location":"appdevguide.html#323-technical-recommendations","text":"Note As mentioned, the aspects which are listed here are OPTIONAL . However, they are highly recommended for a good user experience. Also, the aspects of category 2 and 3 are overlapping and not formally separated Further App Information: FOSS Sources Semantic versioning scheme Integration into ctrlX Security System: ctrlX Reverse Proxy ctrlX Key & Certificate Management ctrlX Identity Management Improved Network Security (no insecure protocols) Integration into ctrlX User Interface and Project Handling ctrlX Navigation Pane and Landing Page ctrlX Configuration Storage","title":"3.2.3 Technical Recommendations"},{"location":"appdevguide.html#33-category-3-extended-extend-ctrlx-automation-features","text":"Finally, an App can integrate in the Automation framework and extend the ctrlX real time system Note Real time integration requires additional training and support from Bosch Rexroth to avoid unexpected system behavior and impacts on the ctrlX real time kernel.","title":"3.3 Category 3 (Extended): Extend ctrlX AUTOMATION features"},{"location":"appdevguide.html#331-description","text":"The App exposes information in the ctrlX Data Layer for all other Apps. It also can extend the real time functions of ctrlX if it connected to the real time task scheduler","title":"3.3.1 Description"},{"location":"appdevguide.html#332-customer-user-experience","text":"The App extends the ctrlX AUTOMATION system functions, e.g. for Motion and/or PLC","title":"3.3.2 Customer User Experience"},{"location":"appdevguide.html#333-technical-recommendations","text":"Integration into ctrlX AUTOMATION System Functions: ctrlX Data Layer ctrlX Logbook and Diagnostics System Real Time Extension: ctrlX Scheduler","title":"3.3.3 Technical Recommendations"},{"location":"appdevguide.html#4-basic-app-information-mandatory","text":"The Basic App Information is checked as prerequisite by Bosch Rexroth, before the validation starts.","title":"4 Basic App Information (MANDATORY) "},{"location":"appdevguide.html#41-app-artifacts-mandatory","text":"","title":"4.1 App Artifacts (MANDATORY)"},{"location":"appdevguide.html#411-artifacts-folder-template","text":"The ctrlX World Partner Portal provides a file (artifacts.zip) which can be downloaded and extract locally. This will create the required folder structure for the mandatory artifacts out-of-the-box, with default descriptions and schema files. !!!! important Please use the given structure, folder names and file names unchanged. This will support an efficient validation process. The artifacts are organized in five sub folders:","title":"4.1.1 Artifacts folder template"},{"location":"appdevguide.html#412-disclosure-folder-mandatory","text":"In the disclosure folder the FOSS source files and license text files are stored \"fossinfo.json\" ( MANDATORY ) - license texts of all used open source software of an App. For more information about format and content, refer the example json and the according json-schema in the standard \"artifacts.zip\" file. \"foss-sources.zip\" ( CONDITIONAL ) - In the foss-sources.zip file, the sources of all used open source libraries / packages are zipped without a password. \"foss-offer.x\" ( CONDITIONAL ) - If the foss-sources.zip file is not given, a human-readable file with the name \"offer.x\" is needed. It explains how the user can get the sources. Either FOSS sources or FOSS offer is required .","title":"4.1.2 \"Disclosure\" folder (MANDATORY)"},{"location":"appdevguide.html#413-build-info-folder-mandatory","text":"The build info folder stores all build relevant information. Note: For the {xxx}-description files, a default file (with explanation) and the according schema is provided in the standard artifacts.zip example. \"snapcraft.yaml\" ( MANDATORY ) - The snapcraft.yaml file is the main entry point to create a snap through Snapcraft. It contains all the details the snapcraft command needs to build a snap. See also https://snapcraft.io/docs/snapcraft-yaml-reference \"package-manifest.json\" ( MANDATORY ) - The package-manifest.json covers essential settings, like the proxy URL \"portlist-description.json\" ( MANDATORY ) - In the port list all used ports are described \"unixsocket-description.json\" ( MANDATORY ) - In the Unix socket description all used Unix sockets are described. If your app don\u00b4t us a Unix socket, provide a empty description file \"slotplug-description.json\" ( MANDATORY ) - In the slot and plug description all used slot and plugs are described","title":"4.1.3 \"Build Info\" folder (MANDATORY)"},{"location":"appdevguide.html#414-documentation-folder-mandatory","text":"Here, all App relevant documentation is provided \"manual.pdf\" ( MANDATORY ) - The App description (User Manual) documents the overall functionality of the App \"test-setup-description.pdf\" ( MANDATORY ) - The App setup describes how to configure the App on a ctrlX device for a typical usage and test scenario \"release-notes.pdf\" ( MANDATORY ) - In the release notes the newest changes, workarounds and defects are mentioned","title":"4.1.4 \"Documentation\" folder (MANDATORY)"},{"location":"appdevguide.html#415-app-states-folder-mandatory","text":"The app validation framework tries to establish relevant states which have to be tested. Therefore, a sequence of API calls has to be provided to bring the App to the test state \"standard-scenario1.json\" ( MANDATORY ) - Each file contains a collection (sequence of Rest API calls) to generate the standard usage scenario. In each of these scenarios, the validation process monitors the memory and storage usage, the CPU load and the Ethernet communication load. The collections/files are to be created with Postman. \"standard-scenario{2 to n}.json\" (optional) - one or more scenarios, if appropriate","title":"4.1.5 \"App States\" folder (MANDATORY)"},{"location":"appdevguide.html#416-snaps-folder-mandatory","text":"ctrlX currently support the amd64 and the arm64 processor architecture. The according target snaps for the App are provided here \"{TechnicalAppName}_{version}_arm64.snap\" ( MANDATORY ) - Snap which runs in armd64 environments. Currently, the arm64 architecture is used in ctrlX CORE hardware. \"{TechnicalAppName}_{version}_amd64.snap\" ( OPTIONAL ) - Snap which runs in amd64 environments. The amd64 is used in ctrlX CORE virtual. However, future ctrlX CORE hardware will also use amd64 architecture. So, it is recommended to provide also a snap for this platform to avoid future inconvenience.","title":"4.1.6 \"Snaps\" folder (MANDATORY)"},{"location":"appdevguide.html#42-app-documentation-mandatory","text":"","title":"4.2 App Documentation (MANDATORY)"},{"location":"appdevguide.html#421-user-manual-mandatory","text":"A user manual must be delivered together with the App. The user manual must describe typical user actions for commissioning and operation of the App from a user / customer perspective.","title":"4.2.1 User Manual (MANDATORY)"},{"location":"appdevguide.html#422-test-setup-description-mandatory","text":"A test setup description must be delivered together with the App. The test setup description must contain instructions to realize a test scenario. It must include a description of sequences and dependencies, e.g. additional hardware. If you use plugs and slots, please provide an explanation here.,","title":"4.2.2 Test Setup Description (MANDATORY)"},{"location":"appdevguide.html#423-release-notes-mandatory","text":"A release note documentation must be delivered together with the App.","title":"4.2.3 Release Notes (MANDATORY)"},{"location":"appdevguide.html#424-general-app-description-for-the-ctrlx-app-zone-conditional","text":"Each app needs product information as part of the sales package. The description shall be generated based on the App description template (from the ctrlX World Partner Portal) The App description package is necessary in case the App will be shown also in the App Zone of the ctrlX AUTOMATION Community or other marketing channels.","title":"4.2.4 General App Description for the ctrlX App Zone (CONDITIONAL)"},{"location":"appdevguide.html#43-additional-app-information-according-to-linux-ubuntu-conventions-mandatory","text":"The following properties must be defined within the \"snapcraft.yaml\" file (see https://snapcraft.io/docs/snapcraft-yaml-reference), which also need to be exclusively part of the App and have to be collision free with other Apps. Title - The general name of the App, that will be shown in all sales channels and customer touch points, e.g. App overview or ctrlX App Store. Definition will be done together with the partner manager, as part of the business model definitions. Example: \"My App\" Name - The technical name of the snap. The name has to unique in the snap-universe and across all snap developer and device vendors. The snap name has to start with \"ctrlx-\" and must be lowercase and a maximum length of 32 characters . ctrlX World Partners add their company name to the snap name. Example: \"ctrlx-partnername-myapp\" Confinement - Must be set to \"strict\" for releases. See also https://snapcraft.io/docs/snap-confinement Grade - Defines the quality grade of the App. During development, you may choose to use \"devel\" . When releasing the application, the grade must be set to \"stable\" .","title":"4.3 Additional  App Information according to Linux Ubuntu conventions (MANDATORY)"},{"location":"appdevguide.html#44-foss-info-provisioning-mandatory","text":"If the App uses Free and Open Source Software (FOSS), it is necessary to ship certain license information with the App. With \"fossinfo.xml\" Open source license text must be obliged to disclose for copyright reasons. Bosch Rexroth offers the possibility to display the license texts of the used open source software in the web interface of ctrlX, For more information about \"fossinfo.xml\" please refer to the guideline in the SDK. If the display of FOSS license texts is implemented within the App, at least a reference to the license display in the App must be provided in the \"fossinfo.xml\". Since users must be able to view the license texts before the open source software is installed, the \"fossinfo.xml\" must also be stored outside the App in the \"disclosure\" directory (see chapter 3.1.2). In addition, the license texts must be listed within the user documentation or at least a reference must be inserted where the FOSS license texts are located.","title":"4.4 FOSS Info Provisioning (MANDATORY)"},{"location":"appdevguide.html#5-further-app-information-conditional","text":"","title":"5 Further App Information (CONDITIONAL)"},{"location":"appdevguide.html#51-foss-sources-conditional","text":"Bosch Rexroth recommends putting all FOSS sources in a zip file with the file name \"foss-sources.zip\" and store it in the \"disclosure\" directory, where the \"fossinfo.xml\" is provided. In case that the FOSS sources are not directly provided, a written offer is mandatory for open source software with copyleft clause (e.g. GPLv2 or GPLv3) . This means, a human-readable file with the name \"foss-offer.x\" needs to be provided, which explains how the user can get the FOSS sources of the App.","title":"5.1 FOSS Sources (CONDITIONAL)"},{"location":"appdevguide.html#52-semantic-versioning-scheme-optional","text":"It is recommended to use a versioning scheme which is based on the https://semver.org/ for versioning of the App. This setting is also relevant in the snapcraft.yaml file during creation of the snap. Note Increasing version numbers are mandatory, independent of the used version scheme","title":"5.2 Semantic versioning scheme (OPTIONAL)"},{"location":"appdevguide.html#53-restart-delay-optional","text":"The restart-delay of the App daemon should be set \"5s\" or similar in the snapcraft.yaml to prevent the 10s lock-out","title":"5.3 Restart Delay (OPTIONAL)"},{"location":"appdevguide.html#6-working-set-overview-mandatory","text":"","title":"6 Working Set Overview (MANDATORY)"},{"location":"appdevguide.html#61-security-information-considerations","text":"ctrlX CORE is designed with strong security requirements. Also, the overall ctrlX CORE architecture is built to be compliant to be certified as defined by IEC62433. This also implies some requirements to the Apps and software running in the ctrlX Ecosystem. For ctrlX App, this means Only encrypted and secured communication protocols (e.g. https) must be used. Unsecure protocols (e.g. http) are not to be used, unless explicitly defined in the validation process. The attack surface of the device should be kept as minimal as possible. This means for example that the number of open ports of an App should be reduced to a minimum.","title":"6.1 Security Information &amp; Considerations"},{"location":"appdevguide.html#611-interfaces-slots-plugs-mandatory","text":"Used interfaces (Slots & Plugs) must be documented in the snapcraft.yaml file. The following considerations must be taken into account: Use as fewer interfaces (slots/plugs) as possible . The amount of interfaces (slots & plugs) shall be limited to a minimum . The App should declare only the interfaces (slots and/or plugs) which are absolutely required to minimize the attack surface. When reviewing the App, Bosch Rexroth needs to know for which purpose a specific slot and/or plug is required by an App. The according justification must be provided together with the App. No global slots & plugs . App developers must avoid assigning global slots & plugs, which are valid for all applications. Global slots & plugs should be used only if absolutely necessary. Debug interfaces only on demand . By default, the App should not provide any open network debug interfaces. If debugging is required, the user shall be able to enable the debug interface on demand and only after successful authentication (and authorization). In general, debug interfaces shall not be accessible without authentication and/or insufficient or even hard-coded credentials. The following Operating System interfaces are denied or restricted for usage. See also https://snapcraft.io/docs/supported-interfaces. Interface Direction Parameters Exceptions Reason udisk2 Plug & Slot system-files Plug * \"read=^(\\/dev\\/shm| \\/dev\\/shm\\/.+)$\", \"write=^(\\/dev\\/shm| \\/dev\\/shm\\/.+)$\" snapd-control Plug * Prevent uncontrolled access to system configuration. raw-volumes Plug Prevent mounting of partitions. process-control Plug Prevent tampering with running processes. content Plug content=package-certificates Prevent apps to act as device admin. content Plug content=package-run Prevent apps to act as device admin. content Plug content=package-assets Prevent apps to act as device admin. content Slot content=auth-service Prevent unauthorized access, service to service authentication. content Slot content=active-solution Prevent apps to act as solution snap. block-devices Plug Prevent mounting of partitions. account-control Plug * Prevent uncontrolled access to user and group databases. removable-media Plug Prevent uncontrolled access to removal media (micro sd, USB). This list is subject to change and might be extended. If unsure, please provide the slot/plug you want to use inside your application together with a justification to check or not this specific slot/plug is allowed and find potential alternatives.","title":"6.1.1 Interfaces / Slots &amp; Plugs (MANDATORY)"},{"location":"appdevguide.html#612-network-security-and-ports-conditional","text":"The package-manifest.json must provide information about the used network interfaces. The app must keep it's network footprint as low as possible: No open debug ports by default Binding of the webserver to unix socket (preferred) or at least localhost Security protocols are to be be used by default. This means: No exposure of insecure protocols like http or websocket. ctrlX reverse proxy integration should be used for those specific protocols - or. in cases where that is not possible, https/websocket secure should be used in the App. For non-web Apps, secure protocols shall be used. When the App supports secure & insecure protocols, a secure configuration preset must be used for the App, so that the user must choose the override this setting if he wants to choose the insecure variant The App must provide a list of ports to be used in order to avoid conflicts. Thus, the App must be robust to already open / used ports. At least a warning shall be given to the user. The following ports are blocked and cannot be used by an App: 22 80 81 443 1338 (UDP) 1880 1900 (UDP) 2069 2070 4840 5355 (UDP) 5353 6000 7878 8069 11740 11741 This list is subject to change and might be extended.","title":"6.1.2 Network Security and Ports (CONDITIONAL)"},{"location":"appdevguide.html#613-file-permissions-conditional","text":"It is very likely that an App stores settings & configuration data in the application's folder (e.g. $SNAP_DATA or $SNAP_COMMON). All file permissions have to be proper set so that only the owner of the files is allowed to read or alter the content.","title":"6.1.3 File permissions (CONDITIONAL)"},{"location":"appdevguide.html#62-resource-consumption-and-readwrite-operations-mandatory","text":"Typically, more than one App is running on a ctrlX device. Thus, it is very important than an App does not consume too much system resources (e.g. RAM or disk space). In addition, the available virtual memory on the device is limited to the amount of physical available memory, because the possibility of swapping unused RAM to disk is disabled on ctrlX devices. Reasons for this is the otherwise negative impact on realtime capability and flash disk lifetime.","title":"6.2 Resource Consumption and Read/Write Operations (MANDATORY)"},{"location":"appdevguide.html#621-resource-consumption","text":"Recommended amount of resources per App: RAM: <75 MB Snap-Size: ideally <100 MB, as small as possible If an App exceed these values by far, then please get in contact with your App partner support for further clarifications.","title":"6.2.1 Resource Consumption"},{"location":"appdevguide.html#622-integrated-storage-flash-lifetime","text":"The App must not write diagnostics or similar data cyclically to the internal solid-state memory, as this will damage the flash cells. Instead, cyclical writing can be only be done to a network storage or any other external storage, as these allow easy and regular replacement for this use-case. The integrated storage medium and file system in the ctrlX CORE hardware is based on a solid state flash memory, which has by its nature a limited lifetime based on the number of erase cycles of its memory cells. In order to increase the overall lifetime of the device it is necessary to reduce the number of write/erase cycles on the flash cells.","title":"6.2.2 Integrated storage / Flash lifetime"},{"location":"appdevguide.html#63-standard-task-scheduling-mandatory","text":"The App must not have a negative impact for the realtime behavior of other apps. Scheduling / task scheme must stay flexible to allow to operate other apps, e.g. the ctrlX Motion App.","title":"6.3 Standard task scheduling (MANDATORY)"},{"location":"appdevguide.html#64-test-setup-for-typical-usage-scenario-mandatory","text":"For a fast and efficient start of the validation process, a usage scenario should be provided which does not require any peripheral components. This will help to identify first findings quickly and with rather low effort. If the App requires additional periphery for proper operation, a separate usage scenario should be provided which describes the interaction with the external component. Videos and further media can be attached.","title":"6.4 Test Setup for typical usage scenario (MANDATORY)"},{"location":"appdevguide.html#7-ctrlx-basic-mechanisms-mandatory","text":"","title":"7 ctrlX Basic Mechanisms (MANDATORY)"},{"location":"appdevguide.html#71-ctrlx-license-handling-mandatory","text":"A license model must be defined for each App which is part of ctrlX World. To ensure the maximum usability for a ctrlX CORE user, the App must call the ctrlX license manager API on start or in operation to check if a license is activated. If a license is missing, the missing license will be shown to the user via a user interface (Note: This will be available after July 2021). A warning or error must be shown in case the license is missing. Each software license (SWL) bought by a customer generates one or more capabilities: Each App checks the existence of these capabilities, using the license manager interface The enforcement of an App license shall be realized according to the App business model as part of the contract addendum The usage of other licensing mechanisms is not allowed Licensing Interface will be available by March 2021 Note Currently, the License Manager returns no licenses on a ctrlX COREvirtual.","title":"7.1 ctrlX License Handling (MANDATORY)"},{"location":"appdevguide.html#72-app-signing-by-bosch-rexroth-mandatory","text":"To make sure that only Apps, which have successfully passed the validation process, are available as ctrlX App, these Apps need to be signed by Bosch Rexroth. During the signing process, the App binaries are checked and combined with a signature. This signature guarantees that the App cannot be modified after the validation and signing process. Note Currently, only Bosch Rexroth can sign ctrlX Apps","title":"7.2 App signing by Bosch Rexroth (MANDATORY)"},{"location":"appdevguide.html#8-ctrlx-security-system-optional","text":"","title":"8 ctrlX Security System (OPTIONAL)"},{"location":"appdevguide.html#81-ctrlx-reverse-proxy-optional","text":"The proxy URL is the most important setting in the package-manifest.json file, so that the App is integrated seamlessly into the ctrlX CORE. The reverse proxy will forward requests to the URL that are defined for the App web service. An App shall be bound to a unix socket instead of a local port. This will also prevent potential collisions with other services. Warning We strongly recommend binding the App web service to a unix socket, e.g. /var/snap/my-app/current/package-run/my-app/my-app.web.sock , instead of a local port. This will also prevent potential collisions with other services. The path length of a unix socket is limited to 108 characters. The complete path must respect that limit and the highlighted part has a maximal length of 50 characters. The path can be shortened if necessary by replacing \"package-run\" with \"run\" and shorting the file name from \"my-app.web.sock\" to \"web.sock\". However the folder name within the package-run (or run) folder must always be the name of the snap. Note Example code can be found here: https://developer.community.boschrexroth.com/t5/ctrlX-WORKS/Example-IntegrationWebServer-to-Reverse-Proxy/m-p/20193#M216","title":"8.1 ctrlX Reverse Proxy (OPTIONAL)"},{"location":"appdevguide.html#82-ctrlx-key-certificate-management-optional","text":"The ctrlX CORE certificate management shall be used in order to manage the certificates of your application via the web interface. (package-manifest.json, snapcraft.yaml) Note: When the application acts as a ctrlX client, key & certificate based authentication has to be used whenever possible. In case if user & password based authentication is used, the configuration file permissions have to be correct so that no other user(s) on the system can read those data.","title":"8.2 ctrlX Key &amp; Certificate Management (OPTIONAL)"},{"location":"appdevguide.html#83-ctrlx-identity-management-authentication-authorization-optional","text":"When running a web service, the App should use the authentication & authorization mechanisms that the ctrlX CORE provides to protect the App against unauthorized access. If the mechanisms the ctrlX CORE provides are not used, hardcoded accounts / credentials have to be avoided. The ctrlX CORE's so called \"scopes\" shall be used to model App permissions. Scopes allow the assignment of permissions to users & groups via the web interface. In case permissions are used, the enforcement of the permissions must be implemented within the App (package-manifest.json)","title":"8.3 ctrlX Identity Management / Authentication &amp; Authorization (OPTIONAL)"},{"location":"appdevguide.html#9-ctrlx-user-interface-and-project-handling-optional","text":"","title":"9 ctrlX User Interface and Project Handling (OPTIONAL)"},{"location":"appdevguide.html#91-ctrlx-configuration-storage-conditional","text":"The ctrlX CORE system provides multiple ways for an App to store its data. In order to provide a consistent backup and restore mechanism to users, the App data must be persisted within one of these locations.","title":"9.1 ctrlX Configuration Storage (CONDITIONAL)"},{"location":"appdevguide.html#911-solution-handling-optional","text":"The so-called \"Solution\" is an essential part of any ctrlX CORE device. It provides a central storage location for all ctrlX Apps, that need to persist their app data in configurations. Configuration files are saved to the solution storage or loaded from the storage on demand (by the user or by REST API calls). A Configuration file contain project-specific data, like machine-related, PLC, HMI, fieldbus configurations. Shall be used in case of one or more configurations that can be easily switched by the user. Configurations are used and shared by multiple apps. It does not contain data that is related to a specific device, e.g. certificates, network configurations, users and their permissions, or should be valid for multiple configurations (e.g. app settings). Should be non-binary (in future version control system / GIT will be used). However, If there is no alternative and the files are not changing too often, small binaries can be stored in a configuration.","title":"9.1.1 Solution Handling (OPTIONAL)"},{"location":"appdevguide.html#922-environment-variables-conditional","text":"Environment variables are widely used across Linux to provide convenient access to system and application properties (see also https://snapcraft.io/docs/environment-variables) In the specific context of ctrlX, the environment variables $SNAP_COMMON or $SNAP_DATA ... ...Contain App-related data, that can be used across multiple configurations, e.g. solutions. ...Shall not contain data related to the user application, e.g. machine program, and should be applicable on multiple configurations. $SNAP_DATA shall be used for App data related to a specific app version (snap revision). $SNAP_COMMON shall be used App data across versions (snap revisions).","title":"9.2.2 Environment Variables (CONDITIONAL)"},{"location":"appdevguide.html#external-storage-sd-card-and-usb-storage-device-not-available-yet","text":"Note These external storage devices are not supported at the moment. In the future, they Can contain large data (>100MB) or data that is frequently changed, e.g. logs, analytics, database. Must contain only non-confidential (public) data or data must be protected on app side. Data can be accessed or manipulated from external.","title":"External storage / SD Card and USB storage device (not available yet)"},{"location":"appdevguide.html#10-ctrlx-automation-system-functions-optional","text":"","title":"10 ctrlX AUTOMATION System Functions (OPTIONAL)"},{"location":"appdevguide.html#101-ctrlx-logbook-and-diagnostics-system","text":"For further information see https://docs.automation.boschrexroth.com","title":"10.1 ctrlX Logbook and Diagnostics System"},{"location":"appdevguide.html#11-real-time-extension-optional","text":"Please contact your Partner Manager if a real time extension might be required for your App. Copyright \u00a9 Bosch Rexroth AG 2021 This guideline, as well as the data, specifications and other information set forth in it, are the exclusive property of Bosch Rexroth AG. It may not be reproduced or given to third parties without our consent.","title":"11 Real Time Extension (OPTIONAL)"},{"location":"build.html","text":"Build and install \u00b6 Build program C++ \u00b6 To select the build target change the settings in Visual Studio status bar. Click on (1): Select Release for creating a snap afterwards or Debug when you can debug in Visual Studio Code. Select compiler kit: Click on (2) \"No Kit Selected\". Select \"GCC for aarch64-linux-gnu...\" for ctrlX CORE \"GCC for x86_64_linux-gnu...\" for ctrlX CORE Virtual Build program. Click on (3) or press F7 Create snap \u00b6 Start task CMake Build Snap by selecting the following command of the menu bar in Visual Studio Code Editor: Terminal > Run Build Task or press Ctrl-P and enter task CMake Build Snap . Select the target for which you want to create the snap. Now you should have one snap file generated: e.g ./helloworld_1.0.0_amd64.snap Build program golang \u00b6 Create Snap \u00b6 Start task Snapcraft by selecting the following command of the menu bar in Visual Studio Code Editor: Terminal > Run Build Task or press Ctrl-P and enter task CMake Build Snap . Select the target for which you want to create the snap. Use amd64 for ctrlX CORE virtual and arm64 for ctrlX CORE Now you should have one snap file generated: e.g ./hello-webserver_1.0.0_amd64.snap Install the snap \u00b6 Open the web interface of your control. Switch to (1) Service Mode (2) and allow to install snaps from untrusted source go to Local Storage and install the file *.snap for the correct architecture. *amd64.snap for ctrlX CORE Virtual or *arm64.snap for ctrlX CORE. In the examples, the apps are starting automatically as a daemon (line daemon: simple in snapcraft.yaml ).","title":"Build and install"},{"location":"build.html#build-and-install","text":"","title":"Build and install"},{"location":"build.html#build-program-c","text":"To select the build target change the settings in Visual Studio status bar. Click on (1): Select Release for creating a snap afterwards or Debug when you can debug in Visual Studio Code. Select compiler kit: Click on (2) \"No Kit Selected\". Select \"GCC for aarch64-linux-gnu...\" for ctrlX CORE \"GCC for x86_64_linux-gnu...\" for ctrlX CORE Virtual Build program. Click on (3) or press F7","title":"Build program C++"},{"location":"build.html#create-snap","text":"Start task CMake Build Snap by selecting the following command of the menu bar in Visual Studio Code Editor: Terminal > Run Build Task or press Ctrl-P and enter task CMake Build Snap . Select the target for which you want to create the snap. Now you should have one snap file generated: e.g ./helloworld_1.0.0_amd64.snap","title":"Create snap"},{"location":"build.html#build-program-golang","text":"","title":"Build program golang"},{"location":"build.html#create-snap_1","text":"Start task Snapcraft by selecting the following command of the menu bar in Visual Studio Code Editor: Terminal > Run Build Task or press Ctrl-P and enter task CMake Build Snap . Select the target for which you want to create the snap. Use amd64 for ctrlX CORE virtual and arm64 for ctrlX CORE Now you should have one snap file generated: e.g ./hello-webserver_1.0.0_amd64.snap","title":"Create Snap"},{"location":"build.html#install-the-snap","text":"Open the web interface of your control. Switch to (1) Service Mode (2) and allow to install snaps from untrusted source go to Local Storage and install the file *.snap for the correct architecture. *amd64.snap for ctrlX CORE Virtual or *arm64.snap for ctrlX CORE. In the examples, the apps are starting automatically as a daemon (line daemon: simple in snapcraft.yaml ).","title":"Install the snap"},{"location":"changelog.html","text":"Changelog \u00b6 Softwaredevelopment Kit for ctrlX AUTOMATION \u00b6 Version 1.10.0 _ July 15, 2021 \u00b6 Added python appdata sample Added python ctrlX Data Layer Browse sample Added python ctrlX Data Layer Client (complex) sample Added python ctrlX Data Layer Client Subsrciption sample Added python ctrlX Data Layer Provider all-data sample Added python Webserver sample Added python Calculation sample Refactored hello.webserver sample in go Added go appdata sample Added TPM2 sample in shell scripts Adapt style Added Api Refernece c/c++ python and c# Improve Documentation Added Python Sample with different Loglevels Added C# Sample with different Loglevels Added C++ Sample with different Loglevels Remove REST API's from package (available online) Version 1.8.0 _ March 25, 2021 \u00b6 Added .NET 5 (.NET Core) hello.world sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Browse sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Client sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Provider sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Demo sample (self-contained) Added python ctrlX Data Layer Client sample Added python ctrlX Data Layer Provider sample Added python API Documentation Added .NET 5 (.NET Core) API Documentation Version 1.6.0 _ November 15, 2020 \u00b6 Changed license from BSD3 to MIT Refactored hello.webserver sample Added datalayer.ecat.io sample (exemplary work with fieldbus) Added API descriptions Extended datalayer.register.node and datalayer.client sample with flatbuffers Prepared experimental remote snap debugging Added datalayer.realtime sample (share real time data) Version 1.4.0 _ July 15, 2020 \u00b6 Prepare first release","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"changelog.html#softwaredevelopment-kit-for-ctrlx-automation","text":"","title":"Softwaredevelopment Kit for ctrlX AUTOMATION"},{"location":"changelog.html#version-1100-_-july-15-2021","text":"Added python appdata sample Added python ctrlX Data Layer Browse sample Added python ctrlX Data Layer Client (complex) sample Added python ctrlX Data Layer Client Subsrciption sample Added python ctrlX Data Layer Provider all-data sample Added python Webserver sample Added python Calculation sample Refactored hello.webserver sample in go Added go appdata sample Added TPM2 sample in shell scripts Adapt style Added Api Refernece c/c++ python and c# Improve Documentation Added Python Sample with different Loglevels Added C# Sample with different Loglevels Added C++ Sample with different Loglevels Remove REST API's from package (available online)","title":"Version 1.10.0 _ July 15, 2021"},{"location":"changelog.html#version-180-_-march-25-2021","text":"Added .NET 5 (.NET Core) hello.world sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Browse sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Client sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Provider sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Demo sample (self-contained) Added python ctrlX Data Layer Client sample Added python ctrlX Data Layer Provider sample Added python API Documentation Added .NET 5 (.NET Core) API Documentation","title":"Version 1.8.0 _ March 25, 2021"},{"location":"changelog.html#version-160-_-november-15-2020","text":"Changed license from BSD3 to MIT Refactored hello.webserver sample Added datalayer.ecat.io sample (exemplary work with fieldbus) Added API descriptions Extended datalayer.register.node and datalayer.client sample with flatbuffers Prepared experimental remote snap debugging Added datalayer.realtime sample (share real time data)","title":"Version 1.6.0 _ November 15, 2020"},{"location":"changelog.html#version-140-_-july-15-2020","text":"Prepare first release","title":"Version 1.4.0 _ July 15, 2020"},{"location":"ctrlx_automation.html","text":"ctrlX AUTOMATION \u00b6 What is ctrlX AUTOMATION? \u00b6 ctrlX AUTOMATION surmounts the classic boundaries between machine control, the IT world and the Internet of Things. With a Linux real-time operating system, consistently open standards, app programming technology, web-based engineering and a comprehensive IoT connection. Visit the official website to get additional information: ctrlX AUTOMATION ctrlX CORE Fundamentals \u00b6 Find out fundamental informations and technical data about ctrlX CORE Why ctrlX SDK? \u00b6 The ctrlX SDK contains all information and dependencies you need to start to develop additional software packages for ctrlX AUTOMATION. If we talk about software packages it means snaps. Snaps are app packages for desktop, cloud and IoT that are easy to install, secure, cross-platform and dependency-free - snapcraft.io . With the samples containing our SDK you learn to build those packages for our new platform ctrlX CORE or ctrlX CORE virtual , from scratch. Don't be afraid and try it! :)","title":"ctrlX AUTOMATION"},{"location":"ctrlx_automation.html#ctrlx-automation","text":"","title":"ctrlX AUTOMATION"},{"location":"ctrlx_automation.html#what-is-ctrlx-automation","text":"ctrlX AUTOMATION surmounts the classic boundaries between machine control, the IT world and the Internet of Things. With a Linux real-time operating system, consistently open standards, app programming technology, web-based engineering and a comprehensive IoT connection. Visit the official website to get additional information: ctrlX AUTOMATION","title":"What is ctrlX AUTOMATION?"},{"location":"ctrlx_automation.html#ctrlx-core-fundamentals","text":"Find out fundamental informations and technical data about ctrlX CORE","title":"ctrlX CORE Fundamentals"},{"location":"ctrlx_automation.html#why-ctrlx-sdk","text":"The ctrlX SDK contains all information and dependencies you need to start to develop additional software packages for ctrlX AUTOMATION. If we talk about software packages it means snaps. Snaps are app packages for desktop, cloud and IoT that are easy to install, secure, cross-platform and dependency-free - snapcraft.io . With the samples containing our SDK you learn to build those packages for our new platform ctrlX CORE or ctrlX CORE virtual , from scratch. Don't be afraid and try it! :)","title":"Why ctrlX SDK?"},{"location":"datalayer.html","text":"Documentation \u00b6 naming conventions provider Routing of requests Provider Interface functions Usage of Variant Usage of flatbuffers Metadata Typetree Usage of client Node names \u00b6 Each value is addressed by a path. A path creates of a set of nodes. When nodes are named, an API is intuitive and easy to use. If done poorly, that same API can feel difficult to use and to understand. A node can be a singleton or a collection . For Example customers is a collection node and customer is a singleton resource (in a banking domain). We can identify customers collection resource using the path /customers . We can identify a single customer resource using the path /customers/{customerID} . A node may contain sub-collection resources also. For example, sub-collection resource accounts of a particular customer can be identified using the path /customers/{customerId}/accounts (in a banking domain). Similarly, a singleton resource account inside the sub-collection resource accounts can be identified as follows: /customers/{customerId}/accounts/{accountId} . Node naming conventions \u00b6 Use small capital node names \u00b6 Always use small capital node names! Hierarchical relationships \u00b6 Use subnodes to indicate hierarchical relationship between resources device-management device-management/managed-devices device-management/managed-devices/{id} device-management/managed-devices/{id}/scripts device-management/managed-devices/{id}/scripts/{id} Use nouns to represent resources \u00b6 Nodes should refer to a resource that is a thing (noun) instead of referring to an action (verb) because nouns have properties which verbs do not have - similar to resources have attributes. Some examples of a resource are: Users of the system User Accounts Network Devices etc. and their resource URIs can be designed as below: device-management/managed-devices device-management/managed-devices/{device-id} user-management/users/ user-management/users/{id} Use verbs to represent actions \u00b6 Has to return method in metadata. Use hyphens (-) to improve the readability of nodes \u00b6 To make your nodes easy for people to interpret, use the hyphen (-) character to improve the readability of names in long path segments. inventory-management/managed-entities/{id}/install-script-location //More readable inventory-management/managedEntities/{id}/installScriptLocation //Less readable Do not use underscores ( _ ) It's possible to use an underscore in place of a hyphen to be used as separator. But depending on the applications font, it's possible that the underscore (_) character can either get partially obscured or completely hidden in some browsers or screens. To avoid this confusion, use hyphens (-) instead of underscores ( _ ). inventory-management/managed-entities/{id}/install-script-location //More readable inventory_management/managed_entities/{id}/install_script_location //More error prone Do not use file extensions \u00b6 File extensions look bad and do not add any advantage. Removing them decreases the length of URIs as well. No reason to keep them. Apart from above reason, if you want to highlight the media type of API using file extension then you should use metadata type. device-management/managed-devices.xml /*Do not use it*/ device-management/managed-devices /*This is correct path*/ Never use CRUD function names in path \u00b6 Paths should not be used to indicate that a CRUD (Create/Read/Update/Delete) function is performed. Paths should be used to uniquely identify resources and not any action upon them. Request methods should be used to indicate which CRUD function is performed. browse device-management/managed-devices //Get all devices create device-management/managed-devices //Create new Device read device-management/managed-devices/{id} //Get device for given Id write device-management/managed-devices/{id} //Update device for given Id delete device-management/managed-devices/{id} //Delete device for given Id Provider \u00b6 A provider is responsible for nodes. One provider can handle an unlimited amount of nodes. All requests to one provider are serialized: It's guarantied that if you are in one of the interface functions of a node (onRead, onWrite, ...) no other interface function of a node handled by the same provider is called. So you don't have to handle mutual exclusion to data handled by one provider. Register of nodes \u00b6 To register a path you have to specify which ProviderNode is responsible for this node. Example: Registration for ethercat/version: whenever a request for \"ethercat/version\" is send, this request will be routed to this particular node. If a provider is responsible for multiple nodes or the subnodes are unknown at the moment of registration, its possible to register with wildcards. Single wildcard \"*\" \u00b6 A single wildcard is the sign \"*\". \"*\" stands for a any string on a hierarchy level. You can use multiple wildcards at different levels. Examples: provider1: test/* provider2: test/foo/*/bar provider3: test/*/foo provider4: test/*/* provider5: test/bar/bar Double wildcard \"**\" \u00b6 A double wildcard is the string \"**\". \"**\" stands for any string on any hierarchy level. Such a wildcard is only allowed as last characters at your registration string. Example: provider6: test/** provider7: test/bar/** Routing of requests \u00b6 All requests except browse requests are routed to the provider the address matches best to the registered path. So on each level a registration with a specific path matches before a registration with a wildcard. A single wildcard matches before a double wildcard. An address matches always the best registered provider (see example). Only provider with a wildcard at end of it's registered address will get browse requests. Behavior of '/' \u00b6 Any '/' at begin or end at the request address will be removed. A provider will never get an address with a leading or tailing '/'. Routing of addresses will be done without a leading or tailing '/'. Example for routing of requests: \u00b6 address destination for browse destination for read \"\" nobody nobody \"test\" provider1 nobody \"test/1\" provider4 provider1 \"test/1/foo\" provider6 provider3 \"test/1/bar\" provider6 provider4 \"test/foo\" provider4 provider1 \"test/bar\" provider7 provider1 \"test/bar/bar\" provider7 provider5 \"test/bar/foo\" provider7 provider7 \"test/bar/bar/foo\" provider7 provider7 \"test/bar/foo/foo\" provider7 provider7 \"test/foo/foo\" provider6 provider3 \"test/foo/foo/bar\" provider6 provider2 \"test/foo/foo/foo\" provider6 provider6 \"test/1/bar\" provider6 provider4 \"test/1/bar/1\" provider6 provider6 Browse \u00b6 Whenever a node is browsed, the result is a list of strings with contains the names of the subnodes of this nodes. In general datalayer wants to answer this kind of requests at its own. Only if someone has registered with a wildcard (\"*\") for this particular node this provider will be asked to give for subnodes. The result of this request will be merged with the nodes datalayer knows for its own. So a provider does not need to return values on a browse request it has already registered with a more specific path. address result of browse \"\" \"test\" \"test\" \"foo\", \"bar\" + return from provider1 \"test/1\" \"foo\" + return from provider4 \"test/1/foo\" return from provider6 \"test/1/bar\" return from provider6 \"test/foo\" \"foo\" + return from provider4 \"test/bar\" \"foo\" + \"bar\"+ return from provider7 \"test/bar/bar\" return from provider7 \"test/bar/foo\" return from provider7 \"test/bar/bar/foo\" return from provider7 \"test/bar/foo/foo\" return from provider7 \"test/foo/foo\" \"bar\" + return from provider6 \"test/foo/foo/bar\" return from provider6 \"test/foo/foo/foo\" return from provider6 \"test/1/bar\" return from provider6 \"test/1/bar/1\" return from provider6 Provider Interface functions \u00b6 Properties: idempotent, i.e. operation will have the same effect on the servers state if executed once or multiple times (note: this does not necessarily mean returning the same response or status code) safe, i.e. must not have side effects such as state changes Input data Output data function description safe idempotent Input Output onCreate Creates an object no no yes yes onRemove Removes an object no yes no no onBrowse Browse childs of a node yes yes no yes onRead Reads value of a node yes yes yes yes onWrite Writes value to a node no yes yes yes onMetadata Reads metadata of a node yes yes no no Requests are Stateless: Your node/application is not allowed to store anything about latest request. Handle each and every request as new. No session, no history. Design your interface in a way that each request contains all the information necessary to service the request. No Client context shall be stored on the server between requests. The client is responsible for managing the state of the application. onCreate \u00b6 This function should be used to create a new object. This function is not idempotent. So two calls of onCreate will not have the same result. As input all data should be provided to create the object. As output data the location (path) of of the new object should be returned. Examples: Creating an order in an online shop Creating an axis Creating a Motion Command onRemove \u00b6 This function removes an object. No input and output data are allowed. Examples: Removing an axis onBrowse \u00b6 This function returns child nodes of this node. The result must be an array of strings with the names of the child nodes. onRead \u00b6 This function reads the value of a node. To specify the read operation the onRead function may have input data. This function is idempotent and safe. So two equal subsequent calls will have the same result and will not change the state. onWrite \u00b6 This function changes the value of an already existing node. The new value is provided as input data. As output data you can return the new node value or nothing. This function is idempotent. So if you send a request multiple times, that should be equivalent to a single request modification. onMetadata \u00b6 This function returns the metadata of this note. You have to return a metadata.fbs flatbuffer. See metadata . Usage of Variant \u00b6 A variant holds data of different types. Following basic types are defined: type description UNKNOWN unknown datatype BOOL8 bool 8 bit INT8 signed int 8 bit UINT8 unsigned int 8 bit INT16 signed int 16 bit UINT16 unsigned int 16 bit INT32 signed int 32 bit UINT32 unsigned int 32 bit INT64 signed int 64 bit UINT64 unsigned int 64 bit FLOAT32 float 32 bit FLOAT64 float 64 bit STRING string (UTF-8) ARRAY_OF_BOOL8 array of bool 8 bit ARRAY_OF_INT8 array of signed int 8 bit ARRAY_OF_UINT8 array of unsigned int 8 bit ARRAY_OF_INT16 array of signed int 16 bit ARRAY_OF_UINT16 array of unsigned int 16 bit ARRAY_OF_INT32 array of signed int 32 bit ARRAY_OF_UINT32 array of unsigned int 32 bit ARRAY_OF_INT64 array of signed int 64 bit ARRAY_OF_UINT64 array of unsigned int 64 bit ARRAY_OF_FLOAT32 array of float 32 bit ARRAY_OF_FLOAT64 array of float 64 bit ARRAY_OF_STRING array of string (UTF-8) RAW raw bytes FLATBUFFERS bytes as a complex data type encoded as a flatbuffer Set a value of a variant \u00b6 To set a value to a variant, you can use one of the following functions: setValue(\\<type> value) value is a C data type: type of the variant will be identified automatically by its type (including string) value is a vector/set: array type of the variant will be identified automatically values will be copied setValue(\\<type>* values, size_t count) value is array of c data type (including array of string) array type of variant will be identified automatically by its type (including string) values will be copied shareValue(\\<type>* values, size_t count) In some cases it is not necessary to copy the value to a variant. A reference to the particular data is sufficient. type of variant will be identified automatically only a pointer to data will be stored this function is faster than the copy functions copyFlatbuffers() copyFlatbuffer from flatbuffer builder object shareFlatbuffers same as copyFlatbuffers() but data will not be copied. Only pointer to data will be stored setSharedPointer(type, data, size) set a variant to type with data and size data will not be copied, only a pointer will be stored setType(type, size) + copyRaw(data, size) set a variant with a specific type and size with data data will be copied Get a value of a variant \u00b6 To access data you can assign a variant to a basic data type. If the type of the variant match the basic data type, the value will be copied to the variable. If the type did not match, 0 or NULL will be returned. Example access scalar values \u00b6 Variant variant; uint32_t value1 = 4711; variant.setValue(value1); uint32_t value2 = variant; // value2 is 4711 uint16_t value3 = variant; // value3 is 0 To get the type of a variant use getType() Accessing values of an Array \u00b6 You can assign a variant to an C array type. If the type of the variant match the basic data type. Example access array values \u00b6 Variant data; // data containing an array of string const char** strArray = data; for (size_t i = 0; i < data.getCount(); i++) printf(\"%s\", strArray[i]); You can also use this kind of access for non-array values. getCount() returns 1 for nonArray values and cast to const pointer returns address of data. Access flatbuffers \u00b6 A variant can hold a flatbuffer. To check whether a variant has a specific flatbuffer type you can use the verifier of the flatbuffer. This check contains check for right data type (FLATBUFFERS) and check against flatbuffer verifier. Variant data; // data with a flatbuffer if (STATUS_SUCCEEDED(data.verifyFlatbuffers(VerifyAxisBuffer))); // VerifyAxisBuffer is generated out of .fbs file { auto axis = GetAxis(data->getData()); // GetAxis is generated out of .fbs file } Usage of flatbuffers \u00b6 Flatbuffers is used for complex data types. Documentation is available at here . Base of a complex data type is type defined in a .fbs file. Out of a .fbs file you have to generate different files: type_generated.h File to include in your source code. This header enables you to access a existing flatbuffer or create a new one. type.bfbs binary representation of the type. This file is used for generic access to a flatbuffer. It enables the datalayer to convert between flatbuffer and JSON. If you use flatbuffers as a data, you have to return the content of this file as metadata (see metadata ) Automatic Build using CMake \u00b6 To build your .fbs files using CMake include following lines in your CMakeLists.txt. To use the right flatbuffer compiler use these lines: # set flatbuffer root folder set ( FLATBUFFER_ROOT ${ DEPENDENCIES_ROOT } /appflatbuffers ) # expand binary search path for flatbuffer compiler if ( WIN32 ) set ( CMAKE_PROGRAM_PATH ${ CMAKE_PROGRAM_PATH } ${ FLATBUFFER_ROOT } /public/bin/win-msvc-x86/release ) else () set ( CMAKE_PROGRAM_PATH ${ CMAKE_PROGRAM_PATH } ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/release ) # set executable attributes for flatbuffer compiler execute_process ( COMMAND chmod +x ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/debug/flatc ) execute_process ( COMMAND chmod +x ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/release/flatc ) endif () # include flatbuffer cmake functions include ( ${ FLATBUFFER_ROOT } /public/CMake/FindFlatBuffers.cmake ) To compile your .fbs files, use these lines: set ( CMAKE_INCLUDE_PATH ${ CMAKE_INCLUDE_PATH } ${ FLATBUFFER_ROOT } /public/include ) include ( ${ FLATBUFFER_ROOT } /public/CMake/FindFlatBuffers.cmake ) SET ( IDL_FILES ${ IDL_FILES } ${ CMAKE_CURRENT_LIST_DIR } /mockups/Interpolator.fbs ${ CMAKE_CURRENT_LIST_DIR } /mockups/AllDataTypes.fbs ${ CMAKE_CURRENT_LIST_DIR } /motion/axis.fbs ) build_flatbuffers ( \"${IDL_FILES}\" \"\" BuildFlatbuffers \"\" \"${CMAKE_CURRENT_BINARY_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}\" \"\" ) This will generate an additional buildtarget BuildFlatbuffers . You can add this build target to your dependencies. Tips and Tricks \u00b6 Force Defaults / IsField Present Tables fields are only stored if they are set and are different from its default values. To ensure that all values are set in your flatbuffer, you can enable force_default in flatbuffer builder object: flatbuffers :: FlatBufferBuilder builder ; builder . ForceDefaults ( true ); Access of array values assume .fbs file table myTable { myVecDouble :[ double ]; } root_type MyTable ; access as flatbuffer vector auto myTable = GetMyTable ( value . getData ()); auto myVecDouble = myTable -> myVecDouble (); for ( size_t i = 0 ; i < myVecDouble -> size (); i ++ ) double value = myVecDouble [ i ]; access as C array auto myTable = GetMyTable ( value . getData ()); const double * myVecDouble = myTable -> myVecDouble () -> data (); for ( size_t i = 0 ; i < myVecDouble -> size (); i ++ ) double value = myVecDouble [ i ]; access as plane uint_8* memory (little endian) auto myTable = GetMyTable ( value . getData ()); const uint_8 * myVecDouble = myTable -> myVecDouble () -> Data (); Metadata \u00b6 Metadata contains additional information about a node. This information can be read using the metadata function. Definition of metadata can be found here . field comment nodeClass Resource: node is a resource Method: node is a command Type: node represents a type operations contains allowed operations description Short description in markdown format descriptionUrl URL to detailed description displayName Name to be displayed instead of node address displayFormat Auto: display in standard type format Bin: display as binary Oct: display octal Dec: display Decimal Hex: display hexadecimal unit unit of value extensions user defined extensions (key/value pair) references references to other nodes (key/value pair) References to other nodes in metadata \u00b6 Metadata of nodes can reference other nodes. A reference contains of a type and a targetAddress. There are some predefined types of references type comment readType type when reading a value writeType type when writing a value createType type when creating a value The target of a reference is a address in the datalayer tree. Typetree \u00b6 All types are included as nodes in the datalayer tree. Types are located under \"types/\". Types can be references in metadata as a reference. Usage Of Client \u00b6 Creation \u00b6 To create a client use factory function createClient(addr) . For addr you have following possibilities connection scheme comment INPROC Use empty address string to use in process communication. This works only if your client is in same address space (process) like datalayer application. IPC Only available in Linux. Use this communication kind in same device between processes. TCP Communication between devices addr comment \"\" INPROC communication (default) DL_IPC_AUTO Automatic choice of IPC port. It uses \\<$HOME>/.datalayer/frontend/2069 as IPC communication port. You can also use this define for communication between snaps with same user \"ipc://\\<path> IPC communication with specific path. You have to run a broker with this IPC path. \"tcp://\\<ip>:\\<port> TCP communication with specific device. Standard port of TCP is 2069. Celix Bundle \u00b6 This components includes a Celix bundle. You can use it in your own Celix framework. Be careful that on your target exists only one broker. So if you use datalayer in multiple Celix framework only one broker has to be started. To control start of broker you can use following entry in config.properties in your Celix preferences. datalayer . broker . enable = false The default value of this switch is true. So you have to set it explicit to false to disable startup of broker in your system.","title":"Documentation"},{"location":"datalayer.html#documentation","text":"naming conventions provider Routing of requests Provider Interface functions Usage of Variant Usage of flatbuffers Metadata Typetree Usage of client","title":"Documentation"},{"location":"datalayer.html#node-names","text":"Each value is addressed by a path. A path creates of a set of nodes. When nodes are named, an API is intuitive and easy to use. If done poorly, that same API can feel difficult to use and to understand. A node can be a singleton or a collection . For Example customers is a collection node and customer is a singleton resource (in a banking domain). We can identify customers collection resource using the path /customers . We can identify a single customer resource using the path /customers/{customerID} . A node may contain sub-collection resources also. For example, sub-collection resource accounts of a particular customer can be identified using the path /customers/{customerId}/accounts (in a banking domain). Similarly, a singleton resource account inside the sub-collection resource accounts can be identified as follows: /customers/{customerId}/accounts/{accountId} .","title":"Node names"},{"location":"datalayer.html#node-naming-conventions","text":"","title":"Node naming conventions "},{"location":"datalayer.html#use-small-capital-node-names","text":"Always use small capital node names!","title":"Use small capital node names"},{"location":"datalayer.html#hierarchical-relationships","text":"Use subnodes to indicate hierarchical relationship between resources device-management device-management/managed-devices device-management/managed-devices/{id} device-management/managed-devices/{id}/scripts device-management/managed-devices/{id}/scripts/{id}","title":"Hierarchical relationships"},{"location":"datalayer.html#use-nouns-to-represent-resources","text":"Nodes should refer to a resource that is a thing (noun) instead of referring to an action (verb) because nouns have properties which verbs do not have - similar to resources have attributes. Some examples of a resource are: Users of the system User Accounts Network Devices etc. and their resource URIs can be designed as below: device-management/managed-devices device-management/managed-devices/{device-id} user-management/users/ user-management/users/{id}","title":"Use nouns to represent resources"},{"location":"datalayer.html#use-verbs-to-represent-actions","text":"Has to return method in metadata.","title":"Use verbs to represent actions"},{"location":"datalayer.html#use-hyphens-to-improve-the-readability-of-nodes","text":"To make your nodes easy for people to interpret, use the hyphen (-) character to improve the readability of names in long path segments. inventory-management/managed-entities/{id}/install-script-location //More readable inventory-management/managedEntities/{id}/installScriptLocation //Less readable Do not use underscores ( _ ) It's possible to use an underscore in place of a hyphen to be used as separator. But depending on the applications font, it's possible that the underscore (_) character can either get partially obscured or completely hidden in some browsers or screens. To avoid this confusion, use hyphens (-) instead of underscores ( _ ). inventory-management/managed-entities/{id}/install-script-location //More readable inventory_management/managed_entities/{id}/install_script_location //More error prone","title":"Use hyphens (-) to improve the readability of nodes"},{"location":"datalayer.html#do-not-use-file-extensions","text":"File extensions look bad and do not add any advantage. Removing them decreases the length of URIs as well. No reason to keep them. Apart from above reason, if you want to highlight the media type of API using file extension then you should use metadata type. device-management/managed-devices.xml /*Do not use it*/ device-management/managed-devices /*This is correct path*/","title":"Do not use file extensions"},{"location":"datalayer.html#never-use-crud-function-names-in-path","text":"Paths should not be used to indicate that a CRUD (Create/Read/Update/Delete) function is performed. Paths should be used to uniquely identify resources and not any action upon them. Request methods should be used to indicate which CRUD function is performed. browse device-management/managed-devices //Get all devices create device-management/managed-devices //Create new Device read device-management/managed-devices/{id} //Get device for given Id write device-management/managed-devices/{id} //Update device for given Id delete device-management/managed-devices/{id} //Delete device for given Id","title":"Never use CRUD function names in path"},{"location":"datalayer.html#provider","text":"A provider is responsible for nodes. One provider can handle an unlimited amount of nodes. All requests to one provider are serialized: It's guarantied that if you are in one of the interface functions of a node (onRead, onWrite, ...) no other interface function of a node handled by the same provider is called. So you don't have to handle mutual exclusion to data handled by one provider.","title":"Provider "},{"location":"datalayer.html#register-of-nodes","text":"To register a path you have to specify which ProviderNode is responsible for this node. Example: Registration for ethercat/version: whenever a request for \"ethercat/version\" is send, this request will be routed to this particular node. If a provider is responsible for multiple nodes or the subnodes are unknown at the moment of registration, its possible to register with wildcards.","title":"Register of nodes"},{"location":"datalayer.html#single-wildcard","text":"A single wildcard is the sign \"*\". \"*\" stands for a any string on a hierarchy level. You can use multiple wildcards at different levels. Examples: provider1: test/* provider2: test/foo/*/bar provider3: test/*/foo provider4: test/*/* provider5: test/bar/bar","title":"Single wildcard \"*\""},{"location":"datalayer.html#double-wildcard","text":"A double wildcard is the string \"**\". \"**\" stands for any string on any hierarchy level. Such a wildcard is only allowed as last characters at your registration string. Example: provider6: test/** provider7: test/bar/**","title":"Double wildcard \"**\""},{"location":"datalayer.html#routing-of-requests","text":"All requests except browse requests are routed to the provider the address matches best to the registered path. So on each level a registration with a specific path matches before a registration with a wildcard. A single wildcard matches before a double wildcard. An address matches always the best registered provider (see example). Only provider with a wildcard at end of it's registered address will get browse requests.","title":"Routing of requests "},{"location":"datalayer.html#behavior-of","text":"Any '/' at begin or end at the request address will be removed. A provider will never get an address with a leading or tailing '/'. Routing of addresses will be done without a leading or tailing '/'.","title":"Behavior of '/'"},{"location":"datalayer.html#example-for-routing-of-requests","text":"address destination for browse destination for read \"\" nobody nobody \"test\" provider1 nobody \"test/1\" provider4 provider1 \"test/1/foo\" provider6 provider3 \"test/1/bar\" provider6 provider4 \"test/foo\" provider4 provider1 \"test/bar\" provider7 provider1 \"test/bar/bar\" provider7 provider5 \"test/bar/foo\" provider7 provider7 \"test/bar/bar/foo\" provider7 provider7 \"test/bar/foo/foo\" provider7 provider7 \"test/foo/foo\" provider6 provider3 \"test/foo/foo/bar\" provider6 provider2 \"test/foo/foo/foo\" provider6 provider6 \"test/1/bar\" provider6 provider4 \"test/1/bar/1\" provider6 provider6","title":"Example for routing of requests:"},{"location":"datalayer.html#browse","text":"Whenever a node is browsed, the result is a list of strings with contains the names of the subnodes of this nodes. In general datalayer wants to answer this kind of requests at its own. Only if someone has registered with a wildcard (\"*\") for this particular node this provider will be asked to give for subnodes. The result of this request will be merged with the nodes datalayer knows for its own. So a provider does not need to return values on a browse request it has already registered with a more specific path. address result of browse \"\" \"test\" \"test\" \"foo\", \"bar\" + return from provider1 \"test/1\" \"foo\" + return from provider4 \"test/1/foo\" return from provider6 \"test/1/bar\" return from provider6 \"test/foo\" \"foo\" + return from provider4 \"test/bar\" \"foo\" + \"bar\"+ return from provider7 \"test/bar/bar\" return from provider7 \"test/bar/foo\" return from provider7 \"test/bar/bar/foo\" return from provider7 \"test/bar/foo/foo\" return from provider7 \"test/foo/foo\" \"bar\" + return from provider6 \"test/foo/foo/bar\" return from provider6 \"test/foo/foo/foo\" return from provider6 \"test/1/bar\" return from provider6 \"test/1/bar/1\" return from provider6","title":"Browse"},{"location":"datalayer.html#provider-interface-functions","text":"Properties: idempotent, i.e. operation will have the same effect on the servers state if executed once or multiple times (note: this does not necessarily mean returning the same response or status code) safe, i.e. must not have side effects such as state changes Input data Output data function description safe idempotent Input Output onCreate Creates an object no no yes yes onRemove Removes an object no yes no no onBrowse Browse childs of a node yes yes no yes onRead Reads value of a node yes yes yes yes onWrite Writes value to a node no yes yes yes onMetadata Reads metadata of a node yes yes no no Requests are Stateless: Your node/application is not allowed to store anything about latest request. Handle each and every request as new. No session, no history. Design your interface in a way that each request contains all the information necessary to service the request. No Client context shall be stored on the server between requests. The client is responsible for managing the state of the application.","title":"Provider Interface functions "},{"location":"datalayer.html#oncreate","text":"This function should be used to create a new object. This function is not idempotent. So two calls of onCreate will not have the same result. As input all data should be provided to create the object. As output data the location (path) of of the new object should be returned. Examples: Creating an order in an online shop Creating an axis Creating a Motion Command","title":"onCreate"},{"location":"datalayer.html#onremove","text":"This function removes an object. No input and output data are allowed. Examples: Removing an axis","title":"onRemove"},{"location":"datalayer.html#onbrowse","text":"This function returns child nodes of this node. The result must be an array of strings with the names of the child nodes.","title":"onBrowse"},{"location":"datalayer.html#onread","text":"This function reads the value of a node. To specify the read operation the onRead function may have input data. This function is idempotent and safe. So two equal subsequent calls will have the same result and will not change the state.","title":"onRead"},{"location":"datalayer.html#onwrite","text":"This function changes the value of an already existing node. The new value is provided as input data. As output data you can return the new node value or nothing. This function is idempotent. So if you send a request multiple times, that should be equivalent to a single request modification.","title":"onWrite"},{"location":"datalayer.html#onmetadata","text":"This function returns the metadata of this note. You have to return a metadata.fbs flatbuffer. See metadata .","title":"onMetadata"},{"location":"datalayer.html#usage-of-variant","text":"A variant holds data of different types. Following basic types are defined: type description UNKNOWN unknown datatype BOOL8 bool 8 bit INT8 signed int 8 bit UINT8 unsigned int 8 bit INT16 signed int 16 bit UINT16 unsigned int 16 bit INT32 signed int 32 bit UINT32 unsigned int 32 bit INT64 signed int 64 bit UINT64 unsigned int 64 bit FLOAT32 float 32 bit FLOAT64 float 64 bit STRING string (UTF-8) ARRAY_OF_BOOL8 array of bool 8 bit ARRAY_OF_INT8 array of signed int 8 bit ARRAY_OF_UINT8 array of unsigned int 8 bit ARRAY_OF_INT16 array of signed int 16 bit ARRAY_OF_UINT16 array of unsigned int 16 bit ARRAY_OF_INT32 array of signed int 32 bit ARRAY_OF_UINT32 array of unsigned int 32 bit ARRAY_OF_INT64 array of signed int 64 bit ARRAY_OF_UINT64 array of unsigned int 64 bit ARRAY_OF_FLOAT32 array of float 32 bit ARRAY_OF_FLOAT64 array of float 64 bit ARRAY_OF_STRING array of string (UTF-8) RAW raw bytes FLATBUFFERS bytes as a complex data type encoded as a flatbuffer","title":"Usage of Variant "},{"location":"datalayer.html#set-a-value-of-a-variant","text":"To set a value to a variant, you can use one of the following functions: setValue(\\<type> value) value is a C data type: type of the variant will be identified automatically by its type (including string) value is a vector/set: array type of the variant will be identified automatically values will be copied setValue(\\<type>* values, size_t count) value is array of c data type (including array of string) array type of variant will be identified automatically by its type (including string) values will be copied shareValue(\\<type>* values, size_t count) In some cases it is not necessary to copy the value to a variant. A reference to the particular data is sufficient. type of variant will be identified automatically only a pointer to data will be stored this function is faster than the copy functions copyFlatbuffers() copyFlatbuffer from flatbuffer builder object shareFlatbuffers same as copyFlatbuffers() but data will not be copied. Only pointer to data will be stored setSharedPointer(type, data, size) set a variant to type with data and size data will not be copied, only a pointer will be stored setType(type, size) + copyRaw(data, size) set a variant with a specific type and size with data data will be copied","title":"Set a value of a variant"},{"location":"datalayer.html#get-a-value-of-a-variant","text":"To access data you can assign a variant to a basic data type. If the type of the variant match the basic data type, the value will be copied to the variable. If the type did not match, 0 or NULL will be returned.","title":"Get a value of a variant"},{"location":"datalayer.html#example-access-scalar-values","text":"Variant variant; uint32_t value1 = 4711; variant.setValue(value1); uint32_t value2 = variant; // value2 is 4711 uint16_t value3 = variant; // value3 is 0 To get the type of a variant use getType()","title":"Example access scalar values"},{"location":"datalayer.html#accessing-values-of-an-array","text":"You can assign a variant to an C array type. If the type of the variant match the basic data type.","title":"Accessing values of an Array"},{"location":"datalayer.html#example-access-array-values","text":"Variant data; // data containing an array of string const char** strArray = data; for (size_t i = 0; i < data.getCount(); i++) printf(\"%s\", strArray[i]); You can also use this kind of access for non-array values. getCount() returns 1 for nonArray values and cast to const pointer returns address of data.","title":"Example access array values"},{"location":"datalayer.html#access-flatbuffers","text":"A variant can hold a flatbuffer. To check whether a variant has a specific flatbuffer type you can use the verifier of the flatbuffer. This check contains check for right data type (FLATBUFFERS) and check against flatbuffer verifier. Variant data; // data with a flatbuffer if (STATUS_SUCCEEDED(data.verifyFlatbuffers(VerifyAxisBuffer))); // VerifyAxisBuffer is generated out of .fbs file { auto axis = GetAxis(data->getData()); // GetAxis is generated out of .fbs file }","title":"Access flatbuffers"},{"location":"datalayer.html#usage-of-flatbuffers","text":"Flatbuffers is used for complex data types. Documentation is available at here . Base of a complex data type is type defined in a .fbs file. Out of a .fbs file you have to generate different files: type_generated.h File to include in your source code. This header enables you to access a existing flatbuffer or create a new one. type.bfbs binary representation of the type. This file is used for generic access to a flatbuffer. It enables the datalayer to convert between flatbuffer and JSON. If you use flatbuffers as a data, you have to return the content of this file as metadata (see metadata )","title":"Usage of flatbuffers "},{"location":"datalayer.html#automatic-build-using-cmake","text":"To build your .fbs files using CMake include following lines in your CMakeLists.txt. To use the right flatbuffer compiler use these lines: # set flatbuffer root folder set ( FLATBUFFER_ROOT ${ DEPENDENCIES_ROOT } /appflatbuffers ) # expand binary search path for flatbuffer compiler if ( WIN32 ) set ( CMAKE_PROGRAM_PATH ${ CMAKE_PROGRAM_PATH } ${ FLATBUFFER_ROOT } /public/bin/win-msvc-x86/release ) else () set ( CMAKE_PROGRAM_PATH ${ CMAKE_PROGRAM_PATH } ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/release ) # set executable attributes for flatbuffer compiler execute_process ( COMMAND chmod +x ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/debug/flatc ) execute_process ( COMMAND chmod +x ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/release/flatc ) endif () # include flatbuffer cmake functions include ( ${ FLATBUFFER_ROOT } /public/CMake/FindFlatBuffers.cmake ) To compile your .fbs files, use these lines: set ( CMAKE_INCLUDE_PATH ${ CMAKE_INCLUDE_PATH } ${ FLATBUFFER_ROOT } /public/include ) include ( ${ FLATBUFFER_ROOT } /public/CMake/FindFlatBuffers.cmake ) SET ( IDL_FILES ${ IDL_FILES } ${ CMAKE_CURRENT_LIST_DIR } /mockups/Interpolator.fbs ${ CMAKE_CURRENT_LIST_DIR } /mockups/AllDataTypes.fbs ${ CMAKE_CURRENT_LIST_DIR } /motion/axis.fbs ) build_flatbuffers ( \"${IDL_FILES}\" \"\" BuildFlatbuffers \"\" \"${CMAKE_CURRENT_BINARY_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}\" \"\" ) This will generate an additional buildtarget BuildFlatbuffers . You can add this build target to your dependencies.","title":"Automatic Build using CMake"},{"location":"datalayer.html#tips-and-tricks","text":"Force Defaults / IsField Present Tables fields are only stored if they are set and are different from its default values. To ensure that all values are set in your flatbuffer, you can enable force_default in flatbuffer builder object: flatbuffers :: FlatBufferBuilder builder ; builder . ForceDefaults ( true ); Access of array values assume .fbs file table myTable { myVecDouble :[ double ]; } root_type MyTable ; access as flatbuffer vector auto myTable = GetMyTable ( value . getData ()); auto myVecDouble = myTable -> myVecDouble (); for ( size_t i = 0 ; i < myVecDouble -> size (); i ++ ) double value = myVecDouble [ i ]; access as C array auto myTable = GetMyTable ( value . getData ()); const double * myVecDouble = myTable -> myVecDouble () -> data (); for ( size_t i = 0 ; i < myVecDouble -> size (); i ++ ) double value = myVecDouble [ i ]; access as plane uint_8* memory (little endian) auto myTable = GetMyTable ( value . getData ()); const uint_8 * myVecDouble = myTable -> myVecDouble () -> Data ();","title":"Tips and Tricks"},{"location":"datalayer.html#metadata","text":"Metadata contains additional information about a node. This information can be read using the metadata function. Definition of metadata can be found here . field comment nodeClass Resource: node is a resource Method: node is a command Type: node represents a type operations contains allowed operations description Short description in markdown format descriptionUrl URL to detailed description displayName Name to be displayed instead of node address displayFormat Auto: display in standard type format Bin: display as binary Oct: display octal Dec: display Decimal Hex: display hexadecimal unit unit of value extensions user defined extensions (key/value pair) references references to other nodes (key/value pair)","title":"Metadata "},{"location":"datalayer.html#references-to-other-nodes-in-metadata","text":"Metadata of nodes can reference other nodes. A reference contains of a type and a targetAddress. There are some predefined types of references type comment readType type when reading a value writeType type when writing a value createType type when creating a value The target of a reference is a address in the datalayer tree.","title":"References to other nodes in metadata "},{"location":"datalayer.html#typetree","text":"All types are included as nodes in the datalayer tree. Types are located under \"types/\". Types can be references in metadata as a reference.","title":"Typetree "},{"location":"datalayer.html#usage-of-client","text":"","title":"Usage Of Client "},{"location":"datalayer.html#creation","text":"To create a client use factory function createClient(addr) . For addr you have following possibilities connection scheme comment INPROC Use empty address string to use in process communication. This works only if your client is in same address space (process) like datalayer application. IPC Only available in Linux. Use this communication kind in same device between processes. TCP Communication between devices addr comment \"\" INPROC communication (default) DL_IPC_AUTO Automatic choice of IPC port. It uses \\<$HOME>/.datalayer/frontend/2069 as IPC communication port. You can also use this define for communication between snaps with same user \"ipc://\\<path> IPC communication with specific path. You have to run a broker with this IPC path. \"tcp://\\<ip>:\\<port> TCP communication with specific device. Standard port of TCP is 2069.","title":"Creation"},{"location":"datalayer.html#celix-bundle","text":"This components includes a Celix bundle. You can use it in your own Celix framework. Be careful that on your target exists only one broker. So if you use datalayer in multiple Celix framework only one broker has to be started. To control start of broker you can use following entry in config.properties in your Celix preferences. datalayer . broker . enable = false The default value of this switch is true. So you have to set it explicit to false to disable startup of broker in your system.","title":"Celix Bundle"},{"location":"debug.html","text":"Remote Debugging \u00b6 C++ \u00b6 Introduction \u00b6 It is just an experimental way for the operating system distributor. It's possible to run a snap application with --experimental-gdbserver . Due to this, you can attach a gdb to the process. Prerequisites \u00b6 Snapd > 2.46.1 Gdb-multiarch Root access to the device for ssh Debug snap Login via ssh using the keys (Login without password) Getting Started \u00b6 Install the debug snap with the possibility to stop (necessary because gdb can only set breakpoints while the program stops) Set up the IP of you target in the launch.json and task.json Launch build task Launch GDB-Server or login you target with ssh and run the command (replace snapname and appname) sudo snap run --experimental-gdbserver=:12345 <Snapname>.<Appname> Use the right startup configuration Remove the breakpoint witch is set by default -exec delete 1 Continue until you hit SIGSTOP Set additional breakpoints and continue debugging Screenshots \u00b6","title":"Remote Debugging"},{"location":"debug.html#remote-debugging","text":"","title":"Remote Debugging"},{"location":"debug.html#c","text":"","title":"C++"},{"location":"debug.html#introduction","text":"It is just an experimental way for the operating system distributor. It's possible to run a snap application with --experimental-gdbserver . Due to this, you can attach a gdb to the process.","title":"Introduction"},{"location":"debug.html#prerequisites","text":"Snapd > 2.46.1 Gdb-multiarch Root access to the device for ssh Debug snap Login via ssh using the keys (Login without password)","title":"Prerequisites"},{"location":"debug.html#getting-started","text":"Install the debug snap with the possibility to stop (necessary because gdb can only set breakpoints while the program stops) Set up the IP of you target in the launch.json and task.json Launch build task Launch GDB-Server or login you target with ssh and run the command (replace snapname and appname) sudo snap run --experimental-gdbserver=:12345 <Snapname>.<Appname> Use the right startup configuration Remove the breakpoint witch is set by default -exec delete 1 Continue until you hit SIGSTOP Set additional breakpoints and continue debugging","title":"Getting Started"},{"location":"debug.html#screenshots","text":"","title":"Screenshots"},{"location":"dotnet.html","text":"README .NET 5.0 Apps @ ctrlX \u00b6 Introduction \u00b6 This document describes how to setup up your development environment on Windows for building self-contained ctrlX Apps based on Microsoft .NET 5.0 (dotnet5) runtime . Self-contained means, your App contains an already matching and optimized .NET 5.0 runtime for your target architecture, so there's no need to install any additional .NET 5.0 runtime. All samples generate Apps (snaps) for the targets: ctrlXVirtual (amd64) ctrlX (arm64) Pre-requisites \u00b6 Install/Update Microsoft Visual C++ Redistributable for Visual Studio \u00b6 If you have latest Microsoft Visual Studio including C++ components installed, you can skip this step. Please install the latest Microsoft Visual C++ Redistributable for Visual Studio from here . Install/Update Visual Studio Code (VS Code) \u00b6 The ctrlX App IDE is Microsoft Visual Studio Code . Please ensure having latest version installed on your system from here . Install and Update Windows Subsystem for Linux (WSL) and Ubuntu 18.04 \u00b6 The samples make use of Windows Subsystem for Linux (WSL) Version 18.04 . Please read common SDK help to setup. Also ensure your proxy settings if you're behind a corporate proxy (Settings -> Proxy). After done, please ensure you have the latest Linux environment, by updating your WSL: Open Visual Studio Code Open the Remote Explorer from the menu Connect to your WSL Target Ubuntu-18.04 . Select Open Folder in WSL and navigate to any .NET sample e.g. hello.world Open a new Terminal (Terminal -> New Terminal) Run the following commands in your WSL console sudo apt update sudo apt upgrade Prepare WSL \u00b6 First, we have to prepare WSL to fetch packages of all supported platform architectures. Please search for Dependencies for Crossbuild (Multiarch) here or use the template file provided (please rename your existing to be restored on demand): Open WSL by Windows -> Start wsl Ensure the following content at the end of file /etc/apt/sources.list deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security main restricted # deb-src http://security.ubuntu.com/ubuntu/ bionic-security main restricted deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security universe # deb-src http://security.ubuntu.com/ubuntu/ bionic-security universe deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security multiverse # deb-src http://security.ubuntu.com/ubuntu/ bionic-security multiverse Alternatively you can use the provided template sources.list file and copy it from ./samples.net/dotnet5/docs/files/sources.list to any directory e.g. c:/temp/sources.list After that copy the file from there into WSL sudo cp /mnt/c/temp/sources.list /etc/apt Update the VS Code Server on WSL: Run the following commands in your WSL console code Installation of .NET 5 into WSL \u00b6 The following steps are based on this description Open WSL by Windows -> Start wsl Add the Microsoft package signing key to your list of trusted keys Run the following commands in your WSL console wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Install the .NET SDK Run the following commands in your WSL console sudo apt-get update; \\ sudo apt-get install -y apt-transport-https && \\ sudo apt-get update && \\ sudo apt-get install -y dotnet-sdk-5.0 If you're using ASP.NET , install the ASP.NET Runtime Run the following commands in your WSL console sudo apt-get install -y aspnetcore-runtime-5.0 Check your installed SDK's Run the following command in your WSL console dotnet --list-sdks The output should be something like 5.0.102 [/usr/share/dotnet/sdk] Check your Runtime Run the following command in your WSL console dotnet --list-runtimes The output should be something like Microsoft.NETCore.App 5.0.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App] Prepare NuGet \u00b6 If you're behing a corporate proxy, you have to configure the NuGet Proxy in configuration file: /home/{USERNAME}/.nuget/NuGet/NuGet.Config Edit the NuGet configuration file with your preferred editor or with VS Code and add a config section containing the http_proxy and https_proxy inside the configuration section like shown below. Alternatively you can copy the provided file Open WSL by Windows -> Start wsl Copy the provided file from ./samples.net/dotnet5/docs/files/NuGet.Config to folder /home/{USERNAME}/.nuget/NuGet You can copy it to a temp directory e.g. c:/temp/NuGet.Config After that copy the file from there into WSL sudo cp /mnt/c/temp/NuGet.Config /home/{USERNAME}/.nuget/NuGet Example: The following sample uses the Px Proxy at address http://127.0.0.1:3128. for example: <configuration> <config> <add key= \"http_proxy\" value= \"http://127.0.0.1:3128\" /> <add key= \"https_proxy\" value= \"http://127.0.0.1:3128\" /> </config> ... </configuration> Install the VS Code extensions from Marketplace \u00b6 Finally we have to install some extensions for .NET to be ready for coding. Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open any .NET sample directory (e.g. hello.world). Open Extensions from the menu. Install the C# Extension and press Install on Windows Subsystem for Linux . Building \u00b6 Each sample provides a rich set of tasks for your convenience. Click on Terminal -> Run Task . Choose your preferred task to run. Build (compile) your code \u00b6 Click on Terminal -> Run Task . Choose Task build . Clean your code \u00b6 Click on Terminal -> Run Task . Choose Task clean . Publish your (self-contained) application \u00b6 Click on Terminal -> Run Task . Choose any Task publish * matching your architecture and mode. make snap \u00b6 Click on Terminal -> Run Task . Choose any Task make snap * matching your architecture and mode. Debugging \u00b6 Debug on WSL \u00b6 Just press F5 or Click on the Run from the menu. Choose Run -> .NET Core Launch (console) . Press the green Play button. Debug snap on ctrlXVirtual \u00b6 Click on Terminal -> Run Task . Choose any Task make snap amd64 . Install snap on ctrlXVirtual via ctrlX web interface For debugging snaps see here Debug snap on ctrlX \u00b6 Click on Terminal -> Run Task . Choose any Task make snap arm64 . Install snap on ctrlX via ctrlX web interface For debugging snaps see here Now you're ready to code .NET on ctrlX! Please open any sample directory in WSL using the Remote Explorer and see documentations how to Best Practise \u00b6 Provider Concepts \u00b6 There different concepts to write a Data Layer provider: Create and register nodes with individual node handlers \u00b6 Create a provider, which creates and registers all nodes with an individual node handler n x CreateNode n x Register Node : Handler = 1:1 Recommendation: Use for a small/medium of nodes with individual node handling. Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.provider Create and register nodes with same node handler \u00b6 Create a provider, which creates individual nodes and registers all nodes individually with same node handler. n x CreateNode n x Register Node : Handler = n:1 Recommendation: Use for a small/medium of nodes with common node handling Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No Implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.mqtt datalayer.provider.alldata Virtual provider (lightweight): Register on wildcard and manage virtual nodes \u00b6 Create just one node with a single node handler, registered to a wildcard address (e.g. myroot/**) and managing the nodes for your own. This lightweight handler returns virtual nodes in OnBrowse() method. See Data Layer documentation for details. 1 x CreateNode 1 x Register Node : Handler = n:1 Recommendation: Use for a large/very large or dynamic set of nodes (big data provider). Use if you want to manage the nodes in your application code. Pros: Very efficient. Contras: The Data Layer is not managaging your node hierarchy: You have to return the valid data in OnBrowse() . Samples: datalayer.provider.virtual Pitfalls \u00b6 Arithmetic operators of different integral or foating point types \u00b6 The following operators perform arithmetic operations with operands of numeric types: Unary : ++ (increment), -- (decrement), + (plus), and - (minus) operators Binary : * (multiplication), / (division), % (remainder), + (addition), and - (subtraction) operators Those operators are supported by all integral and floating-point numeric types. In the case of integral types, those operators (except the ++ and -- operators) are defined for the int , uint , long , and ulong types. When operands are of other integral types ( sbyte , byte , short , ushort , or char ), their values are converted to the int type , which is also the result type of an operation. When operands are of different integral or floating-point types, their values are converted to the closest containing type , if such a type exists. For more information, see the Numeric promotions section of the C# language specification. The ++ and -- operators are defined for all integral and floating-point numeric types and the char type. Example : Let' say we just wan't to increment a sbyte Variant value by keeping the data type, we have cast the result after performing the arithmetic operation: sbyte value = 42 ; var oldVariant = new Variant ( value ) var newVariant = new Variant (( sbyte )( oldVariant . ToSByte () + 1 )); Please see here for more informations. Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":".NET"},{"location":"dotnet.html#readme-net-50-apps-ctrlx","text":"","title":"README .NET 5.0 Apps @ ctrlX"},{"location":"dotnet.html#introduction","text":"This document describes how to setup up your development environment on Windows for building self-contained ctrlX Apps based on Microsoft .NET 5.0 (dotnet5) runtime . Self-contained means, your App contains an already matching and optimized .NET 5.0 runtime for your target architecture, so there's no need to install any additional .NET 5.0 runtime. All samples generate Apps (snaps) for the targets: ctrlXVirtual (amd64) ctrlX (arm64)","title":"Introduction"},{"location":"dotnet.html#pre-requisites","text":"","title":"Pre-requisites"},{"location":"dotnet.html#installupdate-microsoft-visual-c-redistributable-for-visual-studio","text":"If you have latest Microsoft Visual Studio including C++ components installed, you can skip this step. Please install the latest Microsoft Visual C++ Redistributable for Visual Studio from here .","title":"Install/Update Microsoft Visual C++ Redistributable for Visual Studio"},{"location":"dotnet.html#installupdate-visual-studio-code-vs-code","text":"The ctrlX App IDE is Microsoft Visual Studio Code . Please ensure having latest version installed on your system from here .","title":"Install/Update Visual Studio Code (VS Code)"},{"location":"dotnet.html#install-and-update-windows-subsystem-for-linux-wsl-and-ubuntu-1804","text":"The samples make use of Windows Subsystem for Linux (WSL) Version 18.04 . Please read common SDK help to setup. Also ensure your proxy settings if you're behind a corporate proxy (Settings -> Proxy). After done, please ensure you have the latest Linux environment, by updating your WSL: Open Visual Studio Code Open the Remote Explorer from the menu Connect to your WSL Target Ubuntu-18.04 . Select Open Folder in WSL and navigate to any .NET sample e.g. hello.world Open a new Terminal (Terminal -> New Terminal) Run the following commands in your WSL console sudo apt update sudo apt upgrade","title":"Install and Update Windows Subsystem for Linux (WSL) and Ubuntu 18.04"},{"location":"dotnet.html#prepare-wsl","text":"First, we have to prepare WSL to fetch packages of all supported platform architectures. Please search for Dependencies for Crossbuild (Multiarch) here or use the template file provided (please rename your existing to be restored on demand): Open WSL by Windows -> Start wsl Ensure the following content at the end of file /etc/apt/sources.list deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security main restricted # deb-src http://security.ubuntu.com/ubuntu/ bionic-security main restricted deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security universe # deb-src http://security.ubuntu.com/ubuntu/ bionic-security universe deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security multiverse # deb-src http://security.ubuntu.com/ubuntu/ bionic-security multiverse Alternatively you can use the provided template sources.list file and copy it from ./samples.net/dotnet5/docs/files/sources.list to any directory e.g. c:/temp/sources.list After that copy the file from there into WSL sudo cp /mnt/c/temp/sources.list /etc/apt Update the VS Code Server on WSL: Run the following commands in your WSL console code","title":"Prepare WSL"},{"location":"dotnet.html#installation-of-net-5-into-wsl","text":"The following steps are based on this description Open WSL by Windows -> Start wsl Add the Microsoft package signing key to your list of trusted keys Run the following commands in your WSL console wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Install the .NET SDK Run the following commands in your WSL console sudo apt-get update; \\ sudo apt-get install -y apt-transport-https && \\ sudo apt-get update && \\ sudo apt-get install -y dotnet-sdk-5.0 If you're using ASP.NET , install the ASP.NET Runtime Run the following commands in your WSL console sudo apt-get install -y aspnetcore-runtime-5.0 Check your installed SDK's Run the following command in your WSL console dotnet --list-sdks The output should be something like 5.0.102 [/usr/share/dotnet/sdk] Check your Runtime Run the following command in your WSL console dotnet --list-runtimes The output should be something like Microsoft.NETCore.App 5.0.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]","title":"Installation of .NET 5 into WSL"},{"location":"dotnet.html#prepare-nuget","text":"If you're behing a corporate proxy, you have to configure the NuGet Proxy in configuration file: /home/{USERNAME}/.nuget/NuGet/NuGet.Config Edit the NuGet configuration file with your preferred editor or with VS Code and add a config section containing the http_proxy and https_proxy inside the configuration section like shown below. Alternatively you can copy the provided file Open WSL by Windows -> Start wsl Copy the provided file from ./samples.net/dotnet5/docs/files/NuGet.Config to folder /home/{USERNAME}/.nuget/NuGet You can copy it to a temp directory e.g. c:/temp/NuGet.Config After that copy the file from there into WSL sudo cp /mnt/c/temp/NuGet.Config /home/{USERNAME}/.nuget/NuGet Example: The following sample uses the Px Proxy at address http://127.0.0.1:3128. for example: <configuration> <config> <add key= \"http_proxy\" value= \"http://127.0.0.1:3128\" /> <add key= \"https_proxy\" value= \"http://127.0.0.1:3128\" /> </config> ... </configuration>","title":"Prepare NuGet"},{"location":"dotnet.html#install-the-vs-code-extensions-from-marketplace","text":"Finally we have to install some extensions for .NET to be ready for coding. Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open any .NET sample directory (e.g. hello.world). Open Extensions from the menu. Install the C# Extension and press Install on Windows Subsystem for Linux .","title":"Install the VS Code extensions from Marketplace"},{"location":"dotnet.html#building","text":"Each sample provides a rich set of tasks for your convenience. Click on Terminal -> Run Task . Choose your preferred task to run.","title":"Building"},{"location":"dotnet.html#build-compile-your-code","text":"Click on Terminal -> Run Task . Choose Task build .","title":"Build (compile) your code"},{"location":"dotnet.html#clean-your-code","text":"Click on Terminal -> Run Task . Choose Task clean .","title":"Clean your code"},{"location":"dotnet.html#publish-your-self-contained-application","text":"Click on Terminal -> Run Task . Choose any Task publish * matching your architecture and mode.","title":"Publish your (self-contained) application"},{"location":"dotnet.html#make-snap","text":"Click on Terminal -> Run Task . Choose any Task make snap * matching your architecture and mode.","title":"make snap"},{"location":"dotnet.html#debugging","text":"","title":"Debugging"},{"location":"dotnet.html#debug-on-wsl","text":"Just press F5 or Click on the Run from the menu. Choose Run -> .NET Core Launch (console) . Press the green Play button.","title":"Debug on WSL"},{"location":"dotnet.html#debug-snap-on-ctrlxvirtual","text":"Click on Terminal -> Run Task . Choose any Task make snap amd64 . Install snap on ctrlXVirtual via ctrlX web interface For debugging snaps see here","title":"Debug snap on ctrlXVirtual"},{"location":"dotnet.html#debug-snap-on-ctrlx","text":"Click on Terminal -> Run Task . Choose any Task make snap arm64 . Install snap on ctrlX via ctrlX web interface For debugging snaps see here Now you're ready to code .NET on ctrlX! Please open any sample directory in WSL using the Remote Explorer and see documentations how to","title":"Debug snap on ctrlX"},{"location":"dotnet.html#best-practise","text":"","title":"Best Practise"},{"location":"dotnet.html#provider-concepts","text":"There different concepts to write a Data Layer provider:","title":"Provider Concepts"},{"location":"dotnet.html#create-and-register-nodes-with-individual-node-handlers","text":"Create a provider, which creates and registers all nodes with an individual node handler n x CreateNode n x Register Node : Handler = 1:1 Recommendation: Use for a small/medium of nodes with individual node handling. Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.provider","title":"Create and register nodes with individual node handlers"},{"location":"dotnet.html#create-and-register-nodes-with-same-node-handler","text":"Create a provider, which creates individual nodes and registers all nodes individually with same node handler. n x CreateNode n x Register Node : Handler = n:1 Recommendation: Use for a small/medium of nodes with common node handling Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No Implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.mqtt datalayer.provider.alldata","title":"Create and register nodes with same node handler"},{"location":"dotnet.html#virtual-provider-lightweight-register-on-wildcard-and-manage-virtual-nodes","text":"Create just one node with a single node handler, registered to a wildcard address (e.g. myroot/**) and managing the nodes for your own. This lightweight handler returns virtual nodes in OnBrowse() method. See Data Layer documentation for details. 1 x CreateNode 1 x Register Node : Handler = n:1 Recommendation: Use for a large/very large or dynamic set of nodes (big data provider). Use if you want to manage the nodes in your application code. Pros: Very efficient. Contras: The Data Layer is not managaging your node hierarchy: You have to return the valid data in OnBrowse() . Samples: datalayer.provider.virtual","title":"Virtual provider (lightweight): Register on wildcard and manage virtual nodes"},{"location":"dotnet.html#pitfalls","text":"","title":"Pitfalls"},{"location":"dotnet.html#arithmetic-operators-of-different-integral-or-foating-point-types","text":"The following operators perform arithmetic operations with operands of numeric types: Unary : ++ (increment), -- (decrement), + (plus), and - (minus) operators Binary : * (multiplication), / (division), % (remainder), + (addition), and - (subtraction) operators Those operators are supported by all integral and floating-point numeric types. In the case of integral types, those operators (except the ++ and -- operators) are defined for the int , uint , long , and ulong types. When operands are of other integral types ( sbyte , byte , short , ushort , or char ), their values are converted to the int type , which is also the result type of an operation. When operands are of different integral or floating-point types, their values are converted to the closest containing type , if such a type exists. For more information, see the Numeric promotions section of the C# language specification. The ++ and -- operators are defined for all integral and floating-point numeric types and the char type. Example : Let' say we just wan't to increment a sbyte Variant value by keeping the data type, we have cast the result after performing the arithmetic operation: sbyte value = 42 ; var oldVariant = new Variant ( value ) var newVariant = new Variant (( sbyte )( oldVariant . ToSByte () + 1 )); Please see here for more informations.","title":"Arithmetic operators of different integral or foating point types"},{"location":"dotnet.html#support","text":"","title":"Support"},{"location":"dotnet.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"dotnet.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"dotnet.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"dotnet.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"log.html","text":"Logging \u00b6 Introduction \u00b6 During development, test phase and at runtime it is very useful - and in case of problems essential - that an application publishes messages. These messages can be informations, diagnostics or errors according the event which triggered the message. These messages should be displayed and stored uniform. We recommend to use the build-in Linux systemd logging service called journald. The Using of Linux Kernel Log Levels \u00b6 The interface to journald depends from the programming language. But for all these predefined Linux log levels (values) are common: EMERGENCY The system is unusable (and will be shut down) ALERT There is a severe error, action must be taken immediately CRITICAL There is a critical error ERROR A job was aborted in case of an error WARNING There is an abnormal condition but the actual job can be finished NOTICE There is a normal but significant condition INFO A messages informs about an internal state DEBUG Message shows details regarding program flow or results Be carefull with level EMERGENCY: Messages with this level are sent to all consoles! Logging Samples in the SDK \u00b6 In these folders of ctrlX SDK logging samples for different programming languages are provided: public/samples-cpp/diagnostics.logbook public/samples-net/diagnostics.logbook public/samples-python/python.logbook Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Community License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Logging"},{"location":"log.html#logging","text":"","title":"Logging"},{"location":"log.html#introduction","text":"During development, test phase and at runtime it is very useful - and in case of problems essential - that an application publishes messages. These messages can be informations, diagnostics or errors according the event which triggered the message. These messages should be displayed and stored uniform. We recommend to use the build-in Linux systemd logging service called journald.","title":"Introduction"},{"location":"log.html#the-using-of-linux-kernel-log-levels","text":"The interface to journald depends from the programming language. But for all these predefined Linux log levels (values) are common: EMERGENCY The system is unusable (and will be shut down) ALERT There is a severe error, action must be taken immediately CRITICAL There is a critical error ERROR A job was aborted in case of an error WARNING There is an abnormal condition but the actual job can be finished NOTICE There is a normal but significant condition INFO A messages informs about an internal state DEBUG Message shows details regarding program flow or results Be carefull with level EMERGENCY: Messages with this level are sent to all consoles!","title":"The Using of Linux Kernel Log Levels"},{"location":"log.html#logging-samples-in-the-sdk","text":"In these folders of ctrlX SDK logging samples for different programming languages are provided: public/samples-cpp/diagnostics.logbook public/samples-net/diagnostics.logbook public/samples-python/python.logbook","title":"Logging Samples in the SDK"},{"location":"log.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Community","title":"Support"},{"location":"log.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"overview.html","text":"Overview \u00b6 Introduction \u00b6 The ctrlX AUTOMATION SDK is a Software Development Kit (SDK) for the development of software applications (apps) for ctrlX AUTOMATION devices, especially for the linux based ctrlX CORE devices. It enables the development of apps in various high level languages. Use the following sections of this documentation to learn more about the contents of the ctrlX AUTOMATION SDK. ctrlX AUTOMATION : A short introduction and overview of the SDK. Setup \u00b6 How to setup a development environment using Virtual Box and Ubuntu or Windows Subsystem for Linux (WSL). Setup overview : How to setup a development environment. Samples \u00b6 Samples : A description of the included examples in the SDK and how to use them. References \u00b6 References : An overview of useful links and some references Changes \u00b6 Changelog : Changes since last release Additional Information \u00b6 You can find additional documentation, help and support which goes beyond the scope of this SDK here: Online Product Information Rexroth Developer Community","title":"Overview"},{"location":"overview.html#overview","text":"","title":"Overview"},{"location":"overview.html#introduction","text":"The ctrlX AUTOMATION SDK is a Software Development Kit (SDK) for the development of software applications (apps) for ctrlX AUTOMATION devices, especially for the linux based ctrlX CORE devices. It enables the development of apps in various high level languages. Use the following sections of this documentation to learn more about the contents of the ctrlX AUTOMATION SDK. ctrlX AUTOMATION : A short introduction and overview of the SDK.","title":"Introduction"},{"location":"overview.html#setup","text":"How to setup a development environment using Virtual Box and Ubuntu or Windows Subsystem for Linux (WSL). Setup overview : How to setup a development environment.","title":"Setup"},{"location":"overview.html#samples","text":"Samples : A description of the included examples in the SDK and how to use them.","title":"Samples"},{"location":"overview.html#references","text":"References : An overview of useful links and some references","title":"References"},{"location":"overview.html#changes","text":"Changelog : Changes since last release","title":"Changes"},{"location":"overview.html#additional-information","text":"You can find additional documentation, help and support which goes beyond the scope of this SDK here: Online Product Information Rexroth Developer Community","title":"Additional Information"},{"location":"package-manifest.html","text":"Basics \u00b6 An app can bring their own menu entries, use the reverse proxy infrastructure including permissions and use the solution for storage. This document describes the different integration points and how they work. Essential for the integration points to work is the package-manifest. Beside the snapcraft.yaml, it has to be provided by the app to integrate probably into the ctrlX CORE ecosystem. Here is an example of a package-manifest.json: Example { \"version\" : \"1.0.0\" , \"id\" : \"rexroth-solutions\" , \"certificatestores\" : [ { \"id\" : \"examplestore\" , \"title\" : \"Example Store\" , \"description\" : \"This is only an example store for documentation purpose.\" } ], \"services\" : { \"proxyMapping\" : [ { \"name\" : \"rexroth-solutions.web\" , \"url\" : \"/rexroth-solutions\" , \"binding\" : \":5000\" , \"restricted\" : [ \"/rexroth-solutions/api/v1.0\" ] } ] }, \"scopes-declaration\" : [ { \"identifier\" : \"rexroth-solutions.web\" , \"name\" : \"Solutions Scopes\" , \"description\" : \"Scopes for the Solutions resources\" , \"scopes\" : [ { \"identifier\" : \"rexroth-solutions.web.all.rw\" , \"name\" : \"Manage Solutions\" , \"description\" : \"Manage and modify all solutions\" }, { \"identifier\" : \"rexroth-solutions.web.all.r\" , \"name\" : \"View solutions\" , \"description\" : \"View (but not modify) solutions\" } ] } ], \"menus\" : { \"sidebar\" : [ { \"id\" : \"solutions\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ], \"items\" : [ { \"id\" : \"solution-home\" , \"title\" : \"Solutions Home\" , \"link\" : \"/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] }, { \"id\" : \"solution-targets\" , \"title\" : \"Targets\" , \"link\" : \"/solutions/targets\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } ], \"settings\" : [ { \"id\" : \"solution-settings\" , \"title\" : \"Solution Settings\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/solutions/settings\" , \"permissions\" : [ \"solutions.rw\" ] } ], \"overview\" : [ { \"id\" : \"solution-overview\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"link\" : \"/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } } Providing the package-manifest \u00b6 The manifest file has to be provided to app.deviceadmin by the third-party app, therefor a data exchange between both apps has to be established. To exchange the information, the content interface with the name \"package-assets\" is used. This content interface works inverted to the \"normal\" content interface. Instead of the slot is providing data that is used by the plug. The slot provides a folder where the plugs directories are mounted in. This principle is called \"spool mode\" by canonical. The following example shows you step-by-step, what you have to do. Inside the root of your snap project, create a folder \"configs/package-assets\". Place your package-manifest into this folder and name it using the pattern snap-name .package-manifest.json, e.g. rexroth-solutions.package-manifest.json. Update your snapcraft.yaml Add a new part which dumps the content of the \"configs\" directory into your $SNAP folder. Add the slot \"package-assets\" to your slots configuration snapcraft.yaml: name : rexroth-solutions [ ... ] parts : [ ... ] configs : plugin : dump source : ./configs [ ... ] slots : [ ... ] package-assets : interface : content content : package-assets source : read : - $SNAP/package-assets/${SNAPCRAFT_PROJECT_NAME} [ ... ] Menus \u00b6 An app can integrate into the ctrlX CORE navigation by defining menu entries. There are three possible integration points: Sidebar: to allow navigation to your apps main functionality Settings: to provide settings dialogs and pages Home Overview: to provide a custom tile for your application Declare menu items in package-manifest \u00b6 Add a \"menus\" element to your snap\u2019s package manifest. The \"menus\" element is defined as an object that comprises three elements: sidebar: an array of items to be integrated into the main menu settings: an array of items to be integrated into the settings menu system: an array of items to be integrated into the system menu overview: an array of items to be integrated into the app overview An item is defined as an object that comprises the following elements: id: a string serving as the unique item identifier; used for ordering items (required) title: a string serving as the item\u2019s display title (required) description: a string providing an additional description (optional and only used by overview items) icon: a string representing the name of the item\u2019s icon (optional) link: a string representing the route associated to this item, including the application\u2019s base href (required if no \"items\" are provided) target: a string that specifies where the link should be shown. Use \"_blank\" or a specific name to open the link in a new tab (recommended for 3rd-party apps) items: an array of sub-items of this item (required if no link is provided; currently, only supported for main menu items and restricted to one level of depth) permissions: an array of scope identifiers representing the permissions required to enable the item (optional) Example [ ... ] \"menus\" : { \"sidebar\" : [ { \"id\" : \"solutions\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ], \"items\" : [ { \"id\" : \"solutions-activeconfiguration\" , \"title\" : \"Active Configuration\" , \"link\" : \"/solutions/activeconfiguration\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] }, { \"id\" : \"solutions-overview\" , \"title\" : \"Solutions Overview\" , \"link\" : \"/solutions/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } ], \"settings\" : [ { \"id\" : \"solutions-settings\" , \"title\" : \"Solution Settings\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/solutions/settings\" , \"permissions\" : [ \"solutions.rw\" ] } ], \"system\" : [ { \"id\" : \"reboot\" , \"title\" : \"Reboot\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/reboot-manager\" ] } ], \"overview\" : [ { \"id\" : \"solutions-overview\" , \"title\" : \"Solutions\" , \"description\" : \"Manage solutions on the control\" , \"icon\" : \"bosch-ic-solutions\" , \"link\" : \"/solutions/activeconfiguration\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } [ ... ] When the third-party app is using a dedicated port and is not using our reverse proxy infrastructure, you can use the template variable \"${hostname}\" to let the ctrlX CORE replace it dynamically. E.g.: Note [ ... ] { \"id\" : \"node-red\" , \"title\" : \"Node-RED\" , \"link\" : \"http://${hostname}:1880/\" , } [ ... ] Reverse Proxy \u00b6 The Reverse Proxy handles all external web-based (HTTP/HTTPS) requests to the device. The Reverse Proxy provides the following functionality: Automatic HTTPS: By default, all data exchanged between client and server is encrypted. Token Validation: By default, only authenticated users may access resources on the device (except the login page). Requests with invalid tokens (lifetime expired, invalid signature) are rejected. The Proxy Mapping provides the configuration, which is required by the Reverse Proxy to redirect requests for a specific URL to a web server running on the device. Proxy Mapping { [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"rexroth-solutions.web\" , \"url\" : \"/rexroth-solutions\" , \"binding\" : \":5000\" , \"restricted\" : [ \"/rexroth-solutions/api/v1.0\" ] } ] } [ ... ] } Providing a proxy configuration is optional in some cases (e.g. if your snap does not provide a web service). If a proxy configuration is supplied, the following parameters are valid: name (mandatory): Name of the web service. The format is: <id>.<service> The name has to be unique. Examples are: rexroth-solutions.web rexroth-hmi.web ... url (mandatory): URL which is provided by the Reverse Proxy. When a client tries to access this URL, the Reverse Proxy transparently redirects the request to the web server, this means your webserver has to be configured to listen to e.g. \"/cool-app\" and not \"/\". Must not conflict with other web services URLs. Examples are: /solutions /hmi ... binding (mandatory): Identifier of the resource to which the reverse proxy redirects the requests. The resource may be a port or a unix socket. Using a unix socket is highly recommended. Examples are: :5000 192.168.1.17:5000 \"unix://{$SNAP_DATA}/package-run/rexroth-solutions/rexroth-solutions.web.sock\" restricted: Restricted URL. URLs defined here are accessible for authenticated clients only. One important example are the API URL(s) - those URLs should be restricted in the majority of the use cases. Examples: \"/rexroth-solutions/api/v1.0\" Info Remark: In case a snap provides multiple web servers, multiple entries of ProxyMapping are allowed. Binding \u00b6 Unix sockets (recommended) To use unix sockets the web server of your application has to bind against a Unix Domain Socket . Most of web server frameworks already support this. The benefit of unix sockets is the additional security (file access can be restricted via file permissions) and the lower attack surface on network level (the service cannot be reached externally). To enable your snap and to provide the reverse proxy access to your unix socket, you have to use the content interface slot \"package-run\". It uses the same mechanism as the \"package-assets\" interface. Example [ ... ] package-run : interface : content content : package-run source : write : - $SNAP_DATA/package-run/${SNAPCRAFT_PROJECT_NAME} In the example mentioned above, your \"unix socket file\" should be created under {$SNAP_DATA}/package-run/{$SNAP_NAME}/web.sock . Please ensure, that the file is completely managed by your application logic and, other than a network socket, has to be deleted after unbind. Also consider deleting it before binding your web server on start up. Now, you need to publish the information about the socket file using the package-manifest using the ProxyMapping described above. The relevant part is the \"binding\" section below. You have to replace Warning The path length of a unix socket is limited to 108 characters. Therefore please ensure, that the resolved path, e.g /var/snap/third-party-snap/current/ package-run/third-party-snap/third-party-snap.web.sock , respects that limit and the highlighted part has a maximal length of 50 characters. If necessary, you can shorten the path by replacing \"package-run\" with \"run\" and shorting the file name from \"third-party-snap.web.sock\" to \"web.sock\". See the following example: [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"third-party-snap.web\" , \"url\" : \"/cool-app\" , \"binding\" : \"unix://{$SNAP_DATA}/package-run/third-party-snap/web.sock\" } ] }, [ ... ] Localhost (not recommended) Binding to localhost should only be chosen, when a Unix Domain Socket (see above) cannot be used. It requires that your app binds to a dedicated port that is not used by other apps. [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"third-party-snap.web\" , \"url\" : \"/cool-app\" , \"binding\" : \":4711\" , } ] }, [ ... ] Scopes and Permissions \u00b6 In case access to specific resources shall be restricted, scopes have to be defined. By using the Identity Management, an administrator is able to configure which users/groups are allowed to access specific resources. The following example shows two simple scopes (read/write all settings, read settings). The web server has to check in each routine if the provided token includes the scope. Example { \"id\" : \"rexroth-solutions\" , [ ... ] \"scopes-declaration\" : [ { \"identifier\" : \"rexroth-solutions.web\" , \"name\" : \"Solutions Web Server permissions\" , \"description\" : \"Solution Management Permissions\" , \"scopes\" : [ { \"identifier\" : \"rexroth-solutions.web.solutions.rw\" , \"name\" : \"Solutions Management\" , \"description\" : \"Manage and modify solutions\" }, { \"identifier\" : \"rexroth-solutions.web.solutions.r\" , \"name\" : \"View solutions\" , \"description\" : \"View (but not modify) solutions\" } ] } ], Remark: Restrictions apply regarding the naming of the scopes, identifiers, etc. (please see below) The main identifier of the scope must follow this schema by convention: <id>.<service> id: Identifier of the package. Must by convention correspond to the name of the snap Example: rexroth-solutions, rexroth-vpnmanager, ... service: Identifier of the service Example: web Some examples: rexroth-solutions.web rexroth-vpnmanager.web The identifier of each specific scope must follow this schema by convention: <id>.<service>.<scope_name>.<access> id : Identifier of the package. Must by convention correspond to the name of the snap Example: rexroth-solutions, rexroth-vpnmanager, ... service: Identifier of the service Example: web scope_name: Name of the specific scope Example: solutions, connections, configurations, users, ... access: Type of access to the resource which is represented by this scope. Supported are: r (read-only): Allows read access to specific resources w (write-only): Allows write-only access to specific resources rw (read/write): Allows read and write access to specific resources x (execute): Execute a specific action which is represented by a resource Some examples: rexroth-vpnmanager.web.shortcuts.r: Read access to VPN shortcuts rexroth-vpnmanager.web.shortcuts.rw: Read and create VPN connection shortcuts rexroth-deviceadmin.web.own_password.w: Update (but not read) the password of the user who is currently logged in rexroth-vpnmanager.web.shortcuts.x: Start / stop VPN connections via existing starters (shortcuts) Enforcing permissions in your service \u00b6 The web server has to enforce the defined permissions. The following pseudo code snippet shows a light-weight example in which the function ListAddresses checks whether the client has the permission to execute the function. The scope \"rexroth-device.all.rwx\" is a special scope, which reflects an administrative access permission (see below). func ListAddresses ( w http . ResponseWriter , r * http . Request ) { // Define valid scopes for resource access scope := [] string { \"networkmanager.all.r\" , \"networkmanager.all.rw\" , \"rexroth-device.all.rwx\" } // Extract scopes from http request and compare to valid scopes // Return when permissions are not sufficient if ok , _ := checkPermissions ( r , scope ); ! ok { errors . ErrUnauthorized . Write ( w ) return } Admin Scope \u00b6 The Identity Management by default provides a special admin scope (\"rexroth-device.all.rwx\"), which should only be assigned to admin users. It is recommended - but not mandatory - to grant users with this permission full access to your web application. This makes the handling of administrator accounts easier. The following snippet shows the definition of the admin scope. You can see (and assign) the permission to users and/or groups. { \"identifier\" : \"rexroth-device\" , \"name\" : \"Global device administration\" , \"description\" : \"Global device administration permissions allow unrestricted access to all system resources\" , \"scopes\" :[ { \"identifier\" : \"rexroth-device.all.rwx\" , \"name\" : \"Administration access\" , \"Description\" : \"Unrestricted, administrative access to system resources\" } ] } Certificate Management (optional) \u00b6 The certificate managers handles cryptographic material for all applications on the device. The certificate manager has the ability to add/delete/list certificates or keys to/from a specific application. It also warns the user if a certificate expires soon or is already invalid. If a snap handles cryptographic material it can use this centralized service by following the instructions: First, the snap has to provide the content interface \"package-certificates\". Via this interface the certificate manager is able to add and access certificates and keys of a specific snap. This is why write permissions are necessary. name : rexroth-solutions [ ... ] slots : [ ... ] package-certificates : interface : content content : package-certificates source : write : - $SNAP_COMMON/package-certificates/${SNAPCRAFT_PROJECT_NAME} [ ... ] Certificate Stores \u00b6 The certificate store block defines if a snap service has to handle with cryptographic keys or certificates. A snap should have different certificate stores for different services. These stores are defined within the package-assets-file (see following code snipped) Example \"certificatestores\" : [ { \"id\" : \"examplestore\" , \"title\" : \"Example Store\" , \"description\" : \"This is only an example store for documentation purpose.\" } ], id (mandatory): This id should be unique because it is used to identify the store over the REST-interface. opcua vpnmanager ... title (mandatory): This name is used in the frontend. OPCUA VPN-Manager ... description: The description is optional and displayed in the fronted. Here you can describe the application and can give the user some more information. Every certificate store needs the following, predefined folder structure: Hint SNAPCRAFT_PROJECT_NAME has to been replaced with the real name here! /$SNAP_COMMON/package-certificates/{SNAPCRAFT_PROJECT_NAME}/ Example /application1 /ca /own /private /certs /rejected /keys /certs /trusted /keys /certs /application2 /ca ... Hint You can store your keys with the help of a TPM . Integration possibilities \u00b6 Third-Party Application that brings its own web server, has got a possibility to integrate in ctrlX CORE user interface. After this integration, a Third-Party Application will be opened in a separate tab within the browser. The recommended integration with ctrlX CORE is to use package-manifest.json file. Within this file, you can specify the section for the menus and the sidebar. The important part is the assignment of the bearer token for the external authentication. The pattern for this file is shown below. ```package-manifest.json ... \"menus\": { \"sidebar\": [ { \"id\": \"app-name\", \"title\": \"My App Name\", \"icon\": \"myApp-Icon\", \"permissions\": [], \"items\": [ { \"id\": \"myApp-Id\", \"title\": \"MySideBarTitle\", \"link\": \"/app-name?access_token= ${ bearertoken } \", \"target\":\"myApp-Id\", \"permissions\": [] },... ] }] [...] ```","title":"Package manifest"},{"location":"package-manifest.html#basics","text":"An app can bring their own menu entries, use the reverse proxy infrastructure including permissions and use the solution for storage. This document describes the different integration points and how they work. Essential for the integration points to work is the package-manifest. Beside the snapcraft.yaml, it has to be provided by the app to integrate probably into the ctrlX CORE ecosystem. Here is an example of a package-manifest.json: Example { \"version\" : \"1.0.0\" , \"id\" : \"rexroth-solutions\" , \"certificatestores\" : [ { \"id\" : \"examplestore\" , \"title\" : \"Example Store\" , \"description\" : \"This is only an example store for documentation purpose.\" } ], \"services\" : { \"proxyMapping\" : [ { \"name\" : \"rexroth-solutions.web\" , \"url\" : \"/rexroth-solutions\" , \"binding\" : \":5000\" , \"restricted\" : [ \"/rexroth-solutions/api/v1.0\" ] } ] }, \"scopes-declaration\" : [ { \"identifier\" : \"rexroth-solutions.web\" , \"name\" : \"Solutions Scopes\" , \"description\" : \"Scopes for the Solutions resources\" , \"scopes\" : [ { \"identifier\" : \"rexroth-solutions.web.all.rw\" , \"name\" : \"Manage Solutions\" , \"description\" : \"Manage and modify all solutions\" }, { \"identifier\" : \"rexroth-solutions.web.all.r\" , \"name\" : \"View solutions\" , \"description\" : \"View (but not modify) solutions\" } ] } ], \"menus\" : { \"sidebar\" : [ { \"id\" : \"solutions\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ], \"items\" : [ { \"id\" : \"solution-home\" , \"title\" : \"Solutions Home\" , \"link\" : \"/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] }, { \"id\" : \"solution-targets\" , \"title\" : \"Targets\" , \"link\" : \"/solutions/targets\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } ], \"settings\" : [ { \"id\" : \"solution-settings\" , \"title\" : \"Solution Settings\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/solutions/settings\" , \"permissions\" : [ \"solutions.rw\" ] } ], \"overview\" : [ { \"id\" : \"solution-overview\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"link\" : \"/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } }","title":"Basics"},{"location":"package-manifest.html#providing-the-package-manifest","text":"The manifest file has to be provided to app.deviceadmin by the third-party app, therefor a data exchange between both apps has to be established. To exchange the information, the content interface with the name \"package-assets\" is used. This content interface works inverted to the \"normal\" content interface. Instead of the slot is providing data that is used by the plug. The slot provides a folder where the plugs directories are mounted in. This principle is called \"spool mode\" by canonical. The following example shows you step-by-step, what you have to do. Inside the root of your snap project, create a folder \"configs/package-assets\". Place your package-manifest into this folder and name it using the pattern snap-name .package-manifest.json, e.g. rexroth-solutions.package-manifest.json. Update your snapcraft.yaml Add a new part which dumps the content of the \"configs\" directory into your $SNAP folder. Add the slot \"package-assets\" to your slots configuration snapcraft.yaml: name : rexroth-solutions [ ... ] parts : [ ... ] configs : plugin : dump source : ./configs [ ... ] slots : [ ... ] package-assets : interface : content content : package-assets source : read : - $SNAP/package-assets/${SNAPCRAFT_PROJECT_NAME} [ ... ]","title":"Providing the package-manifest"},{"location":"package-manifest.html#menus","text":"An app can integrate into the ctrlX CORE navigation by defining menu entries. There are three possible integration points: Sidebar: to allow navigation to your apps main functionality Settings: to provide settings dialogs and pages Home Overview: to provide a custom tile for your application","title":"Menus"},{"location":"package-manifest.html#declare-menu-items-in-package-manifest","text":"Add a \"menus\" element to your snap\u2019s package manifest. The \"menus\" element is defined as an object that comprises three elements: sidebar: an array of items to be integrated into the main menu settings: an array of items to be integrated into the settings menu system: an array of items to be integrated into the system menu overview: an array of items to be integrated into the app overview An item is defined as an object that comprises the following elements: id: a string serving as the unique item identifier; used for ordering items (required) title: a string serving as the item\u2019s display title (required) description: a string providing an additional description (optional and only used by overview items) icon: a string representing the name of the item\u2019s icon (optional) link: a string representing the route associated to this item, including the application\u2019s base href (required if no \"items\" are provided) target: a string that specifies where the link should be shown. Use \"_blank\" or a specific name to open the link in a new tab (recommended for 3rd-party apps) items: an array of sub-items of this item (required if no link is provided; currently, only supported for main menu items and restricted to one level of depth) permissions: an array of scope identifiers representing the permissions required to enable the item (optional) Example [ ... ] \"menus\" : { \"sidebar\" : [ { \"id\" : \"solutions\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ], \"items\" : [ { \"id\" : \"solutions-activeconfiguration\" , \"title\" : \"Active Configuration\" , \"link\" : \"/solutions/activeconfiguration\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] }, { \"id\" : \"solutions-overview\" , \"title\" : \"Solutions Overview\" , \"link\" : \"/solutions/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } ], \"settings\" : [ { \"id\" : \"solutions-settings\" , \"title\" : \"Solution Settings\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/solutions/settings\" , \"permissions\" : [ \"solutions.rw\" ] } ], \"system\" : [ { \"id\" : \"reboot\" , \"title\" : \"Reboot\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/reboot-manager\" ] } ], \"overview\" : [ { \"id\" : \"solutions-overview\" , \"title\" : \"Solutions\" , \"description\" : \"Manage solutions on the control\" , \"icon\" : \"bosch-ic-solutions\" , \"link\" : \"/solutions/activeconfiguration\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } [ ... ] When the third-party app is using a dedicated port and is not using our reverse proxy infrastructure, you can use the template variable \"${hostname}\" to let the ctrlX CORE replace it dynamically. E.g.: Note [ ... ] { \"id\" : \"node-red\" , \"title\" : \"Node-RED\" , \"link\" : \"http://${hostname}:1880/\" , } [ ... ]","title":"Declare menu items in package-manifest"},{"location":"package-manifest.html#reverse-proxy","text":"The Reverse Proxy handles all external web-based (HTTP/HTTPS) requests to the device. The Reverse Proxy provides the following functionality: Automatic HTTPS: By default, all data exchanged between client and server is encrypted. Token Validation: By default, only authenticated users may access resources on the device (except the login page). Requests with invalid tokens (lifetime expired, invalid signature) are rejected. The Proxy Mapping provides the configuration, which is required by the Reverse Proxy to redirect requests for a specific URL to a web server running on the device. Proxy Mapping { [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"rexroth-solutions.web\" , \"url\" : \"/rexroth-solutions\" , \"binding\" : \":5000\" , \"restricted\" : [ \"/rexroth-solutions/api/v1.0\" ] } ] } [ ... ] } Providing a proxy configuration is optional in some cases (e.g. if your snap does not provide a web service). If a proxy configuration is supplied, the following parameters are valid: name (mandatory): Name of the web service. The format is: <id>.<service> The name has to be unique. Examples are: rexroth-solutions.web rexroth-hmi.web ... url (mandatory): URL which is provided by the Reverse Proxy. When a client tries to access this URL, the Reverse Proxy transparently redirects the request to the web server, this means your webserver has to be configured to listen to e.g. \"/cool-app\" and not \"/\". Must not conflict with other web services URLs. Examples are: /solutions /hmi ... binding (mandatory): Identifier of the resource to which the reverse proxy redirects the requests. The resource may be a port or a unix socket. Using a unix socket is highly recommended. Examples are: :5000 192.168.1.17:5000 \"unix://{$SNAP_DATA}/package-run/rexroth-solutions/rexroth-solutions.web.sock\" restricted: Restricted URL. URLs defined here are accessible for authenticated clients only. One important example are the API URL(s) - those URLs should be restricted in the majority of the use cases. Examples: \"/rexroth-solutions/api/v1.0\" Info Remark: In case a snap provides multiple web servers, multiple entries of ProxyMapping are allowed.","title":"Reverse Proxy"},{"location":"package-manifest.html#binding","text":"Unix sockets (recommended) To use unix sockets the web server of your application has to bind against a Unix Domain Socket . Most of web server frameworks already support this. The benefit of unix sockets is the additional security (file access can be restricted via file permissions) and the lower attack surface on network level (the service cannot be reached externally). To enable your snap and to provide the reverse proxy access to your unix socket, you have to use the content interface slot \"package-run\". It uses the same mechanism as the \"package-assets\" interface. Example [ ... ] package-run : interface : content content : package-run source : write : - $SNAP_DATA/package-run/${SNAPCRAFT_PROJECT_NAME} In the example mentioned above, your \"unix socket file\" should be created under {$SNAP_DATA}/package-run/{$SNAP_NAME}/web.sock . Please ensure, that the file is completely managed by your application logic and, other than a network socket, has to be deleted after unbind. Also consider deleting it before binding your web server on start up. Now, you need to publish the information about the socket file using the package-manifest using the ProxyMapping described above. The relevant part is the \"binding\" section below. You have to replace Warning The path length of a unix socket is limited to 108 characters. Therefore please ensure, that the resolved path, e.g /var/snap/third-party-snap/current/ package-run/third-party-snap/third-party-snap.web.sock , respects that limit and the highlighted part has a maximal length of 50 characters. If necessary, you can shorten the path by replacing \"package-run\" with \"run\" and shorting the file name from \"third-party-snap.web.sock\" to \"web.sock\". See the following example: [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"third-party-snap.web\" , \"url\" : \"/cool-app\" , \"binding\" : \"unix://{$SNAP_DATA}/package-run/third-party-snap/web.sock\" } ] }, [ ... ] Localhost (not recommended) Binding to localhost should only be chosen, when a Unix Domain Socket (see above) cannot be used. It requires that your app binds to a dedicated port that is not used by other apps. [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"third-party-snap.web\" , \"url\" : \"/cool-app\" , \"binding\" : \":4711\" , } ] }, [ ... ]","title":"Binding"},{"location":"package-manifest.html#scopes-and-permissions","text":"In case access to specific resources shall be restricted, scopes have to be defined. By using the Identity Management, an administrator is able to configure which users/groups are allowed to access specific resources. The following example shows two simple scopes (read/write all settings, read settings). The web server has to check in each routine if the provided token includes the scope. Example { \"id\" : \"rexroth-solutions\" , [ ... ] \"scopes-declaration\" : [ { \"identifier\" : \"rexroth-solutions.web\" , \"name\" : \"Solutions Web Server permissions\" , \"description\" : \"Solution Management Permissions\" , \"scopes\" : [ { \"identifier\" : \"rexroth-solutions.web.solutions.rw\" , \"name\" : \"Solutions Management\" , \"description\" : \"Manage and modify solutions\" }, { \"identifier\" : \"rexroth-solutions.web.solutions.r\" , \"name\" : \"View solutions\" , \"description\" : \"View (but not modify) solutions\" } ] } ], Remark: Restrictions apply regarding the naming of the scopes, identifiers, etc. (please see below) The main identifier of the scope must follow this schema by convention: <id>.<service> id: Identifier of the package. Must by convention correspond to the name of the snap Example: rexroth-solutions, rexroth-vpnmanager, ... service: Identifier of the service Example: web Some examples: rexroth-solutions.web rexroth-vpnmanager.web The identifier of each specific scope must follow this schema by convention: <id>.<service>.<scope_name>.<access> id : Identifier of the package. Must by convention correspond to the name of the snap Example: rexroth-solutions, rexroth-vpnmanager, ... service: Identifier of the service Example: web scope_name: Name of the specific scope Example: solutions, connections, configurations, users, ... access: Type of access to the resource which is represented by this scope. Supported are: r (read-only): Allows read access to specific resources w (write-only): Allows write-only access to specific resources rw (read/write): Allows read and write access to specific resources x (execute): Execute a specific action which is represented by a resource Some examples: rexroth-vpnmanager.web.shortcuts.r: Read access to VPN shortcuts rexroth-vpnmanager.web.shortcuts.rw: Read and create VPN connection shortcuts rexroth-deviceadmin.web.own_password.w: Update (but not read) the password of the user who is currently logged in rexroth-vpnmanager.web.shortcuts.x: Start / stop VPN connections via existing starters (shortcuts)","title":"Scopes and Permissions"},{"location":"package-manifest.html#enforcing-permissions-in-your-service","text":"The web server has to enforce the defined permissions. The following pseudo code snippet shows a light-weight example in which the function ListAddresses checks whether the client has the permission to execute the function. The scope \"rexroth-device.all.rwx\" is a special scope, which reflects an administrative access permission (see below). func ListAddresses ( w http . ResponseWriter , r * http . Request ) { // Define valid scopes for resource access scope := [] string { \"networkmanager.all.r\" , \"networkmanager.all.rw\" , \"rexroth-device.all.rwx\" } // Extract scopes from http request and compare to valid scopes // Return when permissions are not sufficient if ok , _ := checkPermissions ( r , scope ); ! ok { errors . ErrUnauthorized . Write ( w ) return }","title":"Enforcing permissions in your service"},{"location":"package-manifest.html#admin-scope","text":"The Identity Management by default provides a special admin scope (\"rexroth-device.all.rwx\"), which should only be assigned to admin users. It is recommended - but not mandatory - to grant users with this permission full access to your web application. This makes the handling of administrator accounts easier. The following snippet shows the definition of the admin scope. You can see (and assign) the permission to users and/or groups. { \"identifier\" : \"rexroth-device\" , \"name\" : \"Global device administration\" , \"description\" : \"Global device administration permissions allow unrestricted access to all system resources\" , \"scopes\" :[ { \"identifier\" : \"rexroth-device.all.rwx\" , \"name\" : \"Administration access\" , \"Description\" : \"Unrestricted, administrative access to system resources\" } ] }","title":"Admin Scope"},{"location":"package-manifest.html#certificate-management-optional","text":"The certificate managers handles cryptographic material for all applications on the device. The certificate manager has the ability to add/delete/list certificates or keys to/from a specific application. It also warns the user if a certificate expires soon or is already invalid. If a snap handles cryptographic material it can use this centralized service by following the instructions: First, the snap has to provide the content interface \"package-certificates\". Via this interface the certificate manager is able to add and access certificates and keys of a specific snap. This is why write permissions are necessary. name : rexroth-solutions [ ... ] slots : [ ... ] package-certificates : interface : content content : package-certificates source : write : - $SNAP_COMMON/package-certificates/${SNAPCRAFT_PROJECT_NAME} [ ... ]","title":"Certificate Management (optional)"},{"location":"package-manifest.html#certificate-stores","text":"The certificate store block defines if a snap service has to handle with cryptographic keys or certificates. A snap should have different certificate stores for different services. These stores are defined within the package-assets-file (see following code snipped) Example \"certificatestores\" : [ { \"id\" : \"examplestore\" , \"title\" : \"Example Store\" , \"description\" : \"This is only an example store for documentation purpose.\" } ], id (mandatory): This id should be unique because it is used to identify the store over the REST-interface. opcua vpnmanager ... title (mandatory): This name is used in the frontend. OPCUA VPN-Manager ... description: The description is optional and displayed in the fronted. Here you can describe the application and can give the user some more information. Every certificate store needs the following, predefined folder structure: Hint SNAPCRAFT_PROJECT_NAME has to been replaced with the real name here! /$SNAP_COMMON/package-certificates/{SNAPCRAFT_PROJECT_NAME}/ Example /application1 /ca /own /private /certs /rejected /keys /certs /trusted /keys /certs /application2 /ca ... Hint You can store your keys with the help of a TPM .","title":"Certificate Stores"},{"location":"package-manifest.html#integration-possibilities","text":"Third-Party Application that brings its own web server, has got a possibility to integrate in ctrlX CORE user interface. After this integration, a Third-Party Application will be opened in a separate tab within the browser. The recommended integration with ctrlX CORE is to use package-manifest.json file. Within this file, you can specify the section for the menus and the sidebar. The important part is the assignment of the bearer token for the external authentication. The pattern for this file is shown below. ```package-manifest.json ... \"menus\": { \"sidebar\": [ { \"id\": \"app-name\", \"title\": \"My App Name\", \"icon\": \"myApp-Icon\", \"permissions\": [], \"items\": [ { \"id\": \"myApp-Id\", \"title\": \"MySideBarTitle\", \"link\": \"/app-name?access_token= ${ bearertoken } \", \"target\":\"myApp-Id\", \"permissions\": [] },... ] }] [...] ```","title":"Integration possibilities"},{"location":"references.html","text":"References \u00b6 Useful weblinks \u00b6 Snap concept and the Framework (good to know) \u00b6 snapcraft.io apache celix Decode Bearer token \u00b6 jwt.io Miscellaneous \u00b6 ctrlX Data Layer package-manifest trusted platform module Developer Guideline Logging API Description \u00b6 Api reference (doxygen generated) c/c++ c# python","title":"Overview"},{"location":"references.html#references","text":"","title":"References"},{"location":"references.html#useful-weblinks","text":"","title":"Useful weblinks"},{"location":"references.html#snap-concept-and-the-framework-good-to-know","text":"snapcraft.io apache celix","title":"Snap concept and the Framework (good to know)"},{"location":"references.html#decode-bearer-token","text":"jwt.io","title":"Decode Bearer token"},{"location":"references.html#miscellaneous","text":"ctrlX Data Layer package-manifest trusted platform module Developer Guideline Logging","title":"Miscellaneous"},{"location":"references.html#api-description","text":"Api reference (doxygen generated) c/c++ c# python","title":"API Description"},{"location":"samples.html","text":"Samples \u00b6 Samples included in ctrlX SDK \u00b6 C/C++ Samples \u00b6 Check out C/C++ Samples GO-Samples \u00b6 Check out GO-Samples Python-Samples \u00b6 Check out Python-Samples .NET Samples \u00b6 .NET 5 \u00b6 Check out .NET-Samples Build and install \u00b6 To build the samples and create the first snap see Build ctrlX AUTOMATION Community \u00b6 ctrlX AUTOMATION Community","title":"Samples"},{"location":"samples.html#samples","text":"","title":"Samples"},{"location":"samples.html#samples-included-in-ctrlx-sdk","text":"","title":"Samples included in ctrlX SDK"},{"location":"samples.html#cc-samples","text":"Check out C/C++ Samples","title":"C/C++ Samples"},{"location":"samples.html#go-samples","text":"Check out GO-Samples","title":"GO-Samples"},{"location":"samples.html#python-samples","text":"Check out Python-Samples","title":"Python-Samples"},{"location":"samples.html#net-samples","text":"","title":".NET Samples"},{"location":"samples.html#net-5","text":"Check out .NET-Samples","title":".NET 5"},{"location":"samples.html#build-and-install","text":"To build the samples and create the first snap see Build","title":"Build and install"},{"location":"samples.html#ctrlx-automation-community","text":"ctrlX AUTOMATION Community","title":"ctrlX AUTOMATION Community"},{"location":"samples_mkdocs.html","text":"Samples \u00b6 Samples included in ctrlX SDK \u00b6 C/C++ Samples \u00b6 \"Hello World\" recommendation -> start with this example \"Hello PLC\" \"ctrlX Data Layer Client\" \"ctrlX Data Layer RegisterNode\" \"ctrlX Automation Bundle\" includes motion commands for axis and kinematics \"ctrlX Automation Scheduler\" \"ctrlX Data Layer EtherCAT I/O's\" \"ctrlX Data Layer Realtime\" \"ctrlX Data Layer All Data Provider\" \"ctrlX Diagnostics Logbook\" GO-Samples \u00b6 \"Hello Webserver\" \"AppData File Storage\" Python-Samples \u00b6 \"ctrlX Data Layer Client\" \"ctrlX Data Layer Client (complex)\" \"ctrlX Data Layer Client Browse\" \"ctrlX Data Layer Client Subscription\" \"ctrlX Data Layer Provider\" \"ctrlX Data Layer Provider All Data\" \"ctrlX Diagnostics Logbook\" \"ctrlX Data Layer Calculation operations\" \"ctrlX Data Layer + Webserver\" \"AppData File Storage\" .NET Samples \u00b6 \"Hello World\" \"ctrlX Data Layer Browse\" \"ctrlX Data Layer Client\" \"ctrlX Data Layer Provider\" \"ctrlX Data Layer Provider All Data\" \"ctrlX Data Layer Provider Virtual\" \"ctrlX Data Layer MQTT\" \"ctrlX Diagnostics Logbook\" \"AppData File Storage\" Shell Based Samples \u00b6 TPM2 Consumer Build and install \u00b6 To build the samples and create the first snap see Build ctrlX AUTOMATION Community \u00b6 ctrlX AUTOMATION Community","title":"Overview"},{"location":"samples_mkdocs.html#samples","text":"","title":"Samples"},{"location":"samples_mkdocs.html#samples-included-in-ctrlx-sdk","text":"","title":"Samples included in ctrlX SDK"},{"location":"samples_mkdocs.html#cc-samples","text":"\"Hello World\" recommendation -> start with this example \"Hello PLC\" \"ctrlX Data Layer Client\" \"ctrlX Data Layer RegisterNode\" \"ctrlX Automation Bundle\" includes motion commands for axis and kinematics \"ctrlX Automation Scheduler\" \"ctrlX Data Layer EtherCAT I/O's\" \"ctrlX Data Layer Realtime\" \"ctrlX Data Layer All Data Provider\" \"ctrlX Diagnostics Logbook\"","title":"C/C++ Samples"},{"location":"samples_mkdocs.html#go-samples","text":"\"Hello Webserver\" \"AppData File Storage\"","title":"GO-Samples"},{"location":"samples_mkdocs.html#python-samples","text":"\"ctrlX Data Layer Client\" \"ctrlX Data Layer Client (complex)\" \"ctrlX Data Layer Client Browse\" \"ctrlX Data Layer Client Subscription\" \"ctrlX Data Layer Provider\" \"ctrlX Data Layer Provider All Data\" \"ctrlX Diagnostics Logbook\" \"ctrlX Data Layer Calculation operations\" \"ctrlX Data Layer + Webserver\" \"AppData File Storage\"","title":"Python-Samples"},{"location":"samples_mkdocs.html#net-samples","text":"\"Hello World\" \"ctrlX Data Layer Browse\" \"ctrlX Data Layer Client\" \"ctrlX Data Layer Provider\" \"ctrlX Data Layer Provider All Data\" \"ctrlX Data Layer Provider Virtual\" \"ctrlX Data Layer MQTT\" \"ctrlX Diagnostics Logbook\" \"AppData File Storage\"","title":".NET Samples"},{"location":"samples_mkdocs.html#shell-based-samples","text":"TPM2 Consumer","title":"Shell Based Samples"},{"location":"samples_mkdocs.html#build-and-install","text":"To build the samples and create the first snap see Build","title":"Build and install"},{"location":"samples_mkdocs.html#ctrlx-automation-community","text":"ctrlX AUTOMATION Community","title":"ctrlX AUTOMATION Community"},{"location":"setup_overview.html","text":"Setup Overview \u00b6 Prerequisite \u00b6 For the development of apps you need a linux based development environment, which is based on Ubuntu 18.04 LTS. If you main development environment is not a linux operation system but based on Windows, then there are serveral ways how to run a development environment with toolchain in a virtualized setup. The following pages show different alternatives. Choose your setup Virtual Box Windows Subsystem for Linux","title":"Setup Overview"},{"location":"setup_overview.html#setup-overview","text":"","title":"Setup Overview"},{"location":"setup_overview.html#prerequisite","text":"For the development of apps you need a linux based development environment, which is based on Ubuntu 18.04 LTS. If you main development environment is not a linux operation system but based on Windows, then there are serveral ways how to run a development environment with toolchain in a virtualized setup. The following pages show different alternatives. Choose your setup Virtual Box Windows Subsystem for Linux","title":"Prerequisite"},{"location":"setup_windows_virtualbox_ubuntu.html","text":"Setup ctrlX AUTOMATION Development Environment using VirtualBox \u00b6 Overview \u00b6 This guide shows how to use an Ubuntu Desktop running in a virtual machine using the ORACLE VM VirtualBox on a Windows 10 host system as a development environment to develop ctrlX AUTOMATION Apps. This setup gives you a seamless development environment for Linux applications when you don't have the possibility to setup a native Linux Operating System on your PC (e.g. if you are in a Windows based corporate network). Prerequisites \u00b6 You need to have admin rights on your Windows system to be able to install the software. Windows 10 with all updates. Install ORACLE VM VirtualBox \u00b6 Install ORACLE VM VirtualBox . The software can be downloaded from here: https://www.virtualbox.org/. Setup Virtual Machine and install Distribution (Ubuntu 18.04) \u00b6 Once installed setup a new virtual machine to host your Ubuntu Desktop guest system. For the installation of the Ubuntu Operating System, download an iso-Image. It is recommended to use Ubuntu Desktop 18.04 LTS from here: https://releases.ubuntu.com/18.04.4/ Create a virtual machine running the Ubuntu, recommendation: min 8 Gb Ram min 15 Gb Disk, VDI Type all processors insert Ubuntu *.iso into virtual CD Drive Map free internet connection via network settings (Adapter 1, Bridged Adapter) Map real/virtual control via network settings (Adapter 2, Bridged Adapter) Start machine and follow installation instructions Install Virtual Box GuestAdditions Configure IP Address to connect to your control Setup Corporate Proxy (Optional) \u00b6 If you are in a corporate environment, which uses a http-Proxy, then you may want to set the proxy configuration to be able to download software from within your distribution. For this, you want to run a proxy on your Windows environment and redirect the distribution to this proxy running on localhost. If you are directly connected to a router or the internet, then this step can be skipped. A recommended proxy program to be used on your Windows host system is https://github.com/genotrance/px . To set the environment variable in the distribution use: sudo nano /etc/environment Add the following variables: http_proxy=\"http://10.0.2.2:3128\" https_proxy=\"http://10.0.2.2:3128\" HTTP_PROXY=\"http://10.0.2.2:3128\" HTTPS_PROXY=\"http://10.0.2.2:3128\" You need to set this configuration also for wget . sudo nano /etc/wgetrc Search for the http proxy settings and make sure you configure: https_proxy = http://10.0.2.2:3128/ http_proxy = http://10.0.2.2:3128/ use_proxy = on Setup Packages \u00b6 You might want to update your distribution and install essential packages for development. sudo apt update sudo apt upgrade sudo apt install ssh zip unzip git curl cifs-utils apt-transport-https ca-certificates openssh-client The following packages are needed for software development of ctrlX AUTOMATION apps. sudo apt install crossbuild-essential-arm64 cmake snapcraft gcc gdb For Python install the additional python packages: sudo apt-get install python3 sudo apt-get install python3-pip Furthermore, we recommend to use virtual python environments when you are developing python apps. Therefore, you need to install virtualenv: sudo apt-get install virtualenv Dependencies for Crossbuild (Multiarch) \u00b6 Multiarch lets you install library packages from multiple architectures on the some machine. This is useful in various ways, but the most common is installing 64 and 32-bit software on the same machine and having dependencies correctly resolved automatically. In our way we use multiple architectures. In general, you can have libraries of more than one architecture installed together and applications from one architecture or another installed as alternatives. Additional information can be found here Multiarch . Be sure that apt can connect to the internet. Run the commands below as root user: sudo dpkg --add-architecture arm64 sudo sh -c 'echo \"deb [arch=arm64] http://ports.ubuntu.com/ bionic main restricted universe\" >> /etc/apt/sources.list.d/multiarch-libs.list' sudo sh -c 'echo \"deb [arch=arm64] http://ports.ubuntu.com/ bionic-updates main restricted universe\" >> /etc/apt/sources.list.d/multiarch-libs.list' sudo apt-get clean sudo apt-get update After apt-get update, you might get some warnings like: Failed to fetch http://de.archive.ubuntu.com/ubuntu/dists/bionic/universe/binary-arm64/Packages . To avoid it add the vendor with the host architecture [arch=i386,amd64] to your sources list /etc/apt/sources.list . For example: deb [arch=i386,amd64] http://de.archive.ubuntu.com/ubuntu/ bionic main restricted Now it is possible to download packages for other architectures. For building the examples, you need to install additional libraries sudo apt-get install libsystemd-dev:arm64 sudo apt-get install libsystemd-dev:amd64 sudo apt-get install libssl-dev:amd64 sudo apt-get install libssl-dev:arm64 Install Visual Studio Code \u00b6 Install Visual Studio Code on your windows environment as described here: https://code.visualstudio.com. Or use the integrated software downloader of Ubuntu. In order to compile all examples of the SDK you will need to install additional extensions. This can be done easily from within VS Code as soon as you open a project. In the extension windows you can search for extensions. Make sure to have at least the following extensions installed. Install the SDK \u00b6 Copy the complete contents of this SDK into your Ubuntu Desktop system. It is recommended to copy the SDK to the home directory of your user.","title":"Setup via VirtualBox"},{"location":"setup_windows_virtualbox_ubuntu.html#setup-ctrlx-automation-development-environment-using-virtualbox","text":"","title":"Setup ctrlX AUTOMATION Development Environment using VirtualBox"},{"location":"setup_windows_virtualbox_ubuntu.html#overview","text":"This guide shows how to use an Ubuntu Desktop running in a virtual machine using the ORACLE VM VirtualBox on a Windows 10 host system as a development environment to develop ctrlX AUTOMATION Apps. This setup gives you a seamless development environment for Linux applications when you don't have the possibility to setup a native Linux Operating System on your PC (e.g. if you are in a Windows based corporate network).","title":"Overview"},{"location":"setup_windows_virtualbox_ubuntu.html#prerequisites","text":"You need to have admin rights on your Windows system to be able to install the software. Windows 10 with all updates.","title":"Prerequisites"},{"location":"setup_windows_virtualbox_ubuntu.html#install-oracle-vm-virtualbox","text":"Install ORACLE VM VirtualBox . The software can be downloaded from here: https://www.virtualbox.org/.","title":"Install ORACLE VM VirtualBox"},{"location":"setup_windows_virtualbox_ubuntu.html#setup-virtual-machine-and-install-distribution-ubuntu-1804","text":"Once installed setup a new virtual machine to host your Ubuntu Desktop guest system. For the installation of the Ubuntu Operating System, download an iso-Image. It is recommended to use Ubuntu Desktop 18.04 LTS from here: https://releases.ubuntu.com/18.04.4/ Create a virtual machine running the Ubuntu, recommendation: min 8 Gb Ram min 15 Gb Disk, VDI Type all processors insert Ubuntu *.iso into virtual CD Drive Map free internet connection via network settings (Adapter 1, Bridged Adapter) Map real/virtual control via network settings (Adapter 2, Bridged Adapter) Start machine and follow installation instructions Install Virtual Box GuestAdditions Configure IP Address to connect to your control","title":"Setup Virtual Machine and install Distribution (Ubuntu 18.04)"},{"location":"setup_windows_virtualbox_ubuntu.html#setup-corporate-proxy-optional","text":"If you are in a corporate environment, which uses a http-Proxy, then you may want to set the proxy configuration to be able to download software from within your distribution. For this, you want to run a proxy on your Windows environment and redirect the distribution to this proxy running on localhost. If you are directly connected to a router or the internet, then this step can be skipped. A recommended proxy program to be used on your Windows host system is https://github.com/genotrance/px . To set the environment variable in the distribution use: sudo nano /etc/environment Add the following variables: http_proxy=\"http://10.0.2.2:3128\" https_proxy=\"http://10.0.2.2:3128\" HTTP_PROXY=\"http://10.0.2.2:3128\" HTTPS_PROXY=\"http://10.0.2.2:3128\" You need to set this configuration also for wget . sudo nano /etc/wgetrc Search for the http proxy settings and make sure you configure: https_proxy = http://10.0.2.2:3128/ http_proxy = http://10.0.2.2:3128/ use_proxy = on","title":"Setup Corporate Proxy (Optional)"},{"location":"setup_windows_virtualbox_ubuntu.html#setup-packages","text":"You might want to update your distribution and install essential packages for development. sudo apt update sudo apt upgrade sudo apt install ssh zip unzip git curl cifs-utils apt-transport-https ca-certificates openssh-client The following packages are needed for software development of ctrlX AUTOMATION apps. sudo apt install crossbuild-essential-arm64 cmake snapcraft gcc gdb For Python install the additional python packages: sudo apt-get install python3 sudo apt-get install python3-pip Furthermore, we recommend to use virtual python environments when you are developing python apps. Therefore, you need to install virtualenv: sudo apt-get install virtualenv","title":"Setup Packages"},{"location":"setup_windows_virtualbox_ubuntu.html#dependencies-for-crossbuild-multiarch","text":"Multiarch lets you install library packages from multiple architectures on the some machine. This is useful in various ways, but the most common is installing 64 and 32-bit software on the same machine and having dependencies correctly resolved automatically. In our way we use multiple architectures. In general, you can have libraries of more than one architecture installed together and applications from one architecture or another installed as alternatives. Additional information can be found here Multiarch . Be sure that apt can connect to the internet. Run the commands below as root user: sudo dpkg --add-architecture arm64 sudo sh -c 'echo \"deb [arch=arm64] http://ports.ubuntu.com/ bionic main restricted universe\" >> /etc/apt/sources.list.d/multiarch-libs.list' sudo sh -c 'echo \"deb [arch=arm64] http://ports.ubuntu.com/ bionic-updates main restricted universe\" >> /etc/apt/sources.list.d/multiarch-libs.list' sudo apt-get clean sudo apt-get update After apt-get update, you might get some warnings like: Failed to fetch http://de.archive.ubuntu.com/ubuntu/dists/bionic/universe/binary-arm64/Packages . To avoid it add the vendor with the host architecture [arch=i386,amd64] to your sources list /etc/apt/sources.list . For example: deb [arch=i386,amd64] http://de.archive.ubuntu.com/ubuntu/ bionic main restricted Now it is possible to download packages for other architectures. For building the examples, you need to install additional libraries sudo apt-get install libsystemd-dev:arm64 sudo apt-get install libsystemd-dev:amd64 sudo apt-get install libssl-dev:amd64 sudo apt-get install libssl-dev:arm64","title":"Dependencies for Crossbuild (Multiarch)"},{"location":"setup_windows_virtualbox_ubuntu.html#install-visual-studio-code","text":"Install Visual Studio Code on your windows environment as described here: https://code.visualstudio.com. Or use the integrated software downloader of Ubuntu. In order to compile all examples of the SDK you will need to install additional extensions. This can be done easily from within VS Code as soon as you open a project. In the extension windows you can search for extensions. Make sure to have at least the following extensions installed.","title":"Install Visual Studio Code"},{"location":"setup_windows_virtualbox_ubuntu.html#install-the-sdk","text":"Copy the complete contents of this SDK into your Ubuntu Desktop system. It is recommended to copy the SDK to the home directory of your user.","title":"Install the SDK"},{"location":"setup_windows_wsl_ubuntu.html","text":"Setup ctrlX AUTOMATION Development Environment using Windows WSL \u00b6 Overview \u00b6 This guide shows how to use the Windows Subsystem for Linux (WSL) as an development environment to develop ctrlX AUTOMATION Apps. It allows you to use Visual Studio Code for Windows as your IDE and to compile your program in the WSL running on Windows. This setup gives you a seamless development environment for Linux applications from within you Windows environment. This guide is based on Microsoft WSL1. For more information about WSL see: https://docs.microsoft.com/en-us/windows/wsl/ Prerequisites \u00b6 You need to have admin rights on your Windows system to be able to install WSL. Windows 10 with all updates. Install WSL \u00b6 Enable Admin access and run PowerShell with Administrator privileges. Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Follow the instructions and reboot. For troubleshooting, see the official Microsoft documentation: https://docs.microsoft.com/de-de/windows/wsl/install-win10 Install Distribution (Ubuntu 18.04) \u00b6 Download your desired Distribution (Ubuntu 18.04 recommended) from https://docs.microsoft.com/en-us/windows/wsl/install-manual and install the archive by executing it from the windows host. Wait for the application to install. Setup Corporate Proxy (Optional) \u00b6 If you are in a corporate environment, which uses a http-Proxy, then you may want to set the proxy configuration to be able to download software from within your distribution. For this, you want to run a proxy on your Windows environment and redirect the distribution to this proxy running on localhost. If you are directly connected to a router or the internet, then this step can be skipped. A recommended proxy program to be used on your Windows host system is px ( https://github.com/genotrance/px ). Get the latest release of Px for Windows https://github.com/genotrance/px/releases . Once the download is finished, run px.exe directly from windows command prompt. Hint: Use flag --install to add Px to the Windows registry to run on startup. To set the environment variable in the distribution use: sudo nano /etc/environment Add the following variables: http_proxy=\"http://127.0.0.1:3128\" https_proxy=\"http://127.0.0.1:3128\" HTTP_PROXY=\"http://127.0.0.1:3128\" HTTPS_PROXY=\"http://127.0.0.1:3128\" You need to set this configuration also for wget . sudo nano /etc/wgetrc Search for the http proxy settings and make sure you configure: https_proxy = http://127.0.0.1:3128/ http_proxy = http://127.0.0.1:3128/ use_proxy = on Setup Packages \u00b6 You might want to update your distribution and install essential packages for development. sudo apt update sudo apt upgrade sudo apt install ssh zip unzip git curl cifs-utils apt-transport-https ca-certificates openssh-client The following packages are needed for software development of ctrlX AUTOMATION apps. sudo apt install crossbuild-essential-arm64 cmake snapcraft gcc gdb For Python install the additional python packages. sudo apt-get install python3 sudo apt-get install python3-pip Furthermore, we recommend to use virtual python environments when you are developing python apps. Therefore, you need to install virtualenv: sudo apt-get install virtualenv Dependencies for Crossbuild (Multiarch) \u00b6 Multiarch lets you install library packages from multiple architectures on the some machine. This is useful in various ways, but the most common is installing 64 and 32-bit software on the same machine and having dependencies correctly resolved automatically. In our way, we use multiple architectures. In general, you can have libraries of more than one architecture installed together and applications from one architecture or another installed as alternatives. Additional information can be found here Multiarch . Be sure that apt can connect to the internet. Run the commands below as root user: sudo dpkg --add-architecture arm64 sudo sh -c 'echo \"deb [arch=arm64] http://ports.ubuntu.com/ bionic main restricted universe\" >> /etc/apt/sources.list.d/multiarch-libs.list' sudo sh -c 'echo \"deb [arch=arm64] http://ports.ubuntu.com/ bionic-updates main restricted universe\" >> /etc/apt/sources.list.d/multiarch-libs.list' sudo apt-get clean sudo apt-get update After apt-get update you might get some warnings like: Failed to fetch http://de.archive.ubuntu.com/ubuntu/dists/bionic/universe/binary-arm64/Packages . To avoid it add the vendor with the host architecture [arch=i386,amd64] to all sources of your sources list /etc/apt/sources.list . For example: deb [arch=i386,amd64] http://de.archive.ubuntu.com/ubuntu/ bionic main restricted Now it is possible to download packages for other architectures. For building the examples, you need to install additional libraries: sudo apt-get install libsystemd-dev:arm64 sudo apt-get install libsystemd-dev:amd64 sudo apt-get install libssl-dev:amd64 sudo apt-get install libssl-dev:arm64 Install Visual Studio Code \u00b6 Install Visual Studio Code on your windows environment as described here: https://code.visualstudio.com/ Setup WSL Remote Compilation \u00b6 In order to be able to develop in Windows, but to compile in the WSL you need to install the following extension locally in VS Code: https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack To compile all examples of the SDK you will need to install additional extensions on the remote backend. This can be done easily from within VS Code as soon as you open a project. In the extension windows you can press install in WSL . The extensions you need to install depending on the programming language you want to use. Go to the sample subpage of this documentation to find the required extensions of your preferred programming language. Install the SDK \u00b6 Copy the complete contents of this SDK into your WSL system. It is recommended to copy the SDK to the home directory of your user. For example: cp -r /mnt/c/sdk.control ~/ Open a Project \u00b6 Open from the WSL terminal \u00b6 Opening a folder inside the Windows Subsystem for Linux in VS Code is very similar to opening up a Windows folder from the command prompt or PowerShell. Open a WSL terminal window (using the start menu item or by typing wsl from a command prompt / PowerShell). Navigate to a folder you'd like to open in VS Code. For example: cd ~/sdk.control/public/samples-cpp/hello.world Type code in the terminal. When doing this for the first time, you should see VS Code fetching components needed to run in WSL. This should only take a short while and is only needed once. Open VS Code \u00b6 Start VS Code. Press F1, select Remote-WSL: New Window for the default distro or Remote-WSL: New Window using Distro for a specific distro. Use the File menu to open your folder. Troubleshooting \u00b6 PermissionError: [Errno 13] Permission denied when calling snapcraft \u00b6 When calling snapcraft in WSL1, there might occur errors regarding file permissions. This happens, when snapcraft is called from a directory which is mounted from the windows host file system (e.g. mnt/c/ ). This is a known problem with the WSL1 files system implementation and will probably be fixed with Microsoft WSL2. Meanwhile, the only solution is to call snapcraft from a subdirectory within your home directory. Therefore you might want to copy the sdk to your home directory and compile the projects from there. mkdir -p ~/ctrlx_sdk && cp -r /mnt/c/path/to/sdk ~/ctrlx_sdk No connection using pip3 install behind proxy \u00b6 Within the WSL there is a bug using the environment Variables like http_proxy and https_proxy. It is possible to solve this with a modified ~/.bashrc Add the proxy variables to the .bashrc file in your home directory: export http_proxy = \"http://127.0.0.1:3128\" export https_proxy = \"http://127.0.0.1:3128\"","title":"Setup via WSL"},{"location":"setup_windows_wsl_ubuntu.html#setup-ctrlx-automation-development-environment-using-windows-wsl","text":"","title":"Setup ctrlX AUTOMATION Development Environment using Windows WSL"},{"location":"setup_windows_wsl_ubuntu.html#overview","text":"This guide shows how to use the Windows Subsystem for Linux (WSL) as an development environment to develop ctrlX AUTOMATION Apps. It allows you to use Visual Studio Code for Windows as your IDE and to compile your program in the WSL running on Windows. This setup gives you a seamless development environment for Linux applications from within you Windows environment. This guide is based on Microsoft WSL1. For more information about WSL see: https://docs.microsoft.com/en-us/windows/wsl/","title":"Overview"},{"location":"setup_windows_wsl_ubuntu.html#prerequisites","text":"You need to have admin rights on your Windows system to be able to install WSL. Windows 10 with all updates.","title":"Prerequisites"},{"location":"setup_windows_wsl_ubuntu.html#install-wsl","text":"Enable Admin access and run PowerShell with Administrator privileges. Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Follow the instructions and reboot. For troubleshooting, see the official Microsoft documentation: https://docs.microsoft.com/de-de/windows/wsl/install-win10","title":"Install WSL"},{"location":"setup_windows_wsl_ubuntu.html#install-distribution-ubuntu-1804","text":"Download your desired Distribution (Ubuntu 18.04 recommended) from https://docs.microsoft.com/en-us/windows/wsl/install-manual and install the archive by executing it from the windows host. Wait for the application to install.","title":"Install Distribution (Ubuntu 18.04)"},{"location":"setup_windows_wsl_ubuntu.html#setup-corporate-proxy-optional","text":"If you are in a corporate environment, which uses a http-Proxy, then you may want to set the proxy configuration to be able to download software from within your distribution. For this, you want to run a proxy on your Windows environment and redirect the distribution to this proxy running on localhost. If you are directly connected to a router or the internet, then this step can be skipped. A recommended proxy program to be used on your Windows host system is px ( https://github.com/genotrance/px ). Get the latest release of Px for Windows https://github.com/genotrance/px/releases . Once the download is finished, run px.exe directly from windows command prompt. Hint: Use flag --install to add Px to the Windows registry to run on startup. To set the environment variable in the distribution use: sudo nano /etc/environment Add the following variables: http_proxy=\"http://127.0.0.1:3128\" https_proxy=\"http://127.0.0.1:3128\" HTTP_PROXY=\"http://127.0.0.1:3128\" HTTPS_PROXY=\"http://127.0.0.1:3128\" You need to set this configuration also for wget . sudo nano /etc/wgetrc Search for the http proxy settings and make sure you configure: https_proxy = http://127.0.0.1:3128/ http_proxy = http://127.0.0.1:3128/ use_proxy = on","title":"Setup Corporate Proxy (Optional)"},{"location":"setup_windows_wsl_ubuntu.html#setup-packages","text":"You might want to update your distribution and install essential packages for development. sudo apt update sudo apt upgrade sudo apt install ssh zip unzip git curl cifs-utils apt-transport-https ca-certificates openssh-client The following packages are needed for software development of ctrlX AUTOMATION apps. sudo apt install crossbuild-essential-arm64 cmake snapcraft gcc gdb For Python install the additional python packages. sudo apt-get install python3 sudo apt-get install python3-pip Furthermore, we recommend to use virtual python environments when you are developing python apps. Therefore, you need to install virtualenv: sudo apt-get install virtualenv","title":"Setup Packages"},{"location":"setup_windows_wsl_ubuntu.html#dependencies-for-crossbuild-multiarch","text":"Multiarch lets you install library packages from multiple architectures on the some machine. This is useful in various ways, but the most common is installing 64 and 32-bit software on the same machine and having dependencies correctly resolved automatically. In our way, we use multiple architectures. In general, you can have libraries of more than one architecture installed together and applications from one architecture or another installed as alternatives. Additional information can be found here Multiarch . Be sure that apt can connect to the internet. Run the commands below as root user: sudo dpkg --add-architecture arm64 sudo sh -c 'echo \"deb [arch=arm64] http://ports.ubuntu.com/ bionic main restricted universe\" >> /etc/apt/sources.list.d/multiarch-libs.list' sudo sh -c 'echo \"deb [arch=arm64] http://ports.ubuntu.com/ bionic-updates main restricted universe\" >> /etc/apt/sources.list.d/multiarch-libs.list' sudo apt-get clean sudo apt-get update After apt-get update you might get some warnings like: Failed to fetch http://de.archive.ubuntu.com/ubuntu/dists/bionic/universe/binary-arm64/Packages . To avoid it add the vendor with the host architecture [arch=i386,amd64] to all sources of your sources list /etc/apt/sources.list . For example: deb [arch=i386,amd64] http://de.archive.ubuntu.com/ubuntu/ bionic main restricted Now it is possible to download packages for other architectures. For building the examples, you need to install additional libraries: sudo apt-get install libsystemd-dev:arm64 sudo apt-get install libsystemd-dev:amd64 sudo apt-get install libssl-dev:amd64 sudo apt-get install libssl-dev:arm64","title":"Dependencies for Crossbuild (Multiarch)"},{"location":"setup_windows_wsl_ubuntu.html#install-visual-studio-code","text":"Install Visual Studio Code on your windows environment as described here: https://code.visualstudio.com/","title":"Install Visual Studio Code"},{"location":"setup_windows_wsl_ubuntu.html#setup-wsl-remote-compilation","text":"In order to be able to develop in Windows, but to compile in the WSL you need to install the following extension locally in VS Code: https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack To compile all examples of the SDK you will need to install additional extensions on the remote backend. This can be done easily from within VS Code as soon as you open a project. In the extension windows you can press install in WSL . The extensions you need to install depending on the programming language you want to use. Go to the sample subpage of this documentation to find the required extensions of your preferred programming language.","title":"Setup WSL Remote Compilation"},{"location":"setup_windows_wsl_ubuntu.html#install-the-sdk","text":"Copy the complete contents of this SDK into your WSL system. It is recommended to copy the SDK to the home directory of your user. For example: cp -r /mnt/c/sdk.control ~/","title":"Install the SDK"},{"location":"setup_windows_wsl_ubuntu.html#open-a-project","text":"","title":"Open a Project"},{"location":"setup_windows_wsl_ubuntu.html#open-from-the-wsl-terminal","text":"Opening a folder inside the Windows Subsystem for Linux in VS Code is very similar to opening up a Windows folder from the command prompt or PowerShell. Open a WSL terminal window (using the start menu item or by typing wsl from a command prompt / PowerShell). Navigate to a folder you'd like to open in VS Code. For example: cd ~/sdk.control/public/samples-cpp/hello.world Type code in the terminal. When doing this for the first time, you should see VS Code fetching components needed to run in WSL. This should only take a short while and is only needed once.","title":"Open from the WSL terminal"},{"location":"setup_windows_wsl_ubuntu.html#open-vs-code","text":"Start VS Code. Press F1, select Remote-WSL: New Window for the default distro or Remote-WSL: New Window using Distro for a specific distro. Use the File menu to open your folder.","title":"Open VS Code"},{"location":"setup_windows_wsl_ubuntu.html#troubleshooting","text":"","title":"Troubleshooting"},{"location":"setup_windows_wsl_ubuntu.html#permissionerror-errno-13-permission-denied-when-calling-snapcraft","text":"When calling snapcraft in WSL1, there might occur errors regarding file permissions. This happens, when snapcraft is called from a directory which is mounted from the windows host file system (e.g. mnt/c/ ). This is a known problem with the WSL1 files system implementation and will probably be fixed with Microsoft WSL2. Meanwhile, the only solution is to call snapcraft from a subdirectory within your home directory. Therefore you might want to copy the sdk to your home directory and compile the projects from there. mkdir -p ~/ctrlx_sdk && cp -r /mnt/c/path/to/sdk ~/ctrlx_sdk","title":"PermissionError: [Errno 13] Permission denied when calling snapcraft"},{"location":"setup_windows_wsl_ubuntu.html#no-connection-using-pip3-install-behind-proxy","text":"Within the WSL there is a bug using the environment Variables like http_proxy and https_proxy. It is possible to solve this with a modified ~/.bashrc Add the proxy variables to the .bashrc file in your home directory: export http_proxy = \"http://127.0.0.1:3128\" export https_proxy = \"http://127.0.0.1:3128\"","title":"No connection using pip3 install behind proxy"},{"location":"tpm2.html","text":"TPM2 \u00b6 Introduction \u00b6 The ctrlX CORE devices provide the capability to securely generate and store keys with a hardware security module, specifically a Trusted Platform Module 2.0 (TPM2). This TPM can be used additionally to Certificate Management described in Package Manifest . Connecting apps to the TPM2 \u00b6 The app.deviceadmin provides a socket interface, which allows to use the TPM2. Behind the scenes, there is a \"Access Broker/Ressource Manager\" working, managing concurrent sessions accessing the TPM2. Following steps are necessary to connect to TPM2 socket: Adapt your snapcraft.yaml Needed plugs tpm2-socket: Provides your snap with the tpm2.sock file. (Optional) system-configuration: Provides a file with environment variables for configuring your TSS, called \"envvars\". Provide your app with the plugs Use the TPM inside your application Compile the TSS as you need Source the envvars Use the TSS as usual ... More details on the Trusted Software Stack (TSS) below. Example snapcraft.yaml \u00b6 plugs : tpm2-socket : interface : content content : tpm2-socket target : $SNAP_DATA/tpm2-socket system-configuration : interface : content content : system-configuration target : $SNAP_DATA/system-configuration apps : example-app : [ ... ] plugs : [ tpm2-socket , system-configuration , network ] Integration with Certificate Manager \u00b6 If you provide the package-certificate slots, and use the appropriate directory structure, TPM2 usage perfectly integrates into Certificate Manager. Using the TPM2 inside software \u00b6 After having everything in place, the usage of the TPM is straightforward. Instead of connecting to /dev/tpmrm0 , use $SNAP_DATA/tpm2-socket/tpm2.sock . envvars provides you with everything needed, for example: export TPM2TOOLS_TCTI = \"cmd:nc -U $SNAP_DATA /tpm2-socket/tpm2.sock\" Storage Root Key (SRK) \u00b6 The SRK of the TPM is permanently stored at 0x81000001 provided by TPM2_SRK_PARENT environment variable. NOTE Although the SRK is stored in NVRAM of TPM, it cannot be guaranteed to be always present. It must be tolerable by your application, that the SRK was replaced by another key, or even is totally absent. Following two examples or snippets, how to generate the SRK with the correct Primary-Key-Template. echo \"0000000: 0001\" | xxd -r - unique.dat dd if = /dev/zero bs = 1 count = 256 >> unique.dat tpm2_createprimary \\ --hierarchy = owner \\ --key-algorithm = rsa2048:aes128cfb \\ --hash-algorithm = sha256 \\ --key-context = prim.ctx \\ -a 'restricted|decrypt|fixedtpm|fixedparent|sensitivedataorigin|userwithauth|noda' \\ --unique-data = unique.dat In Golang, use following template: import \"github.com/google/go-tpm/tpm2\" var DefaultSrkTemplate = tpm2 . Public { Type : tpm2 . AlgRSA , NameAlg : tpm2 . AlgSHA256 , Attributes : tpm2 . FlagFixedTPM | tpm2 . FlagFixedParent | tpm2 . FlagSensitiveDataOrigin | tpm2 . FlagUserWithAuth | tpm2 . FlagNoDA | tpm2 . FlagRestricted | tpm2 . FlagDecrypt , AuthPolicy : nil , RSAParameters : & tpm2 . RSAParams { Symmetric : & tpm2 . SymScheme { Alg : tpm2 . AlgAES , KeyBits : 128 , Mode : tpm2 . AlgCFB , }, Sign : nil , KeyBits : 2048 , ExponentRaw : 0 , ModulusRaw : make ([] byte , 256 ), }, } For further details for golang, please see the Golang example . Trusted Software Stack \u00b6 You will need some of the following parts of the TSS inside your snap: tpm2-tss https://github.com/tpm2-software/tpm2-tss tpm2-tools https://github.com/tpm2-software/tpm2-tools tpm2-tss-engine https://github.com/tpm2-software/tpm2-tss-engine tpm2-openssl https://github.com/tpm2-software/tpm2-openssl More information and more tools: https://tpm2-software.github.io/ https://github.com/tpm2-software Usage with OpenSSL \u00b6 tpm2-tss-engine as an example, setting first the environment variables: export LD_LIBRARY_PATH = $LD_LIBRARY_PATH : $SNAP /usr/lib/x86_64-linux-gnu/engines-1.1 export OPENSSL_ENGINES = $SNAP /usr/lib/x86_64-linux-gnu/engines-1.1 You can then use OpenSSL option -engine tpm2tss together with files generated by tpm2tss-genkey . Existing keys from tpm2-tools or the Certificate Manager can be converted: tpm2tss-genkey -P $TPM2_SRK_PARENT -u key.pub -r key.priv key.tpm2tss Other languages \u00b6 Useful projects: Golang - https://github.com/google/go-tpm - https://github.com/google/go-tpm-tools - https://github.com/salrashid123/signer Attention If using go-tpm, you need to implement your own functions for opening, reading and writing the TPM socket, as the integrated functions close and reopen the socket with every read/write sequence. See: https://github.com/google/go-tpm/blob/master/tpmutil/run_other.go Python - https://github.com/tpm2-software/tpm2-pytss","title":"TPM2"},{"location":"tpm2.html#tpm2","text":"","title":"TPM2"},{"location":"tpm2.html#introduction","text":"The ctrlX CORE devices provide the capability to securely generate and store keys with a hardware security module, specifically a Trusted Platform Module 2.0 (TPM2). This TPM can be used additionally to Certificate Management described in Package Manifest .","title":"Introduction"},{"location":"tpm2.html#connecting-apps-to-the-tpm2","text":"The app.deviceadmin provides a socket interface, which allows to use the TPM2. Behind the scenes, there is a \"Access Broker/Ressource Manager\" working, managing concurrent sessions accessing the TPM2. Following steps are necessary to connect to TPM2 socket: Adapt your snapcraft.yaml Needed plugs tpm2-socket: Provides your snap with the tpm2.sock file. (Optional) system-configuration: Provides a file with environment variables for configuring your TSS, called \"envvars\". Provide your app with the plugs Use the TPM inside your application Compile the TSS as you need Source the envvars Use the TSS as usual ... More details on the Trusted Software Stack (TSS) below.","title":"Connecting apps to the TPM2"},{"location":"tpm2.html#example-snapcraftyaml","text":"plugs : tpm2-socket : interface : content content : tpm2-socket target : $SNAP_DATA/tpm2-socket system-configuration : interface : content content : system-configuration target : $SNAP_DATA/system-configuration apps : example-app : [ ... ] plugs : [ tpm2-socket , system-configuration , network ]","title":"Example snapcraft.yaml"},{"location":"tpm2.html#integration-with-certificate-manager","text":"If you provide the package-certificate slots, and use the appropriate directory structure, TPM2 usage perfectly integrates into Certificate Manager.","title":"Integration with Certificate Manager"},{"location":"tpm2.html#using-the-tpm2-inside-software","text":"After having everything in place, the usage of the TPM is straightforward. Instead of connecting to /dev/tpmrm0 , use $SNAP_DATA/tpm2-socket/tpm2.sock . envvars provides you with everything needed, for example: export TPM2TOOLS_TCTI = \"cmd:nc -U $SNAP_DATA /tpm2-socket/tpm2.sock\"","title":"Using the TPM2 inside software"},{"location":"tpm2.html#storage-root-key-srk","text":"The SRK of the TPM is permanently stored at 0x81000001 provided by TPM2_SRK_PARENT environment variable. NOTE Although the SRK is stored in NVRAM of TPM, it cannot be guaranteed to be always present. It must be tolerable by your application, that the SRK was replaced by another key, or even is totally absent. Following two examples or snippets, how to generate the SRK with the correct Primary-Key-Template. echo \"0000000: 0001\" | xxd -r - unique.dat dd if = /dev/zero bs = 1 count = 256 >> unique.dat tpm2_createprimary \\ --hierarchy = owner \\ --key-algorithm = rsa2048:aes128cfb \\ --hash-algorithm = sha256 \\ --key-context = prim.ctx \\ -a 'restricted|decrypt|fixedtpm|fixedparent|sensitivedataorigin|userwithauth|noda' \\ --unique-data = unique.dat In Golang, use following template: import \"github.com/google/go-tpm/tpm2\" var DefaultSrkTemplate = tpm2 . Public { Type : tpm2 . AlgRSA , NameAlg : tpm2 . AlgSHA256 , Attributes : tpm2 . FlagFixedTPM | tpm2 . FlagFixedParent | tpm2 . FlagSensitiveDataOrigin | tpm2 . FlagUserWithAuth | tpm2 . FlagNoDA | tpm2 . FlagRestricted | tpm2 . FlagDecrypt , AuthPolicy : nil , RSAParameters : & tpm2 . RSAParams { Symmetric : & tpm2 . SymScheme { Alg : tpm2 . AlgAES , KeyBits : 128 , Mode : tpm2 . AlgCFB , }, Sign : nil , KeyBits : 2048 , ExponentRaw : 0 , ModulusRaw : make ([] byte , 256 ), }, } For further details for golang, please see the Golang example .","title":"Storage Root Key (SRK)"},{"location":"tpm2.html#trusted-software-stack","text":"You will need some of the following parts of the TSS inside your snap: tpm2-tss https://github.com/tpm2-software/tpm2-tss tpm2-tools https://github.com/tpm2-software/tpm2-tools tpm2-tss-engine https://github.com/tpm2-software/tpm2-tss-engine tpm2-openssl https://github.com/tpm2-software/tpm2-openssl More information and more tools: https://tpm2-software.github.io/ https://github.com/tpm2-software","title":"Trusted Software Stack"},{"location":"tpm2.html#usage-with-openssl","text":"tpm2-tss-engine as an example, setting first the environment variables: export LD_LIBRARY_PATH = $LD_LIBRARY_PATH : $SNAP /usr/lib/x86_64-linux-gnu/engines-1.1 export OPENSSL_ENGINES = $SNAP /usr/lib/x86_64-linux-gnu/engines-1.1 You can then use OpenSSL option -engine tpm2tss together with files generated by tpm2tss-genkey . Existing keys from tpm2-tools or the Certificate Manager can be converted: tpm2tss-genkey -P $TPM2_SRK_PARENT -u key.pub -r key.priv key.tpm2tss","title":"Usage with OpenSSL"},{"location":"tpm2.html#other-languages","text":"Useful projects: Golang - https://github.com/google/go-tpm - https://github.com/google/go-tpm-tools - https://github.com/salrashid123/signer Attention If using go-tpm, you need to implement your own functions for opening, reading and writing the TPM socket, as the integrated functions close and reopen the socket with every read/write sequence. See: https://github.com/google/go-tpm/blob/master/tpmutil/run_other.go Python - https://github.com/tpm2-software/tpm2-pytss","title":"Other languages"},{"location":"samples-cpp/index.html","text":"C/C++ Samples \u00b6 Find out the supported samples \u00b6 \"Hello World\" recommendation -> start with this example \"Hello PLC\" \"ctrlX Data Layer Client\" \"ctrlX Data Layer RegisterNode\" \"ctrlX Automation Bundle\" includes motion commands for axis and kinematics \"ctrlX Automation Scheduler\" \"ctrlX Data Layer EtherCAT I/O's\" \"ctrlX Data Layer Realtime\" \"ctrlX Data Layer All Data Provider\"","title":"C/C++ Samples"},{"location":"samples-cpp/index.html#cc-samples","text":"","title":"C/C++ Samples"},{"location":"samples-cpp/index.html#find-out-the-supported-samples","text":"\"Hello World\" recommendation -> start with this example \"Hello PLC\" \"ctrlX Data Layer Client\" \"ctrlX Data Layer RegisterNode\" \"ctrlX Automation Bundle\" includes motion commands for axis and kinematics \"ctrlX Automation Scheduler\" \"ctrlX Data Layer EtherCAT I/O's\" \"ctrlX Data Layer Realtime\" \"ctrlX Data Layer All Data Provider\"","title":"Find out the supported samples"},{"location":"samples-cpp/automation.bundle/index.html","text":"README automation.bundle \u00b6 Description \u00b6 The sample app automation.bundle creates a celix bundle together with the motion component. It includes a hello world and motion commands for axis and kinematics. Prerequisites \u00b6 Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.2 ctrlX CORE virtual or ctrlX CORE Requirements and dependencies \u00b6 This example requires the snap rexroth-automationcore and rexroth-motion installed on ctrlX CORE device. Getting Started \u00b6 Launch IDE (VSCode for example) Open the sample directory samples-cpp/automation.bundle Build and install the snap as described in Setup section Check output in the web interface Screenshots \u00b6 Troubleshooting \u00b6 All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Community License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Automation Bundle"},{"location":"samples-cpp/automation.bundle/index.html#readme-automationbundle","text":"","title":"README automation.bundle"},{"location":"samples-cpp/automation.bundle/index.html#description","text":"The sample app automation.bundle creates a celix bundle together with the motion component. It includes a hello world and motion commands for axis and kinematics.","title":"Description"},{"location":"samples-cpp/automation.bundle/index.html#prerequisites","text":"Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.2 ctrlX CORE virtual or ctrlX CORE","title":"Prerequisites"},{"location":"samples-cpp/automation.bundle/index.html#requirements-and-dependencies","text":"This example requires the snap rexroth-automationcore and rexroth-motion installed on ctrlX CORE device.","title":"Requirements and dependencies"},{"location":"samples-cpp/automation.bundle/index.html#getting-started","text":"Launch IDE (VSCode for example) Open the sample directory samples-cpp/automation.bundle Build and install the snap as described in Setup section Check output in the web interface","title":"Getting Started"},{"location":"samples-cpp/automation.bundle/index.html#screenshots","text":"","title":"Screenshots"},{"location":"samples-cpp/automation.bundle/index.html#troubleshooting","text":"All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process.","title":"Troubleshooting"},{"location":"samples-cpp/automation.bundle/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Community","title":"Support"},{"location":"samples-cpp/automation.bundle/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/automation.scheduler/index.html","text":"Example automation.scheduler \u00b6 Introduction \u00b6 The sample automation.scheduler add a callable to the callable-pool of the control. The callable-pool can be found in the ctrlX Data Layer. |-- framework |-- scheduler |-- admin |-- callable-pool |-- <callable-name> |-- plc |-- motion |-- ... |-- groups |-- tasks |-- ... You can add each callable to a task, to run it. Pre-requisites \u00b6 Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.2 ctrlX CORE virtual or ctrlX CORE REST-Client Using REST-Interface to run callable \u00b6 Each REST-Call have to be done with the IP-adress of the ctlrX CORE e.g. 192.168.1.1 and an authorized user for example the default username boschrexroth and password boschrexroth . 1. Get access-token \u00b6 POST h tt ps : // 192.168.1.1 /ide nt i t y - ma na ger/api/v 1 /au t h/ t oke n { \"name\" : \"boschrexroth\" , \"password\" : \"boschrexroth\" } The response should be look like: { \"access_token\" : \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1OTM2MzQ2NDMsImlhdCI6MTU5MzYwNTg0MywiaWQiOiIxMDAxIiwibmFtZSI6ImJvc2NocmV4cm90aCIsIm5vbmNlIjoiOTI2OThhOTctYzk2My00M2IwLTk5NDMtODc5NjYzNjU2M2Q1IiwicGxjaGFuZGxlIjowLCJzY29wZSI6WyJyZXhyb3RoLWRldmljZS5hbGwucnd4Il19.fEtE_4yL2uOcZPcG6XkB6-0eHGZIuMbk1HHpx6B1dPeMxMVyzg6pqw28lv3yJfVdtnOY7G9P4IQjCHQyrMk8ImHLBWjW-3cf-XECajfMJISIgx5vmQ-tdk7rxsKOZjs0GjdD-vbCzoD93HwMwvksFb_-W6wLs8LsKErwPWbf_PotajXTDInG5Vyit4NlzLk1ZQWkn8V8FNWgFoXKd5gsHn44IrmR6MPqKXvg_jPxaw_-CDu7tCgvRpCGRR5_Sq3d0AC5sLPh5SJ1w9Mg-m2O7Ec2CCvWYF08VbRo_CEEDbcT2X6nkrzi7vyo6j1YWOc8RCBOB08z6GlHrg_IPipbRBzptRvTKD_4oHfEASInExEu7cxp2Oz0u9Nt7oZEFes3M47CDQJB9qhLweUbS9W_ZK5GQmDuVYA8eY3JUA_rOwcBeBzqZwb8mJpSJUYSofI8JXw37P8GUbj2YQwEAPnFkqbgSd_JIbAILVE7UtIQhmPETb1FpwId78cPbOzObfyJMM3gRdQo5XLSS5qPkz5KJqw2orJBkHC9Ysd9hcSSIl-eJoEBlsngvN4KfWqD5OvV2FHG1PVpEJX-TRLtb18jxnUHLM6Lr55wmLWy2cEFFtUnqPw2uGeF7Wlj6othiWliApZmF1sFjm6wt-Bdn07VIKWhka4klGoTZgP8OytWTc0\" , \"token_type\" : \"Bearer\" } Add the token to your authorization header with type Bearer to each of the following https-requests. 2. Create a new task (scheduler state must be in config) \u00b6 POST h tt ps : // 192.168.1.1 /au t oma t io n /api/v 1 /scheduler/ tas ks/ { \"cycletime\" : 100000 , \"event\" : \"cyclic\" , \"name\" : \"HelloCallable\" } Only the name is required. The possible task configurations are: Task { name: string (required); // singleton priority: uint32 = 119; // 0=highest .. 139=lowest affinity: uint32 = 0; // cpu affinity 0..3 (max) stacksize: uint32 = 131072; // bytes event: string (required); // e.g. \"cyclic\" cycletime: uint32 = 20000; // microseconds } 3. Add the callable to a task \u00b6 POST h tt ps : // 192.168.1.1 /au t oma t io n /api/v 1 /scheduler/ tas ks/HelloCallable/program/ { \"arguments\" : [ ], \"index\" : 0 , \"name\" : \"HelloCallableFactory\" } The argumentlist is not necceassary and can be empty. Callable { name: string (required); // singleton (callable factory name) index: uint32 = 0; // call index 1 (highest) to maximum type range (default: 0 = lowest) arguments: [string]; // values to initialize the callable } The response contains the information about the program index: Response: { \"type\" : \"string\" , \"value\" : \"scheduler/tasks/HelloCallable/program/2/\" } Additional task informations are located in the ctrlX Data Layer \u00b6 |-- scheduler |-- admin |-- callables-pool |-- groups |-- tasks |-- HelloCallable |-- info |-- program // Contains the programindex, needed to delete the callable from the task |-- properties |-- state |-- watchdog |-- ... To delete a callable from a task, use: DELETE h tt ps : // 192.168.1.1 /au t oma t io n /api/v 1 /scheduler/ tas ks/HelloCallable/program/ 2 To delete a task use: DELETE h tt ps : // 192.168.1.1 /au t oma t io n /api/v 1 /scheduler/ tas ks/HelloCallable Screenshots \u00b6 Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Automation Scheduler"},{"location":"samples-cpp/automation.scheduler/index.html#example-automationscheduler","text":"","title":"Example automation.scheduler"},{"location":"samples-cpp/automation.scheduler/index.html#introduction","text":"The sample automation.scheduler add a callable to the callable-pool of the control. The callable-pool can be found in the ctrlX Data Layer. |-- framework |-- scheduler |-- admin |-- callable-pool |-- <callable-name> |-- plc |-- motion |-- ... |-- groups |-- tasks |-- ... You can add each callable to a task, to run it.","title":"Introduction"},{"location":"samples-cpp/automation.scheduler/index.html#pre-requisites","text":"Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.2 ctrlX CORE virtual or ctrlX CORE REST-Client","title":"Pre-requisites"},{"location":"samples-cpp/automation.scheduler/index.html#using-rest-interface-to-run-callable","text":"Each REST-Call have to be done with the IP-adress of the ctlrX CORE e.g. 192.168.1.1 and an authorized user for example the default username boschrexroth and password boschrexroth .","title":"Using REST-Interface to run callable"},{"location":"samples-cpp/automation.scheduler/index.html#1-get-access-token","text":"POST h tt ps : // 192.168.1.1 /ide nt i t y - ma na ger/api/v 1 /au t h/ t oke n { \"name\" : \"boschrexroth\" , \"password\" : \"boschrexroth\" } The response should be look like: { \"access_token\" : \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1OTM2MzQ2NDMsImlhdCI6MTU5MzYwNTg0MywiaWQiOiIxMDAxIiwibmFtZSI6ImJvc2NocmV4cm90aCIsIm5vbmNlIjoiOTI2OThhOTctYzk2My00M2IwLTk5NDMtODc5NjYzNjU2M2Q1IiwicGxjaGFuZGxlIjowLCJzY29wZSI6WyJyZXhyb3RoLWRldmljZS5hbGwucnd4Il19.fEtE_4yL2uOcZPcG6XkB6-0eHGZIuMbk1HHpx6B1dPeMxMVyzg6pqw28lv3yJfVdtnOY7G9P4IQjCHQyrMk8ImHLBWjW-3cf-XECajfMJISIgx5vmQ-tdk7rxsKOZjs0GjdD-vbCzoD93HwMwvksFb_-W6wLs8LsKErwPWbf_PotajXTDInG5Vyit4NlzLk1ZQWkn8V8FNWgFoXKd5gsHn44IrmR6MPqKXvg_jPxaw_-CDu7tCgvRpCGRR5_Sq3d0AC5sLPh5SJ1w9Mg-m2O7Ec2CCvWYF08VbRo_CEEDbcT2X6nkrzi7vyo6j1YWOc8RCBOB08z6GlHrg_IPipbRBzptRvTKD_4oHfEASInExEu7cxp2Oz0u9Nt7oZEFes3M47CDQJB9qhLweUbS9W_ZK5GQmDuVYA8eY3JUA_rOwcBeBzqZwb8mJpSJUYSofI8JXw37P8GUbj2YQwEAPnFkqbgSd_JIbAILVE7UtIQhmPETb1FpwId78cPbOzObfyJMM3gRdQo5XLSS5qPkz5KJqw2orJBkHC9Ysd9hcSSIl-eJoEBlsngvN4KfWqD5OvV2FHG1PVpEJX-TRLtb18jxnUHLM6Lr55wmLWy2cEFFtUnqPw2uGeF7Wlj6othiWliApZmF1sFjm6wt-Bdn07VIKWhka4klGoTZgP8OytWTc0\" , \"token_type\" : \"Bearer\" } Add the token to your authorization header with type Bearer to each of the following https-requests.","title":"1. Get access-token"},{"location":"samples-cpp/automation.scheduler/index.html#2-create-a-new-task-scheduler-state-must-be-in-config","text":"POST h tt ps : // 192.168.1.1 /au t oma t io n /api/v 1 /scheduler/ tas ks/ { \"cycletime\" : 100000 , \"event\" : \"cyclic\" , \"name\" : \"HelloCallable\" } Only the name is required. The possible task configurations are: Task { name: string (required); // singleton priority: uint32 = 119; // 0=highest .. 139=lowest affinity: uint32 = 0; // cpu affinity 0..3 (max) stacksize: uint32 = 131072; // bytes event: string (required); // e.g. \"cyclic\" cycletime: uint32 = 20000; // microseconds }","title":"2. Create a new task (scheduler state must be in config)"},{"location":"samples-cpp/automation.scheduler/index.html#3-add-the-callable-to-a-task","text":"POST h tt ps : // 192.168.1.1 /au t oma t io n /api/v 1 /scheduler/ tas ks/HelloCallable/program/ { \"arguments\" : [ ], \"index\" : 0 , \"name\" : \"HelloCallableFactory\" } The argumentlist is not necceassary and can be empty. Callable { name: string (required); // singleton (callable factory name) index: uint32 = 0; // call index 1 (highest) to maximum type range (default: 0 = lowest) arguments: [string]; // values to initialize the callable } The response contains the information about the program index: Response: { \"type\" : \"string\" , \"value\" : \"scheduler/tasks/HelloCallable/program/2/\" }","title":"3. Add the callable to a task"},{"location":"samples-cpp/automation.scheduler/index.html#additional-task-informations-are-located-in-the-ctrlx-data-layer","text":"|-- scheduler |-- admin |-- callables-pool |-- groups |-- tasks |-- HelloCallable |-- info |-- program // Contains the programindex, needed to delete the callable from the task |-- properties |-- state |-- watchdog |-- ... To delete a callable from a task, use: DELETE h tt ps : // 192.168.1.1 /au t oma t io n /api/v 1 /scheduler/ tas ks/HelloCallable/program/ 2 To delete a task use: DELETE h tt ps : // 192.168.1.1 /au t oma t io n /api/v 1 /scheduler/ tas ks/HelloCallable","title":"Additional task informations are located in the ctrlX Data Layer"},{"location":"samples-cpp/automation.scheduler/index.html#screenshots","text":"","title":"Screenshots"},{"location":"samples-cpp/automation.scheduler/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-cpp/automation.scheduler/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/datalayer.client/index.html","text":"README datalayer.client \u00b6 The sample app datalayer.client performs Data Layer operations in cpp. Introduction \u00b6 It demonstrates how values of existing nodes at the Data Layer of ctrlX CORE or ctrlX CORE Virtual can be accessed. The sample requires that datalayer.provider.all-data is running or installed first on ctrlX CORE device. Prerequisites \u00b6 Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.2 ctrlX CORE virtual or ctrlX CORE Getting Started \u00b6 Launch IDE (VSCode for example) Open the sample directory samples-cpp/datalayer.client Build and install the snap as described in Setup section Check output in the web interface Troubleshooting \u00b6 All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Client"},{"location":"samples-cpp/datalayer.client/index.html#readme-datalayerclient","text":"The sample app datalayer.client performs Data Layer operations in cpp.","title":"README datalayer.client"},{"location":"samples-cpp/datalayer.client/index.html#introduction","text":"It demonstrates how values of existing nodes at the Data Layer of ctrlX CORE or ctrlX CORE Virtual can be accessed. The sample requires that datalayer.provider.all-data is running or installed first on ctrlX CORE device.","title":"Introduction"},{"location":"samples-cpp/datalayer.client/index.html#prerequisites","text":"Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.2 ctrlX CORE virtual or ctrlX CORE","title":"Prerequisites"},{"location":"samples-cpp/datalayer.client/index.html#getting-started","text":"Launch IDE (VSCode for example) Open the sample directory samples-cpp/datalayer.client Build and install the snap as described in Setup section Check output in the web interface","title":"Getting Started"},{"location":"samples-cpp/datalayer.client/index.html#troubleshooting","text":"All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process.","title":"Troubleshooting"},{"location":"samples-cpp/datalayer.client/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-cpp/datalayer.client/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/datalayer.ecat.io/index.html","text":"README datalayer.client \u00b6 The sample app datalayer.ecat.io toggles some Fieldbus I/O's. Introduction \u00b6 It demonstrate how it is possible to read inputs and write outputs. It starts to toggle the outputs while the first channel of the input is set to true. Prerequisites \u00b6 Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Verision > 1.4 ctrlX CORE ctrlX EtherCAT Master App ctrlX I/O Engineering S20-EC-BK S20-DI-16 S20-DO-16 Getting Started \u00b6 Launch IDE (VSCode for example) Open the sample directory samples-cpp/datalayer.ecat.io Build and install the snap as described Setup section Check the I/O's Screenshots \u00b6 Troubleshooting \u00b6 All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer EtherCAT I/O's"},{"location":"samples-cpp/datalayer.ecat.io/index.html#readme-datalayerclient","text":"The sample app datalayer.ecat.io toggles some Fieldbus I/O's.","title":"README datalayer.client"},{"location":"samples-cpp/datalayer.ecat.io/index.html#introduction","text":"It demonstrate how it is possible to read inputs and write outputs. It starts to toggle the outputs while the first channel of the input is set to true.","title":"Introduction"},{"location":"samples-cpp/datalayer.ecat.io/index.html#prerequisites","text":"Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Verision > 1.4 ctrlX CORE ctrlX EtherCAT Master App ctrlX I/O Engineering S20-EC-BK S20-DI-16 S20-DO-16","title":"Prerequisites"},{"location":"samples-cpp/datalayer.ecat.io/index.html#getting-started","text":"Launch IDE (VSCode for example) Open the sample directory samples-cpp/datalayer.ecat.io Build and install the snap as described Setup section Check the I/O's","title":"Getting Started"},{"location":"samples-cpp/datalayer.ecat.io/index.html#screenshots","text":"","title":"Screenshots"},{"location":"samples-cpp/datalayer.ecat.io/index.html#troubleshooting","text":"All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process.","title":"Troubleshooting"},{"location":"samples-cpp/datalayer.ecat.io/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-cpp/datalayer.ecat.io/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/datalayer.provider.all-data/index.html","text":"AllDataProvider App \u00b6 This cpp sample app is a Data Layer Provider which can be used in two wayes: As a sample how in cpp variables of different data types can be involved into Data Layer Variants. As a test Data Layer Provider during development of a Data Layer Client. These client apps can be written in one of the SDK supported languages or can be Node-RED or REST API applications. Introduction \u00b6 The AllDataProvider creates two Data Layer branches: all-data/dynamic and all-data/static . The branches are providing sub nodes for most of the Data Layer Variant types. The static branch and its nodes cannot be changed by Data Layer Client interactions. It can be used to read data and to test the min and max data values within the own application. The dynamic branch however is changeable. Nodes can be written or even deleted by clients. Furthermore new nodes or whole sub branches can be created. Pre-requisites \u00b6 Build Environment: Ubuntu 18.4 installed on WSL or Virtual Box VM ctrlX AUTOMATION SDK Version 1.8 ctrlX CORE virtual or ctrlX CORE Getting Started \u00b6 Launch IDE (VSCode for example) Open the sample directory public/samples-cpp/datalayer.provider.all-data Build and install the snap as described in Setup section Check output in the web interface Implementation \u00b6 main.cpp \u00b6 The main function establishes the Data Layer connection. If the app is running within a snap on the ctrlX a IPC connection is used automatically. This connection doesn't need user credentials. For a debugging session or in remote mode a tcp connection which need user credentials and an address is used. Therefore in the code user, password and address are predefined with default values. Important: Do NOT use this default values! * Add a separate user/password for this app in your ctrlX and change values in the code. * Check the IP address of your ctrlX and change the value in the code if it is different. Hint: Use 127.0.0.1 as address if you are working with a ctrlX CORE virtual connected with Port Forwarding. DataContainer Class \u00b6 DataContainer is a simple data container class representing the data and error state of a node seen in the dynamic and/or static branch. ProviderNodeAllData Class \u00b6 ProviderNodeAllData is a IProviderNode implementation and provides a Data Layer sub branch. The sub branch can be static or dynamic. Static means that the values of the nodes and the structure of he branch cannot be changed by Data Layer clients. In a dynmic branch everthing kann be changed. All nodes of such a sub branch are 'virtual' because the node behind is always the same ProviderNodeAllData instance. Therefore it registers itself with a wildcard address (e.g. all-data/dynamic/**) at the Data Layer. The 'seen' nodes are DataContainer instances managed in a list and accessed by the on... callback functions of the ProviderNodeAllData class. Screenshots \u00b6 Troubleshooting \u00b6 All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer All Data Provider"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#alldataprovider-app","text":"This cpp sample app is a Data Layer Provider which can be used in two wayes: As a sample how in cpp variables of different data types can be involved into Data Layer Variants. As a test Data Layer Provider during development of a Data Layer Client. These client apps can be written in one of the SDK supported languages or can be Node-RED or REST API applications.","title":"AllDataProvider App"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#introduction","text":"The AllDataProvider creates two Data Layer branches: all-data/dynamic and all-data/static . The branches are providing sub nodes for most of the Data Layer Variant types. The static branch and its nodes cannot be changed by Data Layer Client interactions. It can be used to read data and to test the min and max data values within the own application. The dynamic branch however is changeable. Nodes can be written or even deleted by clients. Furthermore new nodes or whole sub branches can be created.","title":"Introduction"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#pre-requisites","text":"Build Environment: Ubuntu 18.4 installed on WSL or Virtual Box VM ctrlX AUTOMATION SDK Version 1.8 ctrlX CORE virtual or ctrlX CORE","title":"Pre-requisites"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#getting-started","text":"Launch IDE (VSCode for example) Open the sample directory public/samples-cpp/datalayer.provider.all-data Build and install the snap as described in Setup section Check output in the web interface","title":"Getting Started"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#implementation","text":"","title":"Implementation"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#maincpp","text":"The main function establishes the Data Layer connection. If the app is running within a snap on the ctrlX a IPC connection is used automatically. This connection doesn't need user credentials. For a debugging session or in remote mode a tcp connection which need user credentials and an address is used. Therefore in the code user, password and address are predefined with default values. Important: Do NOT use this default values! * Add a separate user/password for this app in your ctrlX and change values in the code. * Check the IP address of your ctrlX and change the value in the code if it is different. Hint: Use 127.0.0.1 as address if you are working with a ctrlX CORE virtual connected with Port Forwarding.","title":"main.cpp"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#datacontainer-class","text":"DataContainer is a simple data container class representing the data and error state of a node seen in the dynamic and/or static branch.","title":"DataContainer Class"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#providernodealldata-class","text":"ProviderNodeAllData is a IProviderNode implementation and provides a Data Layer sub branch. The sub branch can be static or dynamic. Static means that the values of the nodes and the structure of he branch cannot be changed by Data Layer clients. In a dynmic branch everthing kann be changed. All nodes of such a sub branch are 'virtual' because the node behind is always the same ProviderNodeAllData instance. Therefore it registers itself with a wildcard address (e.g. all-data/dynamic/**) at the Data Layer. The 'seen' nodes are DataContainer instances managed in a list and accessed by the on... callback functions of the ProviderNodeAllData class.","title":"ProviderNodeAllData Class"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#screenshots","text":"","title":"Screenshots"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#troubleshooting","text":"All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process.","title":"Troubleshooting"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/datalayer.realtime/index.html","text":"README datalayer.realtime \u00b6 The sample app datalayer.realtime shows the realtime access via the ctrlX Data Layer. Introduction \u00b6 It demonstrates how you can provide some realtime data (memory owner) and work with these data (memory user). The memory owner creates some input and output memory and defines the layout of the memory map. The memory user can read input and write output . When the user has written outputs once, the owner will start copying from output to input. Prerequisites \u00b6 Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.6 ctrlX CORE virtual or ctrlX CORE Getting Started \u00b6 Launch IDE (VSCode for example) Open the sample directory samples-cpp/datalayer.realtime Build and install the snap as described Setup section Check output in the web interface Screenshots \u00b6 Troubleshooting \u00b6 All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Realtime"},{"location":"samples-cpp/datalayer.realtime/index.html#readme-datalayerrealtime","text":"The sample app datalayer.realtime shows the realtime access via the ctrlX Data Layer.","title":"README datalayer.realtime"},{"location":"samples-cpp/datalayer.realtime/index.html#introduction","text":"It demonstrates how you can provide some realtime data (memory owner) and work with these data (memory user). The memory owner creates some input and output memory and defines the layout of the memory map. The memory user can read input and write output . When the user has written outputs once, the owner will start copying from output to input.","title":"Introduction"},{"location":"samples-cpp/datalayer.realtime/index.html#prerequisites","text":"Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.6 ctrlX CORE virtual or ctrlX CORE","title":"Prerequisites"},{"location":"samples-cpp/datalayer.realtime/index.html#getting-started","text":"Launch IDE (VSCode for example) Open the sample directory samples-cpp/datalayer.realtime Build and install the snap as described Setup section Check output in the web interface","title":"Getting Started"},{"location":"samples-cpp/datalayer.realtime/index.html#screenshots","text":"","title":"Screenshots"},{"location":"samples-cpp/datalayer.realtime/index.html#troubleshooting","text":"All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process.","title":"Troubleshooting"},{"location":"samples-cpp/datalayer.realtime/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-cpp/datalayer.realtime/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/datalayer.register.node/index.html","text":"README datalayer.register.node \u00b6 The sample app datalayer.register.node creates a new provider with node ' myData ' and different type elements to the ctrlX Data Layer. Introduction \u00b6 It demonstrates how you can create a node with data elements to ctrlX CORE or ctrlx CORE Virtual Data Layer. These elements can be accessed by a client app (e.g. sample app datalayer.client) a data provider -> registernode (snap name) a data client -> datalayerclient (snap name) can be used to change the values of provided nodes of datalayer.register.node Pre-requisites \u00b6 Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.2 ctrlX CORE virtual or ctrlX CORE Getting Started \u00b6 Launch IDE (VSCode for example) Open the sample directory samples-cpp/datalayer.register.node Build and install the snap as described Setup section Check output in the web interface Screenshots \u00b6 Troubleshooting \u00b6 All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer RegisterNode"},{"location":"samples-cpp/datalayer.register.node/index.html#readme-datalayerregisternode","text":"The sample app datalayer.register.node creates a new provider with node ' myData ' and different type elements to the ctrlX Data Layer.","title":"README datalayer.register.node"},{"location":"samples-cpp/datalayer.register.node/index.html#introduction","text":"It demonstrates how you can create a node with data elements to ctrlX CORE or ctrlx CORE Virtual Data Layer. These elements can be accessed by a client app (e.g. sample app datalayer.client) a data provider -> registernode (snap name) a data client -> datalayerclient (snap name) can be used to change the values of provided nodes of datalayer.register.node","title":"Introduction"},{"location":"samples-cpp/datalayer.register.node/index.html#pre-requisites","text":"Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.2 ctrlX CORE virtual or ctrlX CORE","title":"Pre-requisites"},{"location":"samples-cpp/datalayer.register.node/index.html#getting-started","text":"Launch IDE (VSCode for example) Open the sample directory samples-cpp/datalayer.register.node Build and install the snap as described Setup section Check output in the web interface","title":"Getting Started"},{"location":"samples-cpp/datalayer.register.node/index.html#screenshots","text":"","title":"Screenshots"},{"location":"samples-cpp/datalayer.register.node/index.html#troubleshooting","text":"All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process.","title":"Troubleshooting"},{"location":"samples-cpp/datalayer.register.node/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-cpp/datalayer.register.node/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/diagnostics.logbook/index.html","text":"README \u00b6 The sample App diaglogbook demonstates how messages are sent to journald and the CtrlX Diagnostics Logbook. Prerequisites \u00b6 Build environment WSL or Virtual Box ctrlX AUTOMATION SDK ctrlX CORE virtual or ctrlX CORE The using of Linux Kernel Log Levels \u00b6 We recommend to use Linux log levels to define the severity of a log message. There are eight log levels defined by the Linux kernel: EMERGENCY The system is unusable (and will be shut down) ALERT There is a severe error, action must be taken immediately CRITICAL There is a critical error ERROR A job was aborted in case of an error WARNING There is an abnormal condition but the actual job can be finished NOTICE There is a normal but significant condition INFO A messages informs about an internal state DEBUG Message shows details regarding program flow or results Be carefull with level EMERGENCY: Messages with this level are sent to all consoles! Getting Started \u00b6 Launch IDE (VSCode for example) Open the sample directory samples-cpp/diagnostics.logbook Build and install the snap as described Setup section Check output in the web interface Troubleshooting \u00b6 All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Community License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Diagnostics Logbook"},{"location":"samples-cpp/diagnostics.logbook/index.html#readme","text":"The sample App diaglogbook demonstates how messages are sent to journald and the CtrlX Diagnostics Logbook.","title":"README"},{"location":"samples-cpp/diagnostics.logbook/index.html#prerequisites","text":"Build environment WSL or Virtual Box ctrlX AUTOMATION SDK ctrlX CORE virtual or ctrlX CORE","title":"Prerequisites"},{"location":"samples-cpp/diagnostics.logbook/index.html#the-using-of-linux-kernel-log-levels","text":"We recommend to use Linux log levels to define the severity of a log message. There are eight log levels defined by the Linux kernel: EMERGENCY The system is unusable (and will be shut down) ALERT There is a severe error, action must be taken immediately CRITICAL There is a critical error ERROR A job was aborted in case of an error WARNING There is an abnormal condition but the actual job can be finished NOTICE There is a normal but significant condition INFO A messages informs about an internal state DEBUG Message shows details regarding program flow or results Be carefull with level EMERGENCY: Messages with this level are sent to all consoles!","title":"The using of Linux Kernel  Log Levels"},{"location":"samples-cpp/diagnostics.logbook/index.html#getting-started","text":"Launch IDE (VSCode for example) Open the sample directory samples-cpp/diagnostics.logbook Build and install the snap as described Setup section Check output in the web interface","title":"Getting Started"},{"location":"samples-cpp/diagnostics.logbook/index.html#troubleshooting","text":"All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process.","title":"Troubleshooting"},{"location":"samples-cpp/diagnostics.logbook/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Community","title":"Support"},{"location":"samples-cpp/diagnostics.logbook/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/hello.plc/index.html","text":"README hello.plc \u00b6 The sample project hello.plc shows the write access to some ctrlX PLC variables as: a datalayer client on ctrlX CORE or ctrlX CORE Virtual Introduction \u00b6 When the app has been started, all variables from the PLC program \"PLC_PRG\" that are present in the PLC symbol configuration will be read out. Then the following is executed once: the value \"HelloDeveloper\" is written to each variable of type STRING. the value \"1337\" is written to each variable of type INT16 (ctrlX-Plc: INT). the value \"0.815f\" is written in each variable of type FLOAT32 (ctrlX-Plc: REAL). All other data types are ignored. Pre-requisites \u00b6 Buildenvironment WSL or Virtual Box This sample requires the snap rexroth-plc installed on ctrlX CORE device. Prepare a PLC Program with ctrlX PLC Engineering : ( ctrlX PLC Engineering is a desktop program and a part of the ctrlX WORKS installation) make sure that the control is running connect and open the ctrlX CORE web interface from here start the ctrlX PLC Engineering open the default plc-program \"PLC_PRG\" in ctrlX PLC Engineering declare some plc variables with datatype STRING, INT and REAL add the object 'Symbolconfiguration' to your Application open the 'Symbolconfiguration' and select the program 'PLC_PRG' download and start the plc-program to you control Getting Started \u00b6 Setup WSL or VBox Launch IDE (VSCode for example) Open the sample directory samples-cpp/hello.plc Build and install the snap as described Setup section Check output in the web interface Login with ctrlX PLC Engineering and watch the values of the variables. Variables in the PLC program \"PLC_PRG\" that are available in the PLC symbol configuration should have the following values: STRING variables should have the value \"HelloDeveloper\". INTEGER variables should have the value \"1337\" REAL variables should have the value \"0.815f\" Screenshots \u00b6 Declare some plc variables symbolconfiguration PLC_PRG selected Status of the plc-variables before the snap runs Status of the plc-variables after the snap runs Output in diagnosis logbook Troubleshooting \u00b6 All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process. Support \u00b6 If you've found an error in these sample, please file an issue If you've any questions visit the ctrlX AUTOMATION Communitiy Official Documentation \u00b6 https://docs.automation.boschrexroth.com/ License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Hello PLC"},{"location":"samples-cpp/hello.plc/index.html#readme-helloplc","text":"The sample project hello.plc shows the write access to some ctrlX PLC variables as: a datalayer client on ctrlX CORE or ctrlX CORE Virtual","title":"README hello.plc"},{"location":"samples-cpp/hello.plc/index.html#introduction","text":"When the app has been started, all variables from the PLC program \"PLC_PRG\" that are present in the PLC symbol configuration will be read out. Then the following is executed once: the value \"HelloDeveloper\" is written to each variable of type STRING. the value \"1337\" is written to each variable of type INT16 (ctrlX-Plc: INT). the value \"0.815f\" is written in each variable of type FLOAT32 (ctrlX-Plc: REAL). All other data types are ignored.","title":"Introduction"},{"location":"samples-cpp/hello.plc/index.html#pre-requisites","text":"Buildenvironment WSL or Virtual Box This sample requires the snap rexroth-plc installed on ctrlX CORE device. Prepare a PLC Program with ctrlX PLC Engineering : ( ctrlX PLC Engineering is a desktop program and a part of the ctrlX WORKS installation) make sure that the control is running connect and open the ctrlX CORE web interface from here start the ctrlX PLC Engineering open the default plc-program \"PLC_PRG\" in ctrlX PLC Engineering declare some plc variables with datatype STRING, INT and REAL add the object 'Symbolconfiguration' to your Application open the 'Symbolconfiguration' and select the program 'PLC_PRG' download and start the plc-program to you control","title":"Pre-requisites"},{"location":"samples-cpp/hello.plc/index.html#getting-started","text":"Setup WSL or VBox Launch IDE (VSCode for example) Open the sample directory samples-cpp/hello.plc Build and install the snap as described Setup section Check output in the web interface Login with ctrlX PLC Engineering and watch the values of the variables. Variables in the PLC program \"PLC_PRG\" that are available in the PLC symbol configuration should have the following values: STRING variables should have the value \"HelloDeveloper\". INTEGER variables should have the value \"1337\" REAL variables should have the value \"0.815f\"","title":"Getting Started"},{"location":"samples-cpp/hello.plc/index.html#screenshots","text":"Declare some plc variables symbolconfiguration PLC_PRG selected Status of the plc-variables before the snap runs Status of the plc-variables after the snap runs Output in diagnosis logbook","title":"Screenshots"},{"location":"samples-cpp/hello.plc/index.html#troubleshooting","text":"All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process.","title":"Troubleshooting"},{"location":"samples-cpp/hello.plc/index.html#support","text":"If you've found an error in these sample, please file an issue If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-cpp/hello.plc/index.html#official-documentation","text":"https://docs.automation.boschrexroth.com/","title":"Official Documentation"},{"location":"samples-cpp/hello.plc/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/hello.world/index.html","text":"README hello.world \u00b6 The sample hello.world print out \"Hello World\" on CtrlX CORE. Introduction \u00b6 This sample demonstrates how you can build your first c/c++ snap. The project hello.world provides a simple application example to print out \"Hello World\" in CtrlX CORE devices: CtrlX CORE or CtrlX CORE Virtual. Prerequisites \u00b6 Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.2 ctrlX CORE virtual or ctrlX CORE Getting Started \u00b6 Launch IDE (VSCode for example) Open the sample directory samples-cpp/hello.world Build and install the snap as described Setup section Check output in the web interface Troubleshooting \u00b6 All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Community License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Hello World"},{"location":"samples-cpp/hello.world/index.html#readme-helloworld","text":"The sample hello.world print out \"Hello World\" on CtrlX CORE.","title":"README hello.world"},{"location":"samples-cpp/hello.world/index.html#introduction","text":"This sample demonstrates how you can build your first c/c++ snap. The project hello.world provides a simple application example to print out \"Hello World\" in CtrlX CORE devices: CtrlX CORE or CtrlX CORE Virtual.","title":"Introduction"},{"location":"samples-cpp/hello.world/index.html#prerequisites","text":"Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1.2 ctrlX CORE virtual or ctrlX CORE","title":"Prerequisites"},{"location":"samples-cpp/hello.world/index.html#getting-started","text":"Launch IDE (VSCode for example) Open the sample directory samples-cpp/hello.world Build and install the snap as described Setup section Check output in the web interface","title":"Getting Started"},{"location":"samples-cpp/hello.world/index.html#troubleshooting","text":"All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process.","title":"Troubleshooting"},{"location":"samples-cpp/hello.world/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Community","title":"Support"},{"location":"samples-cpp/hello.world/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-go/index.html","text":"Go Samples \u00b6 Find out the supported samples \u00b6 \"Hello Webserver\" \"AppData\"","title":"Go Samples"},{"location":"samples-go/index.html#go-samples","text":"","title":"Go Samples"},{"location":"samples-go/index.html#find-out-the-supported-samples","text":"\"Hello Webserver\" \"AppData\"","title":"Find out the supported samples"},{"location":"samples-go/appdata/index.html","text":"README Go appdata \u00b6 The Go sample app appdata shows how to persist application data in ctrlX environment using an HTTP Listener. Please read the available HOW-TO persist your app data documention for details. Introduction \u00b6 This sample shows how to load and save data according to ctrlx storage concept. Description \u00b6 Use the ctrlX App Data storage for your application data persistence. Getting Started \u00b6 Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory appdata . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-go-appdata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-go-appdata.app -f | more Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021, Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"AppData File Storage"},{"location":"samples-go/appdata/index.html#readme-go-appdata","text":"The Go sample app appdata shows how to persist application data in ctrlX environment using an HTTP Listener. Please read the available HOW-TO persist your app data documention for details.","title":"README Go appdata"},{"location":"samples-go/appdata/index.html#introduction","text":"This sample shows how to load and save data according to ctrlx storage concept.","title":"Introduction"},{"location":"samples-go/appdata/index.html#description","text":"Use the ctrlX App Data storage for your application data persistence.","title":"Description"},{"location":"samples-go/appdata/index.html#getting-started","text":"Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory appdata . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-go-appdata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-go-appdata.app -f | more","title":"Getting Started"},{"location":"samples-go/appdata/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-go/appdata/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-go/appdata/index.html#support","text":"","title":"Support"},{"location":"samples-go/appdata/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-go/appdata/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-go/appdata/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-go/appdata/index.html#license","text":"MIT License Copyright (c) 2021, Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-go/appdata/assets/index.html","text":"/assets \u00b6 Other assets to go along with your repository (images, logos, etc).","title":"`/assets`"},{"location":"samples-go/appdata/assets/index.html#assets","text":"Other assets to go along with your repository (images, logos, etc).","title":"/assets"},{"location":"samples-go/appdata/cmd/index.html","text":"/cmd \u00b6 Main applications for this project. The directory name for each application should match the name of the executable you want to have (e.g., /cmd/myapp ). Don't put a lot of code in the application directory. If you think the code can be imported and used in other projects, then it should live in the /pkg directory. If the code is not reusable or if you don't want others to reuse it, put that code in the /internal directory. You'll be surprised what others will do, so be explicit about your intentions! It's common to have a small main function that imports and invokes the code from the /internal and /pkg directories and nothing else. Examples: https://github.com/heptio/ark/tree/master/cmd (just a really small main function with everything else in packages) https://github.com/moby/moby/tree/master/cmd https://github.com/prometheus/prometheus/tree/master/cmd https://github.com/influxdata/influxdb/tree/master/cmd https://github.com/kubernetes/kubernetes/tree/master/cmd https://github.com/satellity/satellity/tree/master/cmd/satellity https://github.com/dapr/dapr/tree/master/cmd","title":"`/cmd`"},{"location":"samples-go/appdata/cmd/index.html#cmd","text":"Main applications for this project. The directory name for each application should match the name of the executable you want to have (e.g., /cmd/myapp ). Don't put a lot of code in the application directory. If you think the code can be imported and used in other projects, then it should live in the /pkg directory. If the code is not reusable or if you don't want others to reuse it, put that code in the /internal directory. You'll be surprised what others will do, so be explicit about your intentions! It's common to have a small main function that imports and invokes the code from the /internal and /pkg directories and nothing else. Examples: https://github.com/heptio/ark/tree/master/cmd (just a really small main function with everything else in packages) https://github.com/moby/moby/tree/master/cmd https://github.com/prometheus/prometheus/tree/master/cmd https://github.com/influxdata/influxdb/tree/master/cmd https://github.com/kubernetes/kubernetes/tree/master/cmd https://github.com/satellity/satellity/tree/master/cmd/satellity https://github.com/dapr/dapr/tree/master/cmd","title":"/cmd"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html","text":"jwt-go \u00b6 A go (or 'golang' for search engine friendliness) implementation of JSON Web Tokens NEW VERSION COMING: There have been a lot of improvements suggested since the version 3.0.0 released in 2016. I'm working now on cutting two different releases: 3.2.0 will contain any non-breaking changes or enhancements. 4.0.0 will follow shortly which will include breaking changes. See the 4.0.0 milestone to get an idea of what's coming. If you have other ideas, or would like to participate in 4.0.0, now's the time. If you depend on this library and don't want to be interrupted, I recommend you use your dependency mangement tool to pin to version 3. SECURITY NOTICE: Some older versions of Go have a security issue in the cryotp/elliptic. Recommendation is to upgrade to at least 1.8.3. See issue #216 for more detail. SECURITY NOTICE: It's important that you validate the alg presented is what you expect . This library attempts to make it easy to do the right thing by requiring key types match the expected alg, but you should take the extra step to verify it in your usage. See the examples provided. What the heck is a JWT? \u00b6 JWT.io has a great introduction to JSON Web Tokens. In short, it's a signed JSON object that does something useful (for example, authentication). It's commonly used for Bearer tokens in Oauth 2. A token is made of three parts, separated by . 's. The first two parts are JSON objects, that have been base64url encoded. The last part is the signature, encoded the same way. The first part is called the header. It contains the necessary information for verifying the last part, the signature. For example, which encryption method was used for signing and what key was used. The part in the middle is the interesting bit. It's called the Claims and contains the actual stuff you care about. Refer to the RFC for information about reserved keys and the proper way to add your own. What's in the box? \u00b6 This library supports the parsing and verification as well as the generation and signing of JWTs. Current supported signing algorithms are HMAC SHA, RSA, RSA-PSS, and ECDSA, though hooks are present for adding your own. Examples \u00b6 See the project documentation for examples of usage: Simple example of parsing and validating a token Simple example of building and signing a token Directory of Examples Extensions \u00b6 This library publishes all the necessary components for adding your own signing methods. Simply implement the SigningMethod interface and register a factory method using RegisterSigningMethod . Here's an example of an extension that integrates with the Google App Engine signing tools: https://github.com/someone1/gcp-jwt-go Compliance \u00b6 This library was last reviewed to comply with RTF 7519 dated May 2015 with a few notable differences: In order to protect against accidental use of Unsecured JWTs , tokens using alg=none will only be accepted if the constant jwt.UnsafeAllowNoneSignatureType is provided as the key. Project Status & Versioning \u00b6 This library is considered production ready. Feedback and feature requests are appreciated. The API should be considered stable. There should be very few backwards-incompatible changes outside of major version updates (and only with good reason). This project uses Semantic Versioning 2.0.0 . Accepted pull requests will land on master . Periodically, versions will be tagged from master . You can find all the releases on the project releases page . While we try to make it obvious when we make breaking changes, there isn't a great mechanism for pushing announcements out to users. You may want to use this alternative package include: gopkg.in/dgrijalva/jwt-go.v3 . It will do the right thing WRT semantic versioning. BREAKING CHANGES: * * Version 3.0.0 includes a lot of changes from the 2.x line, including a few that break the API. We've tried to break as few things as possible, so there should just be a few type signature changes. A full list of breaking changes is available in VERSION_HISTORY.md . See MIGRATION_GUIDE.md for more information on updating your code. Usage Tips \u00b6 Signing vs Encryption \u00b6 A token is simply a JSON object that is signed by its author. this tells you exactly two things about the data: The author of the token was in the possession of the signing secret The data has not been modified since it was signed It's important to know that JWT does not provide encryption, which means anyone who has access to the token can read its contents. If you need to protect (encrypt) the data, there is a companion spec, JWE , that provides this functionality. JWE is currently outside the scope of this library. Choosing a Signing Method \u00b6 There are several signing methods available, and you should probably take the time to learn about the various options before choosing one. The principal design decision is most likely going to be symmetric vs asymmetric. Symmetric signing methods, such as HSA, use only a single secret. This is probably the simplest signing method to use since any []byte can be used as a valid secret. They are also slightly computationally faster to use, though this rarely is enough to matter. Symmetric signing methods work the best when both producers and consumers of tokens are trusted, or even the same system. Since the same secret is used to both sign and validate tokens, you can't easily distribute the key for validation. Asymmetric signing methods, such as RSA, use different keys for signing and verifying tokens. This makes it possible to produce tokens with a private key, and allow any consumer to access the public key for verification. Signing Methods and Key Types \u00b6 Each signing method expects a different object type for its signing keys. See the package documentation for details. Here are the most common ones: The HMAC signing method ( HS256 , HS384 , HS512 ) expect []byte values for signing and validation The RSA signing method ( RS256 , RS384 , RS512 ) expect *rsa.PrivateKey for signing and *rsa.PublicKey for validation The ECDSA signing method ( ES256 , ES384 , ES512 ) expect *ecdsa.PrivateKey for signing and *ecdsa.PublicKey for validation JWT and OAuth \u00b6 It's worth mentioning that OAuth and JWT are not the same thing. A JWT token is simply a signed JSON object. It can be used anywhere such a thing is useful. There is some confusion, though, as JWT is the most common type of bearer token used in OAuth2 authentication. Without going too far down the rabbit hole, here's a description of the interaction of these technologies: OAuth is a protocol for allowing an identity provider to be separate from the service a user is logging in to. For example, whenever you use Facebook to log into a different service (Yelp, Spotify, etc), you are using OAuth. OAuth defines several options for passing around authentication data. One popular method is called a \"bearer token\". A bearer token is simply a string that should only be held by an authenticated user. Thus, simply presenting this token proves your identity. You can probably derive from here why a JWT might make a good bearer token. Because bearer tokens are used for authentication, it's important they're kept secret. This is why transactions that use bearer tokens typically happen over SSL. More \u00b6 Documentation can be found on godoc.org . The command line utility included in this project (cmd/jwt) provides a straightforward example of token creation and parsing as well as a useful tool for debugging your own integration. You'll also find several implementation examples in the documentation.","title":"jwt-go"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#jwt-go","text":"A go (or 'golang' for search engine friendliness) implementation of JSON Web Tokens NEW VERSION COMING: There have been a lot of improvements suggested since the version 3.0.0 released in 2016. I'm working now on cutting two different releases: 3.2.0 will contain any non-breaking changes or enhancements. 4.0.0 will follow shortly which will include breaking changes. See the 4.0.0 milestone to get an idea of what's coming. If you have other ideas, or would like to participate in 4.0.0, now's the time. If you depend on this library and don't want to be interrupted, I recommend you use your dependency mangement tool to pin to version 3. SECURITY NOTICE: Some older versions of Go have a security issue in the cryotp/elliptic. Recommendation is to upgrade to at least 1.8.3. See issue #216 for more detail. SECURITY NOTICE: It's important that you validate the alg presented is what you expect . This library attempts to make it easy to do the right thing by requiring key types match the expected alg, but you should take the extra step to verify it in your usage. See the examples provided.","title":"jwt-go"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#what-the-heck-is-a-jwt","text":"JWT.io has a great introduction to JSON Web Tokens. In short, it's a signed JSON object that does something useful (for example, authentication). It's commonly used for Bearer tokens in Oauth 2. A token is made of three parts, separated by . 's. The first two parts are JSON objects, that have been base64url encoded. The last part is the signature, encoded the same way. The first part is called the header. It contains the necessary information for verifying the last part, the signature. For example, which encryption method was used for signing and what key was used. The part in the middle is the interesting bit. It's called the Claims and contains the actual stuff you care about. Refer to the RFC for information about reserved keys and the proper way to add your own.","title":"What the heck is a JWT?"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#whats-in-the-box","text":"This library supports the parsing and verification as well as the generation and signing of JWTs. Current supported signing algorithms are HMAC SHA, RSA, RSA-PSS, and ECDSA, though hooks are present for adding your own.","title":"What's in the box?"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#examples","text":"See the project documentation for examples of usage: Simple example of parsing and validating a token Simple example of building and signing a token Directory of Examples","title":"Examples"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#extensions","text":"This library publishes all the necessary components for adding your own signing methods. Simply implement the SigningMethod interface and register a factory method using RegisterSigningMethod . Here's an example of an extension that integrates with the Google App Engine signing tools: https://github.com/someone1/gcp-jwt-go","title":"Extensions"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#compliance","text":"This library was last reviewed to comply with RTF 7519 dated May 2015 with a few notable differences: In order to protect against accidental use of Unsecured JWTs , tokens using alg=none will only be accepted if the constant jwt.UnsafeAllowNoneSignatureType is provided as the key.","title":"Compliance"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#project-status-versioning","text":"This library is considered production ready. Feedback and feature requests are appreciated. The API should be considered stable. There should be very few backwards-incompatible changes outside of major version updates (and only with good reason). This project uses Semantic Versioning 2.0.0 . Accepted pull requests will land on master . Periodically, versions will be tagged from master . You can find all the releases on the project releases page . While we try to make it obvious when we make breaking changes, there isn't a great mechanism for pushing announcements out to users. You may want to use this alternative package include: gopkg.in/dgrijalva/jwt-go.v3 . It will do the right thing WRT semantic versioning. BREAKING CHANGES: * * Version 3.0.0 includes a lot of changes from the 2.x line, including a few that break the API. We've tried to break as few things as possible, so there should just be a few type signature changes. A full list of breaking changes is available in VERSION_HISTORY.md . See MIGRATION_GUIDE.md for more information on updating your code.","title":"Project Status &amp; Versioning"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#usage-tips","text":"","title":"Usage Tips"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#signing-vs-encryption","text":"A token is simply a JSON object that is signed by its author. this tells you exactly two things about the data: The author of the token was in the possession of the signing secret The data has not been modified since it was signed It's important to know that JWT does not provide encryption, which means anyone who has access to the token can read its contents. If you need to protect (encrypt) the data, there is a companion spec, JWE , that provides this functionality. JWE is currently outside the scope of this library.","title":"Signing vs Encryption"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#choosing-a-signing-method","text":"There are several signing methods available, and you should probably take the time to learn about the various options before choosing one. The principal design decision is most likely going to be symmetric vs asymmetric. Symmetric signing methods, such as HSA, use only a single secret. This is probably the simplest signing method to use since any []byte can be used as a valid secret. They are also slightly computationally faster to use, though this rarely is enough to matter. Symmetric signing methods work the best when both producers and consumers of tokens are trusted, or even the same system. Since the same secret is used to both sign and validate tokens, you can't easily distribute the key for validation. Asymmetric signing methods, such as RSA, use different keys for signing and verifying tokens. This makes it possible to produce tokens with a private key, and allow any consumer to access the public key for verification.","title":"Choosing a Signing Method"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#signing-methods-and-key-types","text":"Each signing method expects a different object type for its signing keys. See the package documentation for details. Here are the most common ones: The HMAC signing method ( HS256 , HS384 , HS512 ) expect []byte values for signing and validation The RSA signing method ( RS256 , RS384 , RS512 ) expect *rsa.PrivateKey for signing and *rsa.PublicKey for validation The ECDSA signing method ( ES256 , ES384 , ES512 ) expect *ecdsa.PrivateKey for signing and *ecdsa.PublicKey for validation","title":"Signing Methods and Key Types"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#jwt-and-oauth","text":"It's worth mentioning that OAuth and JWT are not the same thing. A JWT token is simply a signed JSON object. It can be used anywhere such a thing is useful. There is some confusion, though, as JWT is the most common type of bearer token used in OAuth2 authentication. Without going too far down the rabbit hole, here's a description of the interaction of these technologies: OAuth is a protocol for allowing an identity provider to be separate from the service a user is logging in to. For example, whenever you use Facebook to log into a different service (Yelp, Spotify, etc), you are using OAuth. OAuth defines several options for passing around authentication data. One popular method is called a \"bearer token\". A bearer token is simply a string that should only be held by an authenticated user. Thus, simply presenting this token proves your identity. You can probably derive from here why a JWT might make a good bearer token. Because bearer tokens are used for authentication, it's important they're kept secret. This is why transactions that use bearer tokens typically happen over SSL.","title":"JWT and OAuth"},{"location":"samples-go/appdata/vendor/github.com/dgrijalva/jwt-go/index.html#more","text":"Documentation can be found on godoc.org . The command line utility included in this project (cmd/jwt) provides a straightforward example of token creation and parsing as well as a useful tool for debugging your own integration. You'll also find several implementation examples in the documentation.","title":"More"},{"location":"samples-go/hello.webserver/index.html","text":"Example hello.webserver \u00b6 The sample hello-webserver contains simple webserver. Indroduction \u00b6 Pre-requisites \u00b6 Buildenvironment WSL or Virtual Box ctrlX CORE virtual or ctrlX CORE Getting Started \u00b6 Launch IDE (VSCode for example) Open the sample directory samples-go/hello-webserver Build and install the snap as described in Setup section Check output in the web interface Detailed Informations \u00b6 For the best webserver integration take a look at package-manifest Screenshots \u00b6 Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2020, Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Hello Webserver"},{"location":"samples-go/hello.webserver/index.html#example-hellowebserver","text":"The sample hello-webserver contains simple webserver.","title":"Example hello.webserver"},{"location":"samples-go/hello.webserver/index.html#indroduction","text":"","title":"Indroduction"},{"location":"samples-go/hello.webserver/index.html#pre-requisites","text":"Buildenvironment WSL or Virtual Box ctrlX CORE virtual or ctrlX CORE","title":"Pre-requisites"},{"location":"samples-go/hello.webserver/index.html#getting-started","text":"Launch IDE (VSCode for example) Open the sample directory samples-go/hello-webserver Build and install the snap as described in Setup section Check output in the web interface","title":"Getting Started"},{"location":"samples-go/hello.webserver/index.html#detailed-informations","text":"For the best webserver integration take a look at package-manifest","title":"Detailed Informations"},{"location":"samples-go/hello.webserver/index.html#screenshots","text":"","title":"Screenshots"},{"location":"samples-go/hello.webserver/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-go/hello.webserver/index.html#license","text":"MIT License Copyright (c) 2020, Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/index.html","text":"README .NET 5.0 Apps @ ctrlX \u00b6 Introduction \u00b6 This document describes how to setup up your development environment on Windows for building self-contained ctrlX Apps based on Microsoft .NET 5.0 (dotnet5) runtime . Self-contained means, your App contains an already matching and optimized .NET 5.0 runtime for your target architecture, so there's no need to install any additional .NET 5.0 runtime. All samples generate Apps (snaps) for the targets: ctrlXVirtual (amd64) ctrlX (arm64) Pre-requisites \u00b6 Install/Update Microsoft Visual C++ Redistributable for Visual Studio \u00b6 If you have latest Microsoft Visual Studio including C++ components installed, you can skip this step. Please install the latest Microsoft Visual C++ Redistributable for Visual Studio from here . Install/Update Visual Studio Code (VS Code) \u00b6 The ctrlX App IDE is Microsoft Visual Studio Code . Please ensure having latest version installed on your system from here . Install and Update Windows Subsystem for Linux (WSL) and Ubuntu 18.04 \u00b6 The samples make use of Windows Subsystem for Linux (WSL) Version 18.04 . Please read common SDK help to setup. Also ensure your proxy settings if you're behind a corporate proxy (Settings -> Proxy). After done, please ensure you have the latest Linux environment, by updating your WSL: Open Visual Studio Code Open the Remote Explorer from the menu Connect to your WSL Target Ubuntu-18.04 . Select Open Folder in WSL and navigate to any .NET sample e.g. hello.world Open a new Terminal (Terminal -> New Terminal) Run the following commands in your WSL console sudo apt update sudo apt upgrade Prepare WSL \u00b6 First, we have to prepare WSL to fetch packages of all supported platform architectures. Please search for Dependencies for Crossbuild (Multiarch) here or use the template file provided (please rename your existing to be restored on demand): Open WSL by Windows -> Start wsl Ensure the following content at the end of file /etc/apt/sources.list deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security main restricted # deb-src http://security.ubuntu.com/ubuntu/ bionic-security main restricted deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security universe # deb-src http://security.ubuntu.com/ubuntu/ bionic-security universe deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security multiverse # deb-src http://security.ubuntu.com/ubuntu/ bionic-security multiverse Alternatively you can use the provided template sources.list file and copy it from ./samples.net/docs/files/sources.list to any directory e.g. c:/temp/sources.list After that copy the file from there into WSL sudo cp /mnt/c/temp/sources.list /etc/apt Update the VS Code Server on WSL: Run the following commands in your WSL console code Installation of .NET 5 into WSL \u00b6 The following steps are based on this description Open WSL by Windows -> Start wsl Add the Microsoft package signing key to your list of trusted keys Run the following commands in your WSL console wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Install the .NET SDK Run the following commands in your WSL console sudo apt-get update; \\ sudo apt-get install -y apt-transport-https && \\ sudo apt-get update && \\ sudo apt-get install -y dotnet-sdk-5.0 If you're using ASP.NET , install the ASP.NET Runtime Run the following commands in your WSL console sudo apt-get install -y aspnetcore-runtime-5.0 Check your installed SDK's Run the following command in your WSL console dotnet --list-sdks The output should be something like 5.0.102 [/usr/share/dotnet/sdk] Check your Runtime Run the following command in your WSL console dotnet --list-runtimes The output should be something like Microsoft.NETCore.App 5.0.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App] Prepare NuGet \u00b6 If you're behing a corporate proxy, you have to configure the NuGet Proxy in configuration file: /home/{USERNAME}/.nuget/NuGet/NuGet.Config Edit the NuGet configuration file with your preferred editor or with VS Code and add a config section containing the http_proxy and https_proxy inside the configuration section like shown below. Alternatively you can copy the provided file Open WSL by Windows -> Start wsl Copy the provided file from ./samples.net/docs/files/NuGet.Config to folder /home/{USERNAME}/.nuget/NuGet You can copy it to a temp directory e.g. c:/temp/NuGet.Config After that copy the file from there into WSL sudo cp /mnt/c/temp/NuGet.Config /home/{USERNAME}/.nuget/NuGet Example: The following sample uses the Px Proxy at address http://127.0.0.1:3128. for example: <configuration> <config> <add key= \"http_proxy\" value= \"http://127.0.0.1:3128\" /> <add key= \"https_proxy\" value= \"http://127.0.0.1:3128\" /> </config> ... </configuration> Install the VS Code extensions from Marketplace \u00b6 Finally we have to install some extensions for .NET to be ready for coding. Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open any .NET sample directory (e.g. hello.world). Open Extensions from the menu. Install the C# Extension and press Install on Windows Subsystem for Linux . Building \u00b6 Each sample provides a rich set of tasks for your convenience. Click on Terminal -> Run Task . Choose your preferred task to run. Build (compile) your code \u00b6 Click on Terminal -> Run Task . Choose Task build . Clean your code \u00b6 Click on Terminal -> Run Task . Choose Task clean . Publish your (self-contained) application \u00b6 Click on Terminal -> Run Task . Choose any Task publish * matching your architecture and mode. make snap \u00b6 Click on Terminal -> Run Task . Choose any Task make snap * matching your architecture and mode. Debugging \u00b6 Debug on WSL \u00b6 Just press F5 or Click on the Run from the menu. Choose Run -> .NET Core Launch (console) . Press the green Play button. Debug snap on ctrlXVirtual \u00b6 Click on Terminal -> Run Task . Choose any Task make snap amd64 . Install snap on ctrlXVirtual via ctrlX web interface For debugging snaps see here Debug snap on ctrlX \u00b6 Click on Terminal -> Run Task . Choose any Task make snap arm64 . Install snap on ctrlX via ctrlX web interface For debugging snaps see here Now you're ready to code .NET on ctrlX! Please open any sample directory in WSL using the Remote Explorer and see documentations how to Best Practise \u00b6 Provider Concepts \u00b6 There different concepts to write a Data Layer provider: Create and register nodes with individual node handlers \u00b6 Create a provider, which creates and registers all nodes with an individual node handler n x CreateNode n x Register Node : Handler = 1:1 Recommendation: Use for a small/medium of nodes with individual node handling. Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.provider Create and register nodes with same node handler \u00b6 Create a provider, which creates individual nodes and registers all nodes individually with same node handler. n x CreateNode n x Register Node : Handler = n:1 Recommendation: Use for a small/medium of nodes with common node handling Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No Implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.mqtt datalayer.provider.alldata Virtual provider (lightweight): Register on wildcard and manage virtual nodes \u00b6 Create just one node with a single node handler, registered to a wildcard address (e.g. myroot/**) and managing the nodes for your own. This lightweight handler returns virtual nodes in OnBrowse() method. See Data Layer documentation for details. 1 x CreateNode 1 x Register Node : Handler = n:1 Recommendation: Use for a large/very large or dynamic set of nodes (big data provider). Use if you want to manage the nodes in your application code. Pros: Very efficient. Contras: The Data Layer is not managaging your node hierarchy: You have to return the valid data in OnBrowse() . Samples: datalayer.provider.virtual Pitfalls \u00b6 Arithmetic operators of different integral or foating point types \u00b6 The following operators perform arithmetic operations with operands of numeric types: Unary : ++ (increment), -- (decrement), + (plus), and - (minus) operators Binary : * (multiplication), / (division), % (remainder), + (addition), and - (subtraction) operators Those operators are supported by all integral and floating-point numeric types. In the case of integral types, those operators (except the ++ and -- operators) are defined for the int , uint , long , and ulong types. When operands are of other integral types ( sbyte , byte , short , ushort , or char ), their values are converted to the int type , which is also the result type of an operation. When operands are of different integral or floating-point types, their values are converted to the closest containing type , if such a type exists. For more information, see the Numeric promotions section of the C# language specification. The ++ and -- operators are defined for all integral and floating-point numeric types and the char type. Example : Let' say we just wan't to increment a sbyte Variant value by keeping the data type, we have cast the result after performing the arithmetic operation: sbyte value = 42 ; var oldVariant = new Variant ( value ) var newVariant = new Variant (( sbyte )( oldVariant . ToSByte () + 1 )); Please see here for more informations. Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET 5.0 Apps @ ctrlX"},{"location":"samples-net/index.html#readme-net-50-apps-ctrlx","text":"","title":"README .NET 5.0 Apps @ ctrlX"},{"location":"samples-net/index.html#introduction","text":"This document describes how to setup up your development environment on Windows for building self-contained ctrlX Apps based on Microsoft .NET 5.0 (dotnet5) runtime . Self-contained means, your App contains an already matching and optimized .NET 5.0 runtime for your target architecture, so there's no need to install any additional .NET 5.0 runtime. All samples generate Apps (snaps) for the targets: ctrlXVirtual (amd64) ctrlX (arm64)","title":"Introduction"},{"location":"samples-net/index.html#pre-requisites","text":"","title":"Pre-requisites"},{"location":"samples-net/index.html#installupdate-microsoft-visual-c-redistributable-for-visual-studio","text":"If you have latest Microsoft Visual Studio including C++ components installed, you can skip this step. Please install the latest Microsoft Visual C++ Redistributable for Visual Studio from here .","title":"Install/Update Microsoft Visual C++ Redistributable for Visual Studio"},{"location":"samples-net/index.html#installupdate-visual-studio-code-vs-code","text":"The ctrlX App IDE is Microsoft Visual Studio Code . Please ensure having latest version installed on your system from here .","title":"Install/Update Visual Studio Code (VS Code)"},{"location":"samples-net/index.html#install-and-update-windows-subsystem-for-linux-wsl-and-ubuntu-1804","text":"The samples make use of Windows Subsystem for Linux (WSL) Version 18.04 . Please read common SDK help to setup. Also ensure your proxy settings if you're behind a corporate proxy (Settings -> Proxy). After done, please ensure you have the latest Linux environment, by updating your WSL: Open Visual Studio Code Open the Remote Explorer from the menu Connect to your WSL Target Ubuntu-18.04 . Select Open Folder in WSL and navigate to any .NET sample e.g. hello.world Open a new Terminal (Terminal -> New Terminal) Run the following commands in your WSL console sudo apt update sudo apt upgrade","title":"Install and Update Windows Subsystem for Linux (WSL) and Ubuntu 18.04"},{"location":"samples-net/index.html#prepare-wsl","text":"First, we have to prepare WSL to fetch packages of all supported platform architectures. Please search for Dependencies for Crossbuild (Multiarch) here or use the template file provided (please rename your existing to be restored on demand): Open WSL by Windows -> Start wsl Ensure the following content at the end of file /etc/apt/sources.list deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security main restricted # deb-src http://security.ubuntu.com/ubuntu/ bionic-security main restricted deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security universe # deb-src http://security.ubuntu.com/ubuntu/ bionic-security universe deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ bionic-security multiverse # deb-src http://security.ubuntu.com/ubuntu/ bionic-security multiverse Alternatively you can use the provided template sources.list file and copy it from ./samples.net/docs/files/sources.list to any directory e.g. c:/temp/sources.list After that copy the file from there into WSL sudo cp /mnt/c/temp/sources.list /etc/apt Update the VS Code Server on WSL: Run the following commands in your WSL console code","title":"Prepare WSL"},{"location":"samples-net/index.html#installation-of-net-5-into-wsl","text":"The following steps are based on this description Open WSL by Windows -> Start wsl Add the Microsoft package signing key to your list of trusted keys Run the following commands in your WSL console wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Install the .NET SDK Run the following commands in your WSL console sudo apt-get update; \\ sudo apt-get install -y apt-transport-https && \\ sudo apt-get update && \\ sudo apt-get install -y dotnet-sdk-5.0 If you're using ASP.NET , install the ASP.NET Runtime Run the following commands in your WSL console sudo apt-get install -y aspnetcore-runtime-5.0 Check your installed SDK's Run the following command in your WSL console dotnet --list-sdks The output should be something like 5.0.102 [/usr/share/dotnet/sdk] Check your Runtime Run the following command in your WSL console dotnet --list-runtimes The output should be something like Microsoft.NETCore.App 5.0.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]","title":"Installation of .NET 5 into WSL"},{"location":"samples-net/index.html#prepare-nuget","text":"If you're behing a corporate proxy, you have to configure the NuGet Proxy in configuration file: /home/{USERNAME}/.nuget/NuGet/NuGet.Config Edit the NuGet configuration file with your preferred editor or with VS Code and add a config section containing the http_proxy and https_proxy inside the configuration section like shown below. Alternatively you can copy the provided file Open WSL by Windows -> Start wsl Copy the provided file from ./samples.net/docs/files/NuGet.Config to folder /home/{USERNAME}/.nuget/NuGet You can copy it to a temp directory e.g. c:/temp/NuGet.Config After that copy the file from there into WSL sudo cp /mnt/c/temp/NuGet.Config /home/{USERNAME}/.nuget/NuGet Example: The following sample uses the Px Proxy at address http://127.0.0.1:3128. for example: <configuration> <config> <add key= \"http_proxy\" value= \"http://127.0.0.1:3128\" /> <add key= \"https_proxy\" value= \"http://127.0.0.1:3128\" /> </config> ... </configuration>","title":"Prepare NuGet"},{"location":"samples-net/index.html#install-the-vs-code-extensions-from-marketplace","text":"Finally we have to install some extensions for .NET to be ready for coding. Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open any .NET sample directory (e.g. hello.world). Open Extensions from the menu. Install the C# Extension and press Install on Windows Subsystem for Linux .","title":"Install the VS Code extensions from Marketplace"},{"location":"samples-net/index.html#building","text":"Each sample provides a rich set of tasks for your convenience. Click on Terminal -> Run Task . Choose your preferred task to run.","title":"Building"},{"location":"samples-net/index.html#build-compile-your-code","text":"Click on Terminal -> Run Task . Choose Task build .","title":"Build (compile) your code"},{"location":"samples-net/index.html#clean-your-code","text":"Click on Terminal -> Run Task . Choose Task clean .","title":"Clean your code"},{"location":"samples-net/index.html#publish-your-self-contained-application","text":"Click on Terminal -> Run Task . Choose any Task publish * matching your architecture and mode.","title":"Publish your (self-contained) application"},{"location":"samples-net/index.html#make-snap","text":"Click on Terminal -> Run Task . Choose any Task make snap * matching your architecture and mode.","title":"make snap"},{"location":"samples-net/index.html#debugging","text":"","title":"Debugging"},{"location":"samples-net/index.html#debug-on-wsl","text":"Just press F5 or Click on the Run from the menu. Choose Run -> .NET Core Launch (console) . Press the green Play button.","title":"Debug on WSL"},{"location":"samples-net/index.html#debug-snap-on-ctrlxvirtual","text":"Click on Terminal -> Run Task . Choose any Task make snap amd64 . Install snap on ctrlXVirtual via ctrlX web interface For debugging snaps see here","title":"Debug snap on ctrlXVirtual"},{"location":"samples-net/index.html#debug-snap-on-ctrlx","text":"Click on Terminal -> Run Task . Choose any Task make snap arm64 . Install snap on ctrlX via ctrlX web interface For debugging snaps see here Now you're ready to code .NET on ctrlX! Please open any sample directory in WSL using the Remote Explorer and see documentations how to","title":"Debug snap on ctrlX"},{"location":"samples-net/index.html#best-practise","text":"","title":"Best Practise"},{"location":"samples-net/index.html#provider-concepts","text":"There different concepts to write a Data Layer provider:","title":"Provider Concepts"},{"location":"samples-net/index.html#create-and-register-nodes-with-individual-node-handlers","text":"Create a provider, which creates and registers all nodes with an individual node handler n x CreateNode n x Register Node : Handler = 1:1 Recommendation: Use for a small/medium of nodes with individual node handling. Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.provider","title":"Create and register nodes with individual node handlers"},{"location":"samples-net/index.html#create-and-register-nodes-with-same-node-handler","text":"Create a provider, which creates individual nodes and registers all nodes individually with same node handler. n x CreateNode n x Register Node : Handler = n:1 Recommendation: Use for a small/medium of nodes with common node handling Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No Implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.mqtt datalayer.provider.alldata","title":"Create and register nodes with same node handler"},{"location":"samples-net/index.html#virtual-provider-lightweight-register-on-wildcard-and-manage-virtual-nodes","text":"Create just one node with a single node handler, registered to a wildcard address (e.g. myroot/**) and managing the nodes for your own. This lightweight handler returns virtual nodes in OnBrowse() method. See Data Layer documentation for details. 1 x CreateNode 1 x Register Node : Handler = n:1 Recommendation: Use for a large/very large or dynamic set of nodes (big data provider). Use if you want to manage the nodes in your application code. Pros: Very efficient. Contras: The Data Layer is not managaging your node hierarchy: You have to return the valid data in OnBrowse() . Samples: datalayer.provider.virtual","title":"Virtual provider (lightweight): Register on wildcard and manage virtual nodes"},{"location":"samples-net/index.html#pitfalls","text":"","title":"Pitfalls"},{"location":"samples-net/index.html#arithmetic-operators-of-different-integral-or-foating-point-types","text":"The following operators perform arithmetic operations with operands of numeric types: Unary : ++ (increment), -- (decrement), + (plus), and - (minus) operators Binary : * (multiplication), / (division), % (remainder), + (addition), and - (subtraction) operators Those operators are supported by all integral and floating-point numeric types. In the case of integral types, those operators (except the ++ and -- operators) are defined for the int , uint , long , and ulong types. When operands are of other integral types ( sbyte , byte , short , ushort , or char ), their values are converted to the int type , which is also the result type of an operation. When operands are of different integral or floating-point types, their values are converted to the closest containing type , if such a type exists. For more information, see the Numeric promotions section of the C# language specification. The ++ and -- operators are defined for all integral and floating-point numeric types and the char type. Example : Let' say we just wan't to increment a sbyte Variant value by keeping the data type, we have cast the result after performing the arithmetic operation: sbyte value = 42 ; var oldVariant = new Variant ( value ) var newVariant = new Variant (( sbyte )( oldVariant . ToSByte () + 1 )); Please see here for more informations.","title":"Arithmetic operators of different integral or foating point types"},{"location":"samples-net/index.html#support","text":"","title":"Support"},{"location":"samples-net/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/appdata/index.html","text":"README .NET appdata \u00b6 This .NET sample shows how to persist application data in ctrlX environment using an HTTP Listener. Please read the available HOW-TO persist your app data documention for details. Introduction \u00b6 The sample shows how to load and save data according to ctrlx storage concept. Description \u00b6 Use the ctrlX App Data storage for your application data persistence. Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory appdata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-appdata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-appdata.app -f | more Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET appdata"},{"location":"samples-net/appdata/index.html#readme-net-appdata","text":"This .NET sample shows how to persist application data in ctrlX environment using an HTTP Listener. Please read the available HOW-TO persist your app data documention for details.","title":"README .NET appdata"},{"location":"samples-net/appdata/index.html#introduction","text":"The sample shows how to load and save data according to ctrlx storage concept.","title":"Introduction"},{"location":"samples-net/appdata/index.html#description","text":"Use the ctrlX App Data storage for your application data persistence.","title":"Description"},{"location":"samples-net/appdata/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/appdata/index.html#getting-started","text":"Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory appdata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-appdata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-appdata.app -f | more","title":"Getting Started"},{"location":"samples-net/appdata/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/appdata/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/appdata/index.html#support","text":"","title":"Support"},{"location":"samples-net/appdata/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/appdata/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/appdata/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/appdata/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.client/index.html","text":"README .NET datalayer.client \u00b6 This .NET sample reads values from ctrlX Data Layer. Introduction \u00b6 The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop. Description \u00b6 The following code shows the main method with inline documentation: Program.cs Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.client . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-client.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-client.app -f | more Console Output \u00b6 Running inside snap: True ctrlX Data Layer system started. ctrlX Data Layer client created. Client connected: True 10 .03.2021 09 :15:10, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 10 :15:12, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:11, framework/metrics/system/cpu-utilisation-percent: 13 ,6 ( subscription ) 10 .03.2021 09 :15:12, framework/metrics/system/cpu-utilisation-percent: 2 ,5 ( subscription ) 10 .03.2021 09 :15:13, framework/metrics/system/cpu-utilisation-percent: 7 ,4 ( subscription ) 10 .03.2021 09 :15:14, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:15, framework/metrics/system/cpu-utilisation-percent: 3 ,7 ( subscription ) 10 .03.2021 09 :15:16, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:18, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:19, framework/metrics/system/cpu-utilisation-percent: 7 ,2 ( subscription ) 10 .03.2021 09 :15:20, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 10 :15:22, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:21, framework/metrics/system/cpu-utilisation-percent: 5 ( subscription ) 10 .03.2021 09 :15:22, framework/metrics/system/cpu-utilisation-percent: 7 ,3 ( subscription ) 10 .03.2021 09 :15:23, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:24, framework/metrics/system/cpu-utilisation-percent: 2 ,5 ( subscription ) 10 .03.2021 09 :15:25, framework/metrics/system/cpu-utilisation-percent: 6 ,1 ( subscription ) 10 .03.2021 09 :15:26, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:27, framework/metrics/system/cpu-utilisation-percent: 8 ,8 ( subscription ) 10 .03.2021 09 :15:28, framework/metrics/system/cpu-utilisation-percent: 10 ,3 ( subscription ) 10 .03.2021 09 :15:29, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:30, framework/metrics/system/cpu-utilisation-percent: 7 ,2 ( subscription ) 10 .03.2021 10 :15:32, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:31, framework/metrics/system/cpu-utilisation-percent: 6 ,1 ( subscription ) Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Client"},{"location":"samples-net/datalayer.client/index.html#readme-net-datalayerclient","text":"This .NET sample reads values from ctrlX Data Layer.","title":"README .NET datalayer.client"},{"location":"samples-net/datalayer.client/index.html#introduction","text":"The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop.","title":"Introduction"},{"location":"samples-net/datalayer.client/index.html#description","text":"The following code shows the main method with inline documentation: Program.cs","title":"Description"},{"location":"samples-net/datalayer.client/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.client/index.html#getting-started","text":"Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.client . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-client.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-client.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.client/index.html#console-output","text":"Running inside snap: True ctrlX Data Layer system started. ctrlX Data Layer client created. Client connected: True 10 .03.2021 09 :15:10, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 10 :15:12, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:11, framework/metrics/system/cpu-utilisation-percent: 13 ,6 ( subscription ) 10 .03.2021 09 :15:12, framework/metrics/system/cpu-utilisation-percent: 2 ,5 ( subscription ) 10 .03.2021 09 :15:13, framework/metrics/system/cpu-utilisation-percent: 7 ,4 ( subscription ) 10 .03.2021 09 :15:14, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:15, framework/metrics/system/cpu-utilisation-percent: 3 ,7 ( subscription ) 10 .03.2021 09 :15:16, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:18, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:19, framework/metrics/system/cpu-utilisation-percent: 7 ,2 ( subscription ) 10 .03.2021 09 :15:20, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 10 :15:22, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:21, framework/metrics/system/cpu-utilisation-percent: 5 ( subscription ) 10 .03.2021 09 :15:22, framework/metrics/system/cpu-utilisation-percent: 7 ,3 ( subscription ) 10 .03.2021 09 :15:23, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:24, framework/metrics/system/cpu-utilisation-percent: 2 ,5 ( subscription ) 10 .03.2021 09 :15:25, framework/metrics/system/cpu-utilisation-percent: 6 ,1 ( subscription ) 10 .03.2021 09 :15:26, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:27, framework/metrics/system/cpu-utilisation-percent: 8 ,8 ( subscription ) 10 .03.2021 09 :15:28, framework/metrics/system/cpu-utilisation-percent: 10 ,3 ( subscription ) 10 .03.2021 09 :15:29, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:30, framework/metrics/system/cpu-utilisation-percent: 7 ,2 ( subscription ) 10 .03.2021 10 :15:32, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:31, framework/metrics/system/cpu-utilisation-percent: 6 ,1 ( subscription )","title":"Console Output"},{"location":"samples-net/datalayer.client/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.client/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.client/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.client/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.client/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.client/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.client/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.client.browse/index.html","text":"README .NET datalayer.client.browse \u00b6 This .NET sample writes out all node values from ctrlX Data Layer to console. Introduction \u00b6 The sample demonstrates how to traverse the whole ctrlX Data Layer tree. The values of the nodes if readable are printed out to console as human readable strings. Also complex values with structure (encoded by FlatBuffers ) are written as JSON string to console. Description \u00b6 The following code shows the main method with inline documentation: Program.cs The class ClientExtensions extends the client with methods for browsing all nodes and print out the corresponding values: ClientExtensions.cs Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.client.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-client-browse.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-client-browse.app -f | more Console Output \u00b6 Running inside snap: False ctrlX Data Layer system started. ctrlX Data Layer client created. Client connected: True \\- [] | - [ datalayer ] | | - [ curvemq ] | | \\- [ publickey ] V = tGQ43.RsrvZ#K0 ] eLTs?vpyfCNN?^/sV6MGh7N | | - [ debug ] | | - [ nodes ] [ datalayer/debug/*,datalayer/curvemq/publickey,datalayer/nodes,datalayer/nodesrt,datalayer/subscriptions/clients/*,datalayer/subscriptions/clients/*/subscriptions/*,datalayer/subscriptions/clients/*/subscriptions/*/nodes,datalayer/subscriptions/clients/*/subscriptions/*/properties,datalayer/subscriptions/settings,datalayer/retain/emu/data,datalayer/retain/emu/data/__,datalayer/retain/emu/info,datalayer/retain/emu/map,datalayer/retain/chunks,datalayer/retain/chunks/__,datalayer/retain/stats,datalayer/retain/stats/free,datalayer/retain/stats/used,datalayer/retain/stats/total,datalayer/retain/stats/biggest-free,datalayer/retain/stats/info,datalayer/retain/stats/sync-counter,datalayer/retain/stats/last-used,types/datalayer/metadata,types/datalayer/reflection,types/datalayer/memory,types/datalayer/memory_map,types/datalayer/token,types/datalayer/problem,types/datalayer/retain_stats,types/datalayer/subscription_properties,types/datalayer/subscription_data,types/datalayer/subscription_settings,types/datalayer/persistence_param,types/datalayer/subscription,types/datalayer/bool8,types/datalayer/int8,types/datalayer/uint8,types/datalayer/int16,types/datalayer/uint16,types/datalayer/int32,types/datalayer/uint32,types/datalayer/int64,types/datalayer/uint64,types/datalayer/float32,types/datalayer/float64,types/datalayer/string,types/datalayer/array-of-bool8,types/datalayer/array-of-int8,types/datalayer/array-of-uint8,types/datalayer/array-of-int16,types/datalayer/array-of-uint16,types/datalayer/array-of-int32,types/datalayer/array-of-uint32,types/datalayer/array-of-int64,types/datalayer/array-of-uint64,types/datalayer/array-of-float32,types/datalayer/array-of-float64,types/datalayer/array-of-string,types/datalayer/raw,types/datalayer/remoteconfig,types/datalayer/framework/bundle,types/datalayer/framework/bundlelist,types/datalayer/framework/dependency,types/datalayer/framework/dependencylist,types/datalayer/framework/interface,types/datalayer/framework/interfacelist,types/datalayer/framework/component,types/datalayer/framework/componentlist,types/datalayer/framework/property,types/datalayer/framework/propertylist,types/diagnosis/cfg-class,types/diagnosis/identification,types/diagnosis/list-identification-timestamp,types/diagnosis/identification-timestamp,types/diagnosis/registration,types/diagnosis/set,types/scheduler/callable,types/scheduler/duration,types/scheduler/duration-timer,types/scheduler/histogram,types/scheduler/programs,types/scheduler/state,types/scheduler/task,types/scheduler/trigger-source,types/scheduler/startup-error-reaction,types/scheduler/admin,types/scheduler/watchdog-type,types/scheduler/watchdog-error-reaction-class,types/scheduler/watchdog-error-reaction-configuration,types/scheduler/watchdog,types/scheduler/controls,types/systemhandler/state,types/script/cfg,types/script/cfg/init-script,types/script/instances,types/script/instances/cmd/file,types/script/instances/cmd/string,types/script/instances/diag,types/script/state/languages,devices/remotes/__,framework/bundles,framework/bundles/__,framework/metrics/system/cpu-utilisation-percent,framework/metrics/system/memtotal-mb,framework/metrics/system/memfree-mb,framework/metrics/system/memavailable-mb,framework/metrics/system/memused-mb,framework/metrics/system/membuffers-mb,framework/metrics/system/memcache-mb,framework/metrics/system/memused-percent,framework/metrics/process/vmsize-kb,framework/metrics/process/vmrss-kb,framework/metrics/process/vmshared-kb,framework/metrics/process/memused-percent,framework/state,framework/events/framework-started,diagnosis/cfg/realtime/numbers,diagnosis/cfg/realtime/numbers/class,diagnosis/clear/error,diagnosis/confirm/error,diagnosis/get/actual/list,diagnosis/get/actual/log,diagnosis/get/text,diagnosis/registration/detailed/register,diagnosis/registration/detailed/unregister,diagnosis/registration/main/register,diagnosis/registration/main/unregister,diagnosis/set,diagnosis/set/reset-active,diagnosis/set/set-active,diagnosis/set/set-and-reset,trace/rexroth-automationcore/units,trace/rexroth-automationcore/units/__,trace/rexroth-automationcore/admin/cfg/*,scheduler/tasks/*/watchdog,scheduler/tasks/*/watchdog/__,scheduler/__,script/cfg,script/cfg/load-all,script/cfg/save-all,script/cfg/init-script,script/cfg/init-script/file,script/cfg/init-script/language,script/cfg/init-script/parameter,script/admin/cfg/load,script/admin/cfg/save,script/instances/*,script/instances/*/cmd/file,script/instances/*/cmd/string,script/instances/*/cmd/reset,script/instances/*/cmd/abort,script/instances/*/state/opstate,script/instances/*/state/script,script/instances/*/state/line,script/instances/*/state/attached-to,script/instances/*/state/pid,script/instances/*/diag,script/instances/*/diag/last-main-diag,script/instances/*/diag/last-detail-diag,script/instances/*/diag/err-msg,script/instances/*/diag/err-trace,script/state/languages/* ] | | - [ nodesrt ] [ datalayer/retain/emu ] | | - [ retain ] | | | - [ chunks ] [] | | | - [ emu ] | | | | - [ data ] [] | | | | - [ info ] { \"type\" : \"Shared\" , \"id\" : \"/snap.rexroth-automationcore.405e2e7a-63ae-0039-056b-deadbe000002\" , \"sizeBytes\" : 122880 } | | | \\- [ map ] { \"revision\" : 0 } | | \\- [ stats ] { \"total\" : 122880 , \"free\" : 122848 , \"used\" : 32 , \"biggestFree\" : 122848 , \"syncCounter\" : 124 , \"lastUsed\" : 32 } | | | - [ biggest-free ] 122848 | | | - [ free ] 122848 | | | - [ info ] emulated | | | - [ last-used ] 32 | | | - [ sync-counter ] 124 | | | - [ total ] 122880 | | \\- [ used ] 32 | \\- [ subscriptions ] ... Elapsed time for browsing ctrlX Data Layer tree: 9351 milliseconds Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Browse"},{"location":"samples-net/datalayer.client.browse/index.html#readme-net-datalayerclientbrowse","text":"This .NET sample writes out all node values from ctrlX Data Layer to console.","title":"README .NET datalayer.client.browse"},{"location":"samples-net/datalayer.client.browse/index.html#introduction","text":"The sample demonstrates how to traverse the whole ctrlX Data Layer tree. The values of the nodes if readable are printed out to console as human readable strings. Also complex values with structure (encoded by FlatBuffers ) are written as JSON string to console.","title":"Introduction"},{"location":"samples-net/datalayer.client.browse/index.html#description","text":"The following code shows the main method with inline documentation: Program.cs The class ClientExtensions extends the client with methods for browsing all nodes and print out the corresponding values: ClientExtensions.cs","title":"Description"},{"location":"samples-net/datalayer.client.browse/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.client.browse/index.html#getting-started","text":"Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.client.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-client-browse.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-client-browse.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.client.browse/index.html#console-output","text":"Running inside snap: False ctrlX Data Layer system started. ctrlX Data Layer client created. Client connected: True \\- [] | - [ datalayer ] | | - [ curvemq ] | | \\- [ publickey ] V = tGQ43.RsrvZ#K0 ] eLTs?vpyfCNN?^/sV6MGh7N | | - [ debug ] | | - [ nodes ] [ datalayer/debug/*,datalayer/curvemq/publickey,datalayer/nodes,datalayer/nodesrt,datalayer/subscriptions/clients/*,datalayer/subscriptions/clients/*/subscriptions/*,datalayer/subscriptions/clients/*/subscriptions/*/nodes,datalayer/subscriptions/clients/*/subscriptions/*/properties,datalayer/subscriptions/settings,datalayer/retain/emu/data,datalayer/retain/emu/data/__,datalayer/retain/emu/info,datalayer/retain/emu/map,datalayer/retain/chunks,datalayer/retain/chunks/__,datalayer/retain/stats,datalayer/retain/stats/free,datalayer/retain/stats/used,datalayer/retain/stats/total,datalayer/retain/stats/biggest-free,datalayer/retain/stats/info,datalayer/retain/stats/sync-counter,datalayer/retain/stats/last-used,types/datalayer/metadata,types/datalayer/reflection,types/datalayer/memory,types/datalayer/memory_map,types/datalayer/token,types/datalayer/problem,types/datalayer/retain_stats,types/datalayer/subscription_properties,types/datalayer/subscription_data,types/datalayer/subscription_settings,types/datalayer/persistence_param,types/datalayer/subscription,types/datalayer/bool8,types/datalayer/int8,types/datalayer/uint8,types/datalayer/int16,types/datalayer/uint16,types/datalayer/int32,types/datalayer/uint32,types/datalayer/int64,types/datalayer/uint64,types/datalayer/float32,types/datalayer/float64,types/datalayer/string,types/datalayer/array-of-bool8,types/datalayer/array-of-int8,types/datalayer/array-of-uint8,types/datalayer/array-of-int16,types/datalayer/array-of-uint16,types/datalayer/array-of-int32,types/datalayer/array-of-uint32,types/datalayer/array-of-int64,types/datalayer/array-of-uint64,types/datalayer/array-of-float32,types/datalayer/array-of-float64,types/datalayer/array-of-string,types/datalayer/raw,types/datalayer/remoteconfig,types/datalayer/framework/bundle,types/datalayer/framework/bundlelist,types/datalayer/framework/dependency,types/datalayer/framework/dependencylist,types/datalayer/framework/interface,types/datalayer/framework/interfacelist,types/datalayer/framework/component,types/datalayer/framework/componentlist,types/datalayer/framework/property,types/datalayer/framework/propertylist,types/diagnosis/cfg-class,types/diagnosis/identification,types/diagnosis/list-identification-timestamp,types/diagnosis/identification-timestamp,types/diagnosis/registration,types/diagnosis/set,types/scheduler/callable,types/scheduler/duration,types/scheduler/duration-timer,types/scheduler/histogram,types/scheduler/programs,types/scheduler/state,types/scheduler/task,types/scheduler/trigger-source,types/scheduler/startup-error-reaction,types/scheduler/admin,types/scheduler/watchdog-type,types/scheduler/watchdog-error-reaction-class,types/scheduler/watchdog-error-reaction-configuration,types/scheduler/watchdog,types/scheduler/controls,types/systemhandler/state,types/script/cfg,types/script/cfg/init-script,types/script/instances,types/script/instances/cmd/file,types/script/instances/cmd/string,types/script/instances/diag,types/script/state/languages,devices/remotes/__,framework/bundles,framework/bundles/__,framework/metrics/system/cpu-utilisation-percent,framework/metrics/system/memtotal-mb,framework/metrics/system/memfree-mb,framework/metrics/system/memavailable-mb,framework/metrics/system/memused-mb,framework/metrics/system/membuffers-mb,framework/metrics/system/memcache-mb,framework/metrics/system/memused-percent,framework/metrics/process/vmsize-kb,framework/metrics/process/vmrss-kb,framework/metrics/process/vmshared-kb,framework/metrics/process/memused-percent,framework/state,framework/events/framework-started,diagnosis/cfg/realtime/numbers,diagnosis/cfg/realtime/numbers/class,diagnosis/clear/error,diagnosis/confirm/error,diagnosis/get/actual/list,diagnosis/get/actual/log,diagnosis/get/text,diagnosis/registration/detailed/register,diagnosis/registration/detailed/unregister,diagnosis/registration/main/register,diagnosis/registration/main/unregister,diagnosis/set,diagnosis/set/reset-active,diagnosis/set/set-active,diagnosis/set/set-and-reset,trace/rexroth-automationcore/units,trace/rexroth-automationcore/units/__,trace/rexroth-automationcore/admin/cfg/*,scheduler/tasks/*/watchdog,scheduler/tasks/*/watchdog/__,scheduler/__,script/cfg,script/cfg/load-all,script/cfg/save-all,script/cfg/init-script,script/cfg/init-script/file,script/cfg/init-script/language,script/cfg/init-script/parameter,script/admin/cfg/load,script/admin/cfg/save,script/instances/*,script/instances/*/cmd/file,script/instances/*/cmd/string,script/instances/*/cmd/reset,script/instances/*/cmd/abort,script/instances/*/state/opstate,script/instances/*/state/script,script/instances/*/state/line,script/instances/*/state/attached-to,script/instances/*/state/pid,script/instances/*/diag,script/instances/*/diag/last-main-diag,script/instances/*/diag/last-detail-diag,script/instances/*/diag/err-msg,script/instances/*/diag/err-trace,script/state/languages/* ] | | - [ nodesrt ] [ datalayer/retain/emu ] | | - [ retain ] | | | - [ chunks ] [] | | | - [ emu ] | | | | - [ data ] [] | | | | - [ info ] { \"type\" : \"Shared\" , \"id\" : \"/snap.rexroth-automationcore.405e2e7a-63ae-0039-056b-deadbe000002\" , \"sizeBytes\" : 122880 } | | | \\- [ map ] { \"revision\" : 0 } | | \\- [ stats ] { \"total\" : 122880 , \"free\" : 122848 , \"used\" : 32 , \"biggestFree\" : 122848 , \"syncCounter\" : 124 , \"lastUsed\" : 32 } | | | - [ biggest-free ] 122848 | | | - [ free ] 122848 | | | - [ info ] emulated | | | - [ last-used ] 32 | | | - [ sync-counter ] 124 | | | - [ total ] 122880 | | \\- [ used ] 32 | \\- [ subscriptions ] ... Elapsed time for browsing ctrlX Data Layer tree: 9351 milliseconds","title":"Console Output"},{"location":"samples-net/datalayer.client.browse/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.client.browse/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.client.browse/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.client.browse/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.client.browse/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.client.browse/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.client.browse/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.mqtt/index.html","text":"README .NET datalayer.mqtt \u00b6 This .NET sample connects the Data Layer to a MQTT 5 broker. The sample is based on MQTT.net . IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples. Introduction \u00b6 MQTT sample showing PUB/SUB with Data Layer in full interaction. Connect Datalayer to any MQTT Broker for data synchronization (SUB) or publishing (PUB) or even full broker synchronisation ( Topic Scanner ). A simple use-case could be any kind of M2M or M2Cloud communication as an light-weight alternative to full stack OPC UA Pub/Sub. Prerequisites \u00b6 Please use this sample in conjunction with any MQTT Broker supporting MQTT 5 . We recommend to use mosquitto MQTT Broker , which can be also installed on a ctrlX as snap snap install mosquitto Description \u00b6 The MQTT sample demonstrates How easy it is to interact Data Layer with MQTT A proposal to organize a set of logical grouped provided nodes using a handler hierarchy and how to populate nodes using some level node handlers , responsible for it's own set of children nodes How to create an light-weight node handler , returning just his own managed virtual nodes on OnBrowse() without the need of registering all nodes one-by-one which is very efficient for a large set of dynamically created nodes. A concept of creating configurable PUB configurations , publishing the value of a Data Layer source address to a MQTT topic. A concept of creating configurable SUB configurations , subscribing a MQTT topic (wildcards supported) and writing it back to a Data Layer target address. On top a fully functional Topic Scanner , scanning all topics present on the broker and revealing it into the address space of the Data Layer, which is very handy for other Data Layer clients to access MQTT related data immediately without connecting to MQTT itself. The most recent message of the topic will be memory-persisted as and accessible via a simple Data Layer address. Notes : The sample uses unsecure MQTT communication. Please use a MQTT TLS setup in any production environment. See broker documentation for details. The sample does not provide any persistence of created PUB or SUB configurations. Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.mqtt . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-mqtt.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: ```bash sudo snap logs ctrlx-dotnet-datalayer-mqtt.app -f | more Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer MQTT"},{"location":"samples-net/datalayer.mqtt/index.html#readme-net-datalayermqtt","text":"This .NET sample connects the Data Layer to a MQTT 5 broker. The sample is based on MQTT.net . IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples.","title":"README .NET datalayer.mqtt"},{"location":"samples-net/datalayer.mqtt/index.html#introduction","text":"MQTT sample showing PUB/SUB with Data Layer in full interaction. Connect Datalayer to any MQTT Broker for data synchronization (SUB) or publishing (PUB) or even full broker synchronisation ( Topic Scanner ). A simple use-case could be any kind of M2M or M2Cloud communication as an light-weight alternative to full stack OPC UA Pub/Sub.","title":"Introduction"},{"location":"samples-net/datalayer.mqtt/index.html#prerequisites","text":"Please use this sample in conjunction with any MQTT Broker supporting MQTT 5 . We recommend to use mosquitto MQTT Broker , which can be also installed on a ctrlX as snap snap install mosquitto","title":"Prerequisites"},{"location":"samples-net/datalayer.mqtt/index.html#description","text":"The MQTT sample demonstrates How easy it is to interact Data Layer with MQTT A proposal to organize a set of logical grouped provided nodes using a handler hierarchy and how to populate nodes using some level node handlers , responsible for it's own set of children nodes How to create an light-weight node handler , returning just his own managed virtual nodes on OnBrowse() without the need of registering all nodes one-by-one which is very efficient for a large set of dynamically created nodes. A concept of creating configurable PUB configurations , publishing the value of a Data Layer source address to a MQTT topic. A concept of creating configurable SUB configurations , subscribing a MQTT topic (wildcards supported) and writing it back to a Data Layer target address. On top a fully functional Topic Scanner , scanning all topics present on the broker and revealing it into the address space of the Data Layer, which is very handy for other Data Layer clients to access MQTT related data immediately without connecting to MQTT itself. The most recent message of the topic will be memory-persisted as and accessible via a simple Data Layer address. Notes : The sample uses unsecure MQTT communication. Please use a MQTT TLS setup in any production environment. See broker documentation for details. The sample does not provide any persistence of created PUB or SUB configurations.","title":"Description"},{"location":"samples-net/datalayer.mqtt/index.html#prerequisites_1","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.mqtt/index.html#getting-started","text":"Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.mqtt . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-mqtt.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: ```bash sudo snap logs ctrlx-dotnet-datalayer-mqtt.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.mqtt/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.mqtt/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.mqtt/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.mqtt/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.mqtt/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.mqtt/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.mqtt/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.provider/index.html","text":"README .NET datalayer.provider \u00b6 This .NET sample provides some registered nodes to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples. Introduction \u00b6 The sample demonstrates how to provide nodes to ctrlX Data Layer tree. The provider creates nodes with types of int/double/string. Also a complex type encoded by FlatBuffers is provided. Description \u00b6 The following code shows the main method with inline documentation: Program.cs The class ReadOnlyNodeHandler implements the callback methods for read-only support: ReadOnlyNodeHandler.cs The class ReadWriteNodeHandler implements the callback methods for read-write support: ReadWriteNodeHandler.cs The class MetadataProvider create the metadata for the registered flatbuffers type and provides it as a singleton: MetadataProvider.cs Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.provider . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: ```bash sudo snap logs ctrlx-dotnet-datalayer-provider.app -f | more Screenshot \u00b6 Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Provider"},{"location":"samples-net/datalayer.provider/index.html#readme-net-datalayerprovider","text":"This .NET sample provides some registered nodes to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples.","title":"README .NET datalayer.provider"},{"location":"samples-net/datalayer.provider/index.html#introduction","text":"The sample demonstrates how to provide nodes to ctrlX Data Layer tree. The provider creates nodes with types of int/double/string. Also a complex type encoded by FlatBuffers is provided.","title":"Introduction"},{"location":"samples-net/datalayer.provider/index.html#description","text":"The following code shows the main method with inline documentation: Program.cs The class ReadOnlyNodeHandler implements the callback methods for read-only support: ReadOnlyNodeHandler.cs The class ReadWriteNodeHandler implements the callback methods for read-write support: ReadWriteNodeHandler.cs The class MetadataProvider create the metadata for the registered flatbuffers type and provides it as a singleton: MetadataProvider.cs","title":"Description"},{"location":"samples-net/datalayer.provider/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.provider/index.html#getting-started","text":"Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.provider . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: ```bash sudo snap logs ctrlx-dotnet-datalayer-provider.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.provider/index.html#screenshot","text":"","title":"Screenshot"},{"location":"samples-net/datalayer.provider/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.provider/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.provider/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.provider/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.provider/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.provider/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.provider/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.provider.alldata/index.html","text":"README .NET datalayer.provider.alldata \u00b6 This .NET sample provides all types of data to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples. Introduction \u00b6 The sample demonstrates how to provide all available data types to ctrlX Data Layer tree. The demo creates a 'static' and a 'dynamic' folder under the root node 'samples'. The 'static' folder provides nodes with constant values. In the 'dynamic' folder the same nodes are provided as in 'static' folder but with changing value every second. Description \u00b6 The following code shows the main method with inline documentation: Program.cs The class ProviderExtensions extends the provider with methods for create the dynamic and static nodes: ProviderExtensions.cs The class ProviderNodeWithAddress is used to keep 1:1 relation from node to address: ProviderNodeWithAddress.cs The class ProviderNodeExtensions provides the extension method to change the value of the dynamic nodes: ProviderNodeExtensions.cs The class MetadataProvider create the metadata for the registered flatbuffers type and provides it as a singleton: MetadataProvider.cs Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.provider.alldata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider-alldata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-provider-alldata.app -f | more Screenshot \u00b6 Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer All Data Provider"},{"location":"samples-net/datalayer.provider.alldata/index.html#readme-net-datalayerprovideralldata","text":"This .NET sample provides all types of data to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples.","title":"README .NET datalayer.provider.alldata"},{"location":"samples-net/datalayer.provider.alldata/index.html#introduction","text":"The sample demonstrates how to provide all available data types to ctrlX Data Layer tree. The demo creates a 'static' and a 'dynamic' folder under the root node 'samples'. The 'static' folder provides nodes with constant values. In the 'dynamic' folder the same nodes are provided as in 'static' folder but with changing value every second.","title":"Introduction"},{"location":"samples-net/datalayer.provider.alldata/index.html#description","text":"The following code shows the main method with inline documentation: Program.cs The class ProviderExtensions extends the provider with methods for create the dynamic and static nodes: ProviderExtensions.cs The class ProviderNodeWithAddress is used to keep 1:1 relation from node to address: ProviderNodeWithAddress.cs The class ProviderNodeExtensions provides the extension method to change the value of the dynamic nodes: ProviderNodeExtensions.cs The class MetadataProvider create the metadata for the registered flatbuffers type and provides it as a singleton: MetadataProvider.cs","title":"Description"},{"location":"samples-net/datalayer.provider.alldata/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.provider.alldata/index.html#getting-started","text":"Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.provider.alldata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider-alldata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-provider-alldata.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.provider.alldata/index.html#screenshot","text":"","title":"Screenshot"},{"location":"samples-net/datalayer.provider.alldata/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.provider.alldata/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.provider.alldata/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.provider.alldata/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.provider.alldata/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.provider.alldata/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.provider.alldata/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.provider.virtual/index.html","text":"README .NET datalayer.provider.virtual \u00b6 This .NET sample demonstrates how to write a light-weight provider, listing to a wildcard address and managing virtual nodes. IMPORTANT : The sample is recommended for large , very large or dynamic sized set of nodes to handle. We are listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is very efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples. Introduction \u00b6 The sample shows a basic concept for a leight-weight self-managed provider implementation Description \u00b6 The sample creates some virtual nodes hold by an self-managed dictionary using the address to look up. Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.provider.virtual . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider-virtual.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-provider-virtual.app -f | more Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Provider Virtual"},{"location":"samples-net/datalayer.provider.virtual/index.html#readme-net-datalayerprovidervirtual","text":"This .NET sample demonstrates how to write a light-weight provider, listing to a wildcard address and managing virtual nodes. IMPORTANT : The sample is recommended for large , very large or dynamic sized set of nodes to handle. We are listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is very efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples.","title":"README .NET datalayer.provider.virtual"},{"location":"samples-net/datalayer.provider.virtual/index.html#introduction","text":"The sample shows a basic concept for a leight-weight self-managed provider implementation","title":"Introduction"},{"location":"samples-net/datalayer.provider.virtual/index.html#description","text":"The sample creates some virtual nodes hold by an self-managed dictionary using the address to look up.","title":"Description"},{"location":"samples-net/datalayer.provider.virtual/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.provider.virtual/index.html#getting-started","text":"Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.provider.virtual . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider-virtual.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-provider-virtual.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.provider.virtual/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.provider.virtual/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.provider.virtual/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.provider.virtual/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.provider.virtual/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.provider.virtual/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.provider.virtual/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/diagnostics.logbook/index.html","text":"README .NET diagnostics.logbook \u00b6 This .NET sample is logging messages to the logbook of ctrlX. Introduction \u00b6 The project diagnostics.logbook provides a simple application example to log messages to the logbook of ctrlX. Description \u00b6 The following code shows the main method with inline documentation: Program.cs The class KernelLogger writes kernel log messages with the linux command 'logger': The enum KernelLogLevel defines the log levels supported by the logbook: KernelLogger.cs Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory diagnostics.logbook . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-logbook.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: ```bash sudo snap logs ctrlx-dotnet-logbook.app -f | more ## Screenshot Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Diagnostics Logbook"},{"location":"samples-net/diagnostics.logbook/index.html#readme-net-diagnosticslogbook","text":"This .NET sample is logging messages to the logbook of ctrlX.","title":"README .NET diagnostics.logbook"},{"location":"samples-net/diagnostics.logbook/index.html#introduction","text":"The project diagnostics.logbook provides a simple application example to log messages to the logbook of ctrlX.","title":"Introduction"},{"location":"samples-net/diagnostics.logbook/index.html#description","text":"The following code shows the main method with inline documentation: Program.cs The class KernelLogger writes kernel log messages with the linux command 'logger': The enum KernelLogLevel defines the log levels supported by the logbook: KernelLogger.cs","title":"Description"},{"location":"samples-net/diagnostics.logbook/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/diagnostics.logbook/index.html#getting-started","text":"Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory diagnostics.logbook . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-logbook.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: ```bash sudo snap logs ctrlx-dotnet-logbook.app -f | more ## Screenshot","title":"Getting Started"},{"location":"samples-net/diagnostics.logbook/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/diagnostics.logbook/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/diagnostics.logbook/index.html#support","text":"","title":"Support"},{"location":"samples-net/diagnostics.logbook/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/diagnostics.logbook/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/diagnostics.logbook/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/diagnostics.logbook/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/hello.world/index.html","text":"README .NET hello.world \u00b6 This .NET sample prints out \"Hello World\" to the console. Introduction \u00b6 Programm is prompting \"Hello World\" to standard output. Description \u00b6 The following code shows the main method with inline documentation: Program.cs Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-hello-world.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-hello-world.app -f | more Console Output \u00b6 bash Hello World! 11.03.2021 09:45:05 Hello World! 11.03.2021 09:45:06 Hello World! 11.03.2021 09:45:07 Hello World! 11.03.2021 09:45:08 Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Hello World"},{"location":"samples-net/hello.world/index.html#readme-net-helloworld","text":"This .NET sample prints out \"Hello World\" to the console.","title":"README .NET hello.world"},{"location":"samples-net/hello.world/index.html#introduction","text":"Programm is prompting \"Hello World\" to standard output.","title":"Introduction"},{"location":"samples-net/hello.world/index.html#description","text":"The following code shows the main method with inline documentation: Program.cs","title":"Description"},{"location":"samples-net/hello.world/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/hello.world/index.html#getting-started","text":"Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory datalayer.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-hello-world.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-hello-world.app -f | more","title":"Getting Started"},{"location":"samples-net/hello.world/index.html#console-output","text":"bash Hello World! 11.03.2021 09:45:05 Hello World! 11.03.2021 09:45:06 Hello World! 11.03.2021 09:45:07 Hello World! 11.03.2021 09:45:08","title":"Console Output"},{"location":"samples-net/hello.world/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/hello.world/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/hello.world/index.html#support","text":"","title":"Support"},{"location":"samples-net/hello.world/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/hello.world/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/hello.world/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/hello.world/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/index.html","text":"Python Samples \u00b6 Find out the supported samples \u00b6 \"Data Layer Provider\" A lightweight Data Layer Provider which you can easily extend -> start with this example. \"Data Layer Client\" An extended Data Layer Client sample. It interacts with Data Layer nodes provided by the AllDataProvider snap. So first build and install this snap located in the directory public/samples-cpp/datalayer.provider.all-data). Then start working with this sample. \"ctrlX Data Layer Client (complex)\" A complexer Data Layer Client sample. \"ctrlX Data Layer Client Browse\" Browse the complete Data Layer tree. \"ctrlX Data Layer Client Subscription\" Create a Data Layer subscription. \"ctrlX Data Layer Provider All Data\" Provider from all data types. \"ctrlX Diagnostics Logbook\" Add different loglevels to the logbook. \"ctrlX Data Layer Calculation operations\" Simple calculation sample. \"ctrlX Data Layer + Webserver\" \"Full Stack\"-Sample Reads value from the Data Layer and publish it on an separate Webserver, integrated behind the reverse proxy. \"AppData File Storage\" Add files to the AppData File Storage. Interact with the different loading sequences.","title":"Python Samples"},{"location":"samples-python/index.html#python-samples","text":"","title":"Python Samples"},{"location":"samples-python/index.html#find-out-the-supported-samples","text":"\"Data Layer Provider\" A lightweight Data Layer Provider which you can easily extend -> start with this example. \"Data Layer Client\" An extended Data Layer Client sample. It interacts with Data Layer nodes provided by the AllDataProvider snap. So first build and install this snap located in the directory public/samples-cpp/datalayer.provider.all-data). Then start working with this sample. \"ctrlX Data Layer Client (complex)\" A complexer Data Layer Client sample. \"ctrlX Data Layer Client Browse\" Browse the complete Data Layer tree. \"ctrlX Data Layer Client Subscription\" Create a Data Layer subscription. \"ctrlX Data Layer Provider All Data\" Provider from all data types. \"ctrlX Diagnostics Logbook\" Add different loglevels to the logbook. \"ctrlX Data Layer Calculation operations\" Simple calculation sample. \"ctrlX Data Layer + Webserver\" \"Full Stack\"-Sample Reads value from the Data Layer and publish it on an separate Webserver, integrated behind the reverse proxy. \"AppData File Storage\" Add files to the AppData File Storage. Interact with the different loading sequences.","title":"Find out the supported samples"},{"location":"samples-python/appdata/index.html","text":"README Python appdata \u00b6 The Python sample app appdata shows how to persist application data in ctrlX environment using an HTTP Listener. Please read the available HOW-TO persist your app data documention for details. Introduction \u00b6 This sample shows how to load and save data according to ctrlx storage concept. Description \u00b6 Use the ctrlX App Data storage for your application data persistence. Prerequisites \u00b6 Please read the common Python docs here , first. Getting Started \u00b6 Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory appdata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-go-appdata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs sdk-py-appdata.app -f | more Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"AppData File Storage"},{"location":"samples-python/appdata/index.html#readme-python-appdata","text":"The Python sample app appdata shows how to persist application data in ctrlX environment using an HTTP Listener. Please read the available HOW-TO persist your app data documention for details.","title":"README Python appdata"},{"location":"samples-python/appdata/index.html#introduction","text":"This sample shows how to load and save data according to ctrlx storage concept.","title":"Introduction"},{"location":"samples-python/appdata/index.html#description","text":"Use the ctrlX App Data storage for your application data persistence.","title":"Description"},{"location":"samples-python/appdata/index.html#prerequisites","text":"Please read the common Python docs here , first.","title":"Prerequisites"},{"location":"samples-python/appdata/index.html#getting-started","text":"Launch VSCode Click on the Remote Explorer from the menu. Choose Open Folder in WSL . Open the directory appdata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-go-appdata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs sdk-py-appdata.app -f | more","title":"Getting Started"},{"location":"samples-python/appdata/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-python/appdata/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-python/appdata/index.html#support","text":"","title":"Support"},{"location":"samples-python/appdata/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-python/appdata/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-python/appdata/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-python/appdata/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.calc/index.html","text":"ctrlX Data Layer Calculator Sample in Python \u00b6 This app is a ctrlX Data Layer Provider and Client written in Python. Introduction \u00b6 The app reads two Data Layer values and calculates the output value 'out'. All values are float64 value types. The Data Layer addresses of the input values are configured by the string input values 'in1' and 'in2'. How the out value is calculated can be configured as string value of the node 'mode'. Supported operations are: + - * / Design \u00b6 There are two Python scripts: main.py - the main function calculations.basic_arithmetic_operations.py - Class called BasicArithmeticOperations which reads the input values and calculates the output value. main.py \u00b6 This function manages the Data Layer Provider and Client connection. Furthermore it creates one instance of the BasicArithmeticOperations class and starts it. If the client connection is lost the main function exits with an error code. If the app is installed as snap the system will restart the application after a short period of time. calculations.basic_arithmetic_operations.py \u00b6 This class BasicArithmeticOperations has several functions. It is a Data Layer Provider for four nodes: 1. in1: string, specifies the DL address of the first operand 2. in2: string, specifies the DL address of the second operand 3. mode: string, specifies the operation 4. out: float64, the result With the address values of in1 and in2 a subscription is started. Everytime when new values are published the value of out is recalculated. Getting Started \u00b6 As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files. Install Virtual Environment \u00b6 We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate Install Wheels \u00b6 Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-* Start IDE \u00b6 Start your IDE, open main.py and start the program. Build an AMD64 Snap \u00b6 Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter. Version 2.43 \u00b6 To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft Version 4.x or higher \u00b6 To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU. Install the Snap on the ctrlX \u00b6 Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Calculation operations"},{"location":"samples-python/datalayer.calc/index.html#ctrlx-data-layer-calculator-sample-in-python","text":"This app is a ctrlX Data Layer Provider and Client written in Python.","title":"ctrlX Data Layer Calculator Sample in Python"},{"location":"samples-python/datalayer.calc/index.html#introduction","text":"The app reads two Data Layer values and calculates the output value 'out'. All values are float64 value types. The Data Layer addresses of the input values are configured by the string input values 'in1' and 'in2'. How the out value is calculated can be configured as string value of the node 'mode'. Supported operations are: + - * /","title":"Introduction"},{"location":"samples-python/datalayer.calc/index.html#design","text":"There are two Python scripts: main.py - the main function calculations.basic_arithmetic_operations.py - Class called BasicArithmeticOperations which reads the input values and calculates the output value.","title":"Design"},{"location":"samples-python/datalayer.calc/index.html#mainpy","text":"This function manages the Data Layer Provider and Client connection. Furthermore it creates one instance of the BasicArithmeticOperations class and starts it. If the client connection is lost the main function exits with an error code. If the app is installed as snap the system will restart the application after a short period of time.","title":"main.py"},{"location":"samples-python/datalayer.calc/index.html#calculationsbasic_arithmetic_operationspy","text":"This class BasicArithmeticOperations has several functions. It is a Data Layer Provider for four nodes: 1. in1: string, specifies the DL address of the first operand 2. in2: string, specifies the DL address of the second operand 3. mode: string, specifies the operation 4. out: float64, the result With the address values of in1 and in2 a subscription is started. Everytime when new values are published the value of out is recalculated.","title":"calculations.basic_arithmetic_operations.py"},{"location":"samples-python/datalayer.calc/index.html#getting-started","text":"As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files.","title":"Getting Started"},{"location":"samples-python/datalayer.calc/index.html#install-virtual-environment","text":"We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate","title":"Install Virtual Environment"},{"location":"samples-python/datalayer.calc/index.html#install-wheels","text":"Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-*","title":"Install Wheels"},{"location":"samples-python/datalayer.calc/index.html#start-ide","text":"Start your IDE, open main.py and start the program.","title":"Start IDE"},{"location":"samples-python/datalayer.calc/index.html#build-an-amd64-snap","text":"Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter.","title":"Build an AMD64 Snap"},{"location":"samples-python/datalayer.calc/index.html#version-243","text":"To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft","title":"Version 2.43"},{"location":"samples-python/datalayer.calc/index.html#version-4x-or-higher","text":"To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU.","title":"Version 4.x or higher"},{"location":"samples-python/datalayer.calc/index.html#install-the-snap-on-the-ctrlx","text":"Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode","title":"Install the Snap on the ctrlX"},{"location":"samples-python/datalayer.calc/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-python/datalayer.calc/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.client/index.html","text":"README datalayer.client \u00b6 This python app datalayer.client runs Data Layer client operations like read, write and so on. It can be used as sample to implement own apps. Introduction \u00b6 The app demonstrates how the Data Layer and its nodes can be accessed. Prerequisites for Developing Python Apps \u00b6 Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory) Getting Started \u00b6 As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files. Install Virtual Environment \u00b6 We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate Install Wheels \u00b6 Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-* Start IDE \u00b6 Start your IDE, open main.py and start the program. Build an AMD64 Snap \u00b6 Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter. Version 2.43 \u00b6 To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft Version 4.x or higher \u00b6 To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU. Install the Snap on the ctrlX \u00b6 Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode Troubleshooting \u00b6 If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f rexroth-python-client Ensure the alldataprovider snap is installed and running. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Client (complex)"},{"location":"samples-python/datalayer.client/index.html#readme-datalayerclient","text":"This python app datalayer.client runs Data Layer client operations like read, write and so on. It can be used as sample to implement own apps.","title":"README datalayer.client"},{"location":"samples-python/datalayer.client/index.html#introduction","text":"The app demonstrates how the Data Layer and its nodes can be accessed.","title":"Introduction"},{"location":"samples-python/datalayer.client/index.html#prerequisites-for-developing-python-apps","text":"Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory)","title":"Prerequisites for Developing Python Apps"},{"location":"samples-python/datalayer.client/index.html#getting-started","text":"As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files.","title":"Getting Started"},{"location":"samples-python/datalayer.client/index.html#install-virtual-environment","text":"We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate","title":"Install Virtual Environment"},{"location":"samples-python/datalayer.client/index.html#install-wheels","text":"Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-*","title":"Install Wheels"},{"location":"samples-python/datalayer.client/index.html#start-ide","text":"Start your IDE, open main.py and start the program.","title":"Start IDE"},{"location":"samples-python/datalayer.client/index.html#build-an-amd64-snap","text":"Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter.","title":"Build an AMD64 Snap"},{"location":"samples-python/datalayer.client/index.html#version-243","text":"To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft","title":"Version 2.43"},{"location":"samples-python/datalayer.client/index.html#version-4x-or-higher","text":"To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU.","title":"Version 4.x or higher"},{"location":"samples-python/datalayer.client/index.html#install-the-snap-on-the-ctrlx","text":"Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode","title":"Install the Snap on the ctrlX"},{"location":"samples-python/datalayer.client/index.html#troubleshooting","text":"If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f rexroth-python-client Ensure the alldataprovider snap is installed and running.","title":"Troubleshooting"},{"location":"samples-python/datalayer.client/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-python/datalayer.client/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.client.browse/index.html","text":"README datalayer.client \u00b6 This python app datalayer.client.browse runs browse Data Layer client operation. It can be used as sample to implement own apps. Introduction \u00b6 The app demonstrates how the Data Layer browse functionality works. Prerequisites for Developing Python Apps \u00b6 Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory) Getting Started \u00b6 As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files. Install Virtual Environment \u00b6 We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate Install Wheels \u00b6 Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-* Start IDE \u00b6 Start your IDE, open main.py and start the program. Build an AMD64 Snap \u00b6 Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter. Version 2.43 \u00b6 To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft Version 4.x or higher \u00b6 To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU. Install the Snap on the ctrlX \u00b6 Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode Install the Snap on the ctrlX \u00b6 Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode Troubleshooting \u00b6 If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f rexroth-python-client Ensure the alldataprovider snap is installed and running. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Browse"},{"location":"samples-python/datalayer.client.browse/index.html#readme-datalayerclient","text":"This python app datalayer.client.browse runs browse Data Layer client operation. It can be used as sample to implement own apps.","title":"README datalayer.client"},{"location":"samples-python/datalayer.client.browse/index.html#introduction","text":"The app demonstrates how the Data Layer browse functionality works.","title":"Introduction"},{"location":"samples-python/datalayer.client.browse/index.html#prerequisites-for-developing-python-apps","text":"Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory)","title":"Prerequisites for Developing Python Apps"},{"location":"samples-python/datalayer.client.browse/index.html#getting-started","text":"As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files.","title":"Getting Started"},{"location":"samples-python/datalayer.client.browse/index.html#install-virtual-environment","text":"We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate","title":"Install Virtual Environment"},{"location":"samples-python/datalayer.client.browse/index.html#install-wheels","text":"Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-*","title":"Install Wheels"},{"location":"samples-python/datalayer.client.browse/index.html#start-ide","text":"Start your IDE, open main.py and start the program.","title":"Start IDE"},{"location":"samples-python/datalayer.client.browse/index.html#build-an-amd64-snap","text":"Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter.","title":"Build an AMD64 Snap"},{"location":"samples-python/datalayer.client.browse/index.html#version-243","text":"To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft","title":"Version 2.43"},{"location":"samples-python/datalayer.client.browse/index.html#version-4x-or-higher","text":"To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU.","title":"Version 4.x or higher"},{"location":"samples-python/datalayer.client.browse/index.html#install-the-snap-on-the-ctrlx","text":"Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode","title":"Install the Snap on the ctrlX"},{"location":"samples-python/datalayer.client.browse/index.html#install-the-snap-on-the-ctrlx_1","text":"Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode","title":"Install the Snap on the ctrlX"},{"location":"samples-python/datalayer.client.browse/index.html#troubleshooting","text":"If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f rexroth-python-client Ensure the alldataprovider snap is installed and running.","title":"Troubleshooting"},{"location":"samples-python/datalayer.client.browse/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-python/datalayer.client.browse/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.client.light/index.html","text":"README datalayer.client.light \u00b6 This simple python sample reads values from ctrlX Data Layer. Introduction \u00b6 The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop. Prerequisites for Developing python Apps \u00b6 Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory) Getting Started \u00b6 As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files. Install Virtual Environment \u00b6 We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate Install Wheels \u00b6 Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-* Start IDE \u00b6 Start your IDE, open main.py and start the program. Build an AMD64 Snap \u00b6 Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter. Version 2.43 \u00b6 To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft Version 4.x or higher \u00b6 To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU. Install the Snap on the ctrlX \u00b6 Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode Troubleshooting \u00b6 If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f rexroth-python-client Ensure the alldataprovider snap is installed and running. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Client"},{"location":"samples-python/datalayer.client.light/index.html#readme-datalayerclientlight","text":"This simple python sample reads values from ctrlX Data Layer.","title":"README datalayer.client.light"},{"location":"samples-python/datalayer.client.light/index.html#introduction","text":"The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop.","title":"Introduction"},{"location":"samples-python/datalayer.client.light/index.html#prerequisites-for-developing-python-apps","text":"Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory)","title":"Prerequisites for Developing python Apps"},{"location":"samples-python/datalayer.client.light/index.html#getting-started","text":"As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files.","title":"Getting Started"},{"location":"samples-python/datalayer.client.light/index.html#install-virtual-environment","text":"We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate","title":"Install Virtual Environment"},{"location":"samples-python/datalayer.client.light/index.html#install-wheels","text":"Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-*","title":"Install Wheels"},{"location":"samples-python/datalayer.client.light/index.html#start-ide","text":"Start your IDE, open main.py and start the program.","title":"Start IDE"},{"location":"samples-python/datalayer.client.light/index.html#build-an-amd64-snap","text":"Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter.","title":"Build an AMD64 Snap"},{"location":"samples-python/datalayer.client.light/index.html#version-243","text":"To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft","title":"Version 2.43"},{"location":"samples-python/datalayer.client.light/index.html#version-4x-or-higher","text":"To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU.","title":"Version 4.x or higher"},{"location":"samples-python/datalayer.client.light/index.html#install-the-snap-on-the-ctrlx","text":"Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode","title":"Install the Snap on the ctrlX"},{"location":"samples-python/datalayer.client.light/index.html#troubleshooting","text":"If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f rexroth-python-client Ensure the alldataprovider snap is installed and running.","title":"Troubleshooting"},{"location":"samples-python/datalayer.client.light/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-python/datalayer.client.light/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.client.sub/index.html","text":"ctrlX Data Layer Client Sample in Python \u00b6 This app is a ctrlX Data Layer Client written in Python which fetches Data Layer data via subscriptions. Introduction \u00b6 The code shows how in Python the values of the ctrlX Data Layer are subscribed. Code snippets can be used in your own Python app. Prerequisites for Developing Python Apps \u00b6 Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory) Getting Started \u00b6 As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files. Install Virtual Environment \u00b6 We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate Install Wheels \u00b6 Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-* Start IDE \u00b6 Start your IDE, open main.py and start the program. Build an AMD64 Snap \u00b6 Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter. Version 2.43 \u00b6 To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft Version 4.x or higher \u00b6 To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU. Install the Snap on the ctrlX \u00b6 Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode Troubleshooting \u00b6 If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: sudo snap logs -f sdk-py-datalayer-client-sub Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Client Subscription"},{"location":"samples-python/datalayer.client.sub/index.html#ctrlx-data-layer-client-sample-in-python","text":"This app is a ctrlX Data Layer Client written in Python which fetches Data Layer data via subscriptions.","title":"ctrlX Data Layer Client Sample in Python"},{"location":"samples-python/datalayer.client.sub/index.html#introduction","text":"The code shows how in Python the values of the ctrlX Data Layer are subscribed. Code snippets can be used in your own Python app.","title":"Introduction"},{"location":"samples-python/datalayer.client.sub/index.html#prerequisites-for-developing-python-apps","text":"Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory)","title":"Prerequisites for Developing Python Apps"},{"location":"samples-python/datalayer.client.sub/index.html#getting-started","text":"As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files.","title":"Getting Started"},{"location":"samples-python/datalayer.client.sub/index.html#install-virtual-environment","text":"We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate","title":"Install Virtual Environment"},{"location":"samples-python/datalayer.client.sub/index.html#install-wheels","text":"Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-*","title":"Install Wheels"},{"location":"samples-python/datalayer.client.sub/index.html#start-ide","text":"Start your IDE, open main.py and start the program.","title":"Start IDE"},{"location":"samples-python/datalayer.client.sub/index.html#build-an-amd64-snap","text":"Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter.","title":"Build an AMD64 Snap"},{"location":"samples-python/datalayer.client.sub/index.html#version-243","text":"To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft","title":"Version 2.43"},{"location":"samples-python/datalayer.client.sub/index.html#version-4x-or-higher","text":"To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU.","title":"Version 4.x or higher"},{"location":"samples-python/datalayer.client.sub/index.html#install-the-snap-on-the-ctrlx","text":"Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode","title":"Install the Snap on the ctrlX"},{"location":"samples-python/datalayer.client.sub/index.html#troubleshooting","text":"If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: sudo snap logs -f sdk-py-datalayer-client-sub","title":"Troubleshooting"},{"location":"samples-python/datalayer.client.sub/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-python/datalayer.client.sub/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.provider/index.html","text":"README datalayer.provider \u00b6 This python app datalayer.provider provides Data Layer nodes. It can be used as sample to implement own apps. Introduction \u00b6 The app demonstrates how a Data Layer connecion is established and a node is provided. Prerequisites for Developing Python Apps \u00b6 Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory) Getting Started \u00b6 As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files. Install Virtual Environment \u00b6 We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate Install Wheels \u00b6 Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-* Compile Flatbuffers Schema \u00b6 In order to be able to work with the flatbuffers schema you need to compile sampleSchema.fbs with the flatc compiler. To create a binary flatbuffers file start this command: ../../bin/oss.flatbuffers/linux-gcc-x64/release/flatc -o bin/ -b --schema sampleSchema.fbs Generate sample/schema/InertialValue.py: ../../bin/oss.flatbuffers/linux-gcc-x64/release/flatc --python sampleSchema.fbs Start IDE \u00b6 Start your IDE, open main.py and start the program. Build an AMD64 Snap \u00b6 Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter. Version 2.43 \u00b6 To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft Version 4.x or higher \u00b6 To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU. Install the Snap on the ctrlX \u00b6 Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode Troubleshooting \u00b6 If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f sdk-py-datalayer-provider Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Provider"},{"location":"samples-python/datalayer.provider/index.html#readme-datalayerprovider","text":"This python app datalayer.provider provides Data Layer nodes. It can be used as sample to implement own apps.","title":"README datalayer.provider"},{"location":"samples-python/datalayer.provider/index.html#introduction","text":"The app demonstrates how a Data Layer connecion is established and a node is provided.","title":"Introduction"},{"location":"samples-python/datalayer.provider/index.html#prerequisites-for-developing-python-apps","text":"Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory)","title":"Prerequisites for Developing Python Apps"},{"location":"samples-python/datalayer.provider/index.html#getting-started","text":"As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files.","title":"Getting Started"},{"location":"samples-python/datalayer.provider/index.html#install-virtual-environment","text":"We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate","title":"Install Virtual Environment"},{"location":"samples-python/datalayer.provider/index.html#install-wheels","text":"Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-*","title":"Install Wheels"},{"location":"samples-python/datalayer.provider/index.html#compile-flatbuffers-schema","text":"In order to be able to work with the flatbuffers schema you need to compile sampleSchema.fbs with the flatc compiler. To create a binary flatbuffers file start this command: ../../bin/oss.flatbuffers/linux-gcc-x64/release/flatc -o bin/ -b --schema sampleSchema.fbs Generate sample/schema/InertialValue.py: ../../bin/oss.flatbuffers/linux-gcc-x64/release/flatc --python sampleSchema.fbs","title":"Compile Flatbuffers Schema"},{"location":"samples-python/datalayer.provider/index.html#start-ide","text":"Start your IDE, open main.py and start the program.","title":"Start IDE"},{"location":"samples-python/datalayer.provider/index.html#build-an-amd64-snap","text":"Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter.","title":"Build an AMD64 Snap"},{"location":"samples-python/datalayer.provider/index.html#version-243","text":"To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft","title":"Version 2.43"},{"location":"samples-python/datalayer.provider/index.html#version-4x-or-higher","text":"To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU.","title":"Version 4.x or higher"},{"location":"samples-python/datalayer.provider/index.html#install-the-snap-on-the-ctrlx","text":"Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode","title":"Install the Snap on the ctrlX"},{"location":"samples-python/datalayer.provider/index.html#troubleshooting","text":"If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f sdk-py-datalayer-provider","title":"Troubleshooting"},{"location":"samples-python/datalayer.provider/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-python/datalayer.provider/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.provider.all-data/index.html","text":"README datalayer.provider.alldata \u00b6 This python app datalayer.provider.alldata provides Data Layer nodes. It can be used as sample to implement own apps. Introduction \u00b6 The app demonstrates how a Data Layer connecion is established and nodes are provided. Prerequisites for Developing Python Apps \u00b6 Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory) Getting Started \u00b6 As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files. Install Virtual Environment \u00b6 We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate Install Wheels \u00b6 Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-* Start IDE \u00b6 Start your IDE, open main.py and start the program. Build an AMD64 Snap \u00b6 Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter. Version 2.43 \u00b6 To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft Version 4.x or higher \u00b6 To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU. Install the Snap on the ctrlX \u00b6 Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode Troubleshooting \u00b6 Enable ssh accessto your If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f sdk-py-datalayer-provider-alldata Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Provider All Data"},{"location":"samples-python/datalayer.provider.all-data/index.html#readme-datalayerprovideralldata","text":"This python app datalayer.provider.alldata provides Data Layer nodes. It can be used as sample to implement own apps.","title":"README datalayer.provider.alldata"},{"location":"samples-python/datalayer.provider.all-data/index.html#introduction","text":"The app demonstrates how a Data Layer connecion is established and nodes are provided.","title":"Introduction"},{"location":"samples-python/datalayer.provider.all-data/index.html#prerequisites-for-developing-python-apps","text":"Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory)","title":"Prerequisites for Developing Python Apps"},{"location":"samples-python/datalayer.provider.all-data/index.html#getting-started","text":"As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files.","title":"Getting Started"},{"location":"samples-python/datalayer.provider.all-data/index.html#install-virtual-environment","text":"We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate","title":"Install Virtual Environment"},{"location":"samples-python/datalayer.provider.all-data/index.html#install-wheels","text":"Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-*","title":"Install Wheels"},{"location":"samples-python/datalayer.provider.all-data/index.html#start-ide","text":"Start your IDE, open main.py and start the program.","title":"Start IDE"},{"location":"samples-python/datalayer.provider.all-data/index.html#build-an-amd64-snap","text":"Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter.","title":"Build an AMD64 Snap"},{"location":"samples-python/datalayer.provider.all-data/index.html#version-243","text":"To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft","title":"Version 2.43"},{"location":"samples-python/datalayer.provider.all-data/index.html#version-4x-or-higher","text":"To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU.","title":"Version 4.x or higher"},{"location":"samples-python/datalayer.provider.all-data/index.html#install-the-snap-on-the-ctrlx","text":"Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode","title":"Install the Snap on the ctrlX"},{"location":"samples-python/datalayer.provider.all-data/index.html#troubleshooting","text":"Enable ssh accessto your If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f sdk-py-datalayer-provider-alldata","title":"Troubleshooting"},{"location":"samples-python/datalayer.provider.all-data/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-python/datalayer.provider.all-data/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/python.logbook/index.html","text":"README python.logbook \u00b6 This python app python.logbook showes how to log in different loglevels into the logbook Introduction \u00b6 The app demonstrates how to log using different loglevels. Prerequisites for Developing Python Apps \u00b6 Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory) Getting Started \u00b6 As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files. Install Virtual Environment \u00b6 We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate Install Wheels \u00b6 Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-* Start IDE \u00b6 Start your IDE, open main.py and start the program. Build an AMD64 Snap \u00b6 Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter. Version 2.43 \u00b6 To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft Version 4.x or higher \u00b6 To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU. Install the Snap on the ctrlX \u00b6 Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode Troubleshooting \u00b6 If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f rexroth-python-logbook Ensure the alldataprovider snap is installed and running. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Diagnostics Logbook"},{"location":"samples-python/python.logbook/index.html#readme-pythonlogbook","text":"This python app python.logbook showes how to log in different loglevels into the logbook","title":"README python.logbook"},{"location":"samples-python/python.logbook/index.html#introduction","text":"The app demonstrates how to log using different loglevels.","title":"Introduction"},{"location":"samples-python/python.logbook/index.html#prerequisites-for-developing-python-apps","text":"Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory)","title":"Prerequisites for Developing Python Apps"},{"location":"samples-python/python.logbook/index.html#getting-started","text":"As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files.","title":"Getting Started"},{"location":"samples-python/python.logbook/index.html#install-virtual-environment","text":"We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate","title":"Install Virtual Environment"},{"location":"samples-python/python.logbook/index.html#install-wheels","text":"Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-*","title":"Install Wheels"},{"location":"samples-python/python.logbook/index.html#start-ide","text":"Start your IDE, open main.py and start the program.","title":"Start IDE"},{"location":"samples-python/python.logbook/index.html#build-an-amd64-snap","text":"Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter.","title":"Build an AMD64 Snap"},{"location":"samples-python/python.logbook/index.html#version-243","text":"To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft","title":"Version 2.43"},{"location":"samples-python/python.logbook/index.html#version-4x-or-higher","text":"To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU.","title":"Version 4.x or higher"},{"location":"samples-python/python.logbook/index.html#install-the-snap-on-the-ctrlx","text":"Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode","title":"Install the Snap on the ctrlX"},{"location":"samples-python/python.logbook/index.html#troubleshooting","text":"If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f rexroth-python-logbook Ensure the alldataprovider snap is installed and running.","title":"Troubleshooting"},{"location":"samples-python/python.logbook/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-python/python.logbook/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/python.webserver/index.html","text":"README python.webserver \u00b6 This python app python.webserver deploys a simple webserver including Data Layer connection and user permissions with webinterface accessible from ctrlX webpage. Introduction \u00b6 The app shows how to build a simple webserver with reverse proxy and Data Layer access, setup user permissions through package-manifest and token authentification. Prerequisites for Developing Python Apps \u00b6 Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory) Getting Started \u00b6 As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files. Install Virtual Environment \u00b6 We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate Install Wheels \u00b6 Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-* Start IDE \u00b6 Start your IDE, open main.py and start the program. Build an AMD64 Snap \u00b6 Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter. Version 2.43 \u00b6 To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft Version 4.x or higher \u00b6 To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU. Debug App \u00b6 With debugging inside your local development environment you can run the program and step through the code while its connected to the Data Layer of your ctrlX CORE via tcp. 1. Select the Run icon in the Activity Bar on the side of VS Code. You can also use the keyboard shortcut Ctrl+Shift+D. 2. Click on the green play button on the top of VS Code to start debbuging process. Hint: Because the webserver checks the authentification token, its not possible to access the webpage while debugging inside your local development. Disable token checking in webserver.py to be able to access the webpage through url http://127.0.0.1:1234/python-webserver. Install the Snap on the ctrlX CORE \u00b6 Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode How to Use \u00b6 Once the installation of the snap was finished, you can access to the provided webpage through the sidebar or overview menu of ctrlX CORE webpage. The Python-Webpage allows you to read and write at the Data Layer (depends on permissions of the current user) and shows permissions of the current user. You can find the configuration of user permissions (scopes) at settings section Users & Permissions > Users The integration of the app inside ctrlX Core webpage (sidebar and overview integration, reverse proxy, bearertoken, scopes) is done by the package-manifest ( ./configs/package-assets/rexroth-python-webserver.package-manifest.json ). Take a look at package-manifest to find out the basics. Troubleshooting \u00b6 If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f rexroth-python-provider Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README python.webserver"},{"location":"samples-python/python.webserver/index.html#readme-pythonwebserver","text":"This python app python.webserver deploys a simple webserver including Data Layer connection and user permissions with webinterface accessible from ctrlX webpage.","title":"README python.webserver"},{"location":"samples-python/python.webserver/index.html#introduction","text":"The app shows how to build a simple webserver with reverse proxy and Data Layer access, setup user permissions through package-manifest and token authentification.","title":"Introduction"},{"location":"samples-python/python.webserver/index.html#prerequisites-for-developing-python-apps","text":"Linux Ubuntu 18.4 (or Windows PC running with Windows Subsystem for Linux (WSL) or a Virtual Box VM) Python3 is installed (VS Code extension in case of using WSL) ctrlX AUTOMATION SDK Version 1.8 is installed (extracted and copied to the Ubuntu users home directory)","title":"Prerequisites for Developing Python Apps"},{"location":"samples-python/python.webserver/index.html#getting-started","text":"As Integrated Development Environment (IDE) we recommend Visual Studio Code. Therefor the folder .vscode contains configuration files.","title":"Getting Started"},{"location":"samples-python/python.webserver/index.html#install-virtual-environment","text":"We recommend to create and activate a virtual environment. Start a terminal in the project directory (workspaceFolder) and enter: virtualenv -p python3 venv source venv/bin/activate","title":"Install Virtual Environment"},{"location":"samples-python/python.webserver/index.html#install-wheels","text":"Install the required packages: pip3 install -r requirements.txt pip3 install ../../whl/ctrlx_datalayer* pip3 install ../../whl/ctrlx_fbs-*","title":"Install Wheels"},{"location":"samples-python/python.webserver/index.html#start-ide","text":"Start your IDE, open main.py and start the program.","title":"Start IDE"},{"location":"samples-python/python.webserver/index.html#build-an-amd64-snap","text":"Check your snapcraft version with the command: snapcraft --version For cleaning and building snaps see according chapter.","title":"Build an AMD64 Snap"},{"location":"samples-python/python.webserver/index.html#version-243","text":"To clean the previous snap build results use: snapcraft clean Build the snap with: snapcraft","title":"Version 2.43"},{"location":"samples-python/python.webserver/index.html#version-4x-or-higher","text":"To clean the previous snap build results use: snapcraft clean --destructive-mode Build the snap with: snapcraft --destructive-mode Important: To build an ARM64 (AARCH64) snap use a native ARM64 computer or a virtual machine emulating the ARM64 CPU e.g. with QEMU.","title":"Version 4.x or higher"},{"location":"samples-python/python.webserver/index.html#debug-app","text":"With debugging inside your local development environment you can run the program and step through the code while its connected to the Data Layer of your ctrlX CORE via tcp. 1. Select the Run icon in the Activity Bar on the side of VS Code. You can also use the keyboard shortcut Ctrl+Shift+D. 2. Click on the green play button on the top of VS Code to start debbuging process. Hint: Because the webserver checks the authentification token, its not possible to access the webpage while debugging inside your local development. Disable token checking in webserver.py to be able to access the webpage through url http://127.0.0.1:1234/python-webserver.","title":"Debug App"},{"location":"samples-python/python.webserver/index.html#install-the-snap-on-the-ctrlx-core","text":"Open the ctrlX CORE Home page, select Settings - Apps, click on 'Service mode' and confirm. Click on the Settings icon and select 'Allow installation from unknown source' Select tab 'Local storage', click the + icon, upload and install the snap. Switch to Operation mode","title":"Install the Snap on the ctrlX CORE"},{"location":"samples-python/python.webserver/index.html#how-to-use","text":"Once the installation of the snap was finished, you can access to the provided webpage through the sidebar or overview menu of ctrlX CORE webpage. The Python-Webpage allows you to read and write at the Data Layer (depends on permissions of the current user) and shows permissions of the current user. You can find the configuration of user permissions (scopes) at settings section Users & Permissions > Users The integration of the app inside ctrlX Core webpage (sidebar and overview integration, reverse proxy, bearertoken, scopes) is done by the package-manifest ( ./configs/package-assets/rexroth-python-webserver.package-manifest.json ). Take a look at package-manifest to find out the basics.","title":"How to Use"},{"location":"samples-python/python.webserver/index.html#troubleshooting","text":"If your snap doesn't work well start a shell on the ctrlX and check the trace regarding your snap: $ sudo snap logs -f rexroth-python-provider","title":"Troubleshooting"},{"location":"samples-python/python.webserver/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-python/python.webserver/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-sh/index.html","text":"Shell Samples \u00b6 Find out the supported samples \u00b6 \"TPM2 Consumer\" How to use the TPM inside your application","title":"Shell Samples"},{"location":"samples-sh/index.html#shell-samples","text":"","title":"Shell Samples"},{"location":"samples-sh/index.html#find-out-the-supported-samples","text":"\"TPM2 Consumer\" How to use the TPM inside your application","title":"Find out the supported samples"},{"location":"samples-sh/tpm2.consumer/index.html","text":"README tpm2.consumer \u00b6 The sample app tpm2.consumer shows the basic usage of a TPM2 inside your application. Also see \"TPM2\" . Introduction \u00b6 It demonstrates how you can use the TPM2.0 of the ctrlX CORE or the emulated TPM2.0 on the ctrlX CORE virtual . Build the TPM2 Trusted Software Stack (TSS) including OpenSSL engine. Integrate your application into key and certificate management of the ctrlX CORE. Convert the TPM2 Key to a keyform usable with OpenSSL Use the TPM2 TSS OpenSSL engine with an example webserver Pre-requisites \u00b6 Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1. ctrlX CORE virtual or ctrlX CORE Getting Started \u00b6 Launch IDE (VSCode for example) Open the sample directory samples-sh/tpm2.consumer Build and install the snap as described in Setup section Go to the webinterface -> Settings -> Certificate & Keys -> TPM2 Webserver Create a key named \"webserver\" as RSA 2048 and \"HSM protected\" Create a certificate signing request (CSR), download Create a certificate (webserver.crt) with help of the CSR on your PC or CA # For example, create yourself a CA mkdir ca openssl genrsa -out ca/ca.key 2048 openssl req -new -x509 -days 10000 -key ca/ca.key -out ca/ca.crt openssl x509 -req -days 360 -in webserver_csr.pem -CA ca/ca.crt -CAkey ca/ca.key -CAcreateserial -out webserver.crt -sha256 Upload the certificate webserver.crt the TPM2 Webserver application Open webserver on Port 44330 of the ctrlX CORE or ctrlX CORE virtual (adapt port settings accordingly). Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Communitiy License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"TPM2 Consumer"},{"location":"samples-sh/tpm2.consumer/index.html#readme-tpm2consumer","text":"The sample app tpm2.consumer shows the basic usage of a TPM2 inside your application. Also see \"TPM2\" .","title":"README tpm2.consumer"},{"location":"samples-sh/tpm2.consumer/index.html#introduction","text":"It demonstrates how you can use the TPM2.0 of the ctrlX CORE or the emulated TPM2.0 on the ctrlX CORE virtual . Build the TPM2 Trusted Software Stack (TSS) including OpenSSL engine. Integrate your application into key and certificate management of the ctrlX CORE. Convert the TPM2 Key to a keyform usable with OpenSSL Use the TPM2 TSS OpenSSL engine with an example webserver","title":"Introduction"},{"location":"samples-sh/tpm2.consumer/index.html#pre-requisites","text":"Buildenvironment WSL or Virtual Box ctrlX AUTOMATION SDK Version 1. ctrlX CORE virtual or ctrlX CORE","title":"Pre-requisites"},{"location":"samples-sh/tpm2.consumer/index.html#getting-started","text":"Launch IDE (VSCode for example) Open the sample directory samples-sh/tpm2.consumer Build and install the snap as described in Setup section Go to the webinterface -> Settings -> Certificate & Keys -> TPM2 Webserver Create a key named \"webserver\" as RSA 2048 and \"HSM protected\" Create a certificate signing request (CSR), download Create a certificate (webserver.crt) with help of the CSR on your PC or CA # For example, create yourself a CA mkdir ca openssl genrsa -out ca/ca.key 2048 openssl req -new -x509 -days 10000 -key ca/ca.key -out ca/ca.crt openssl x509 -req -days 360 -in webserver_csr.pem -CA ca/ca.crt -CAkey ca/ca.key -CAcreateserial -out webserver.crt -sha256 Upload the certificate webserver.crt the TPM2 Webserver application Open webserver on Port 44330 of the ctrlX CORE or ctrlX CORE virtual (adapt port settings accordingly).","title":"Getting Started"},{"location":"samples-sh/tpm2.consumer/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Communitiy","title":"Support"},{"location":"samples-sh/tpm2.consumer/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}