{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"Home"},{"location":"about.html","text":"Copyright \u00a9 2020-2022 Bosch Rexroth AG. All rights reserved. Please note that any trademarks, logos and pictures contained or linked to in this Software are owned by or copyright \u00a9 Bosch Rexroth AG 2021 and not licensed under the Software's license terms. https://www.boschrexroth.com Bosch Rexroth AG Bgm.-Dr.-Nebel-Str. 2 97816 Lohr am Main GERMANY General Terms of Use \u00b6 In order to download and use the binary packages of the ctrlX AUTOMATION Software Development Kit you have to accept the Terms and Conditions for the Provision of Products of Bosch Rexroth AG Free of Charge Licenses \u00b6 MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"About"},{"location":"about.html#general-terms-of-use","text":"In order to download and use the binary packages of the ctrlX AUTOMATION Software Development Kit you have to accept the Terms and Conditions for the Provision of Products of Bosch Rexroth AG Free of Charge","title":"General Terms of Use"},{"location":"about.html#licenses","text":"MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licenses"},{"location":"app_builder_env_changes.html","text":"Software Development Kit for ctrlX AUTOMATION \u00b6 Version 1.16.0 July 15, 2022 \u00b6 Important The newest App Builder Environment is always provided with ctrlX WORKS. Only the AMD64 version is supported because for every programing language supported by the ctrlX AUTOMATION SDK cross build capability is provided. Common \u00b6 hostname: app-builder-amd64 User boschrexroth is created in the last step of the setup workflow Poweroff instead of reboot if setup is finished Installation scripts \u00b6 install-dotnet-sdk.sh : Install as Debian package install-nodejs-npm.sh : Add proxy infos to ~/.npmrc install-sdk.sh : Install Debian package ctrlx-datalayer-*.deb Additionally installed packages \u00b6 ssh, curl : Removed because they are installed in the base image. build-essential : New Version 1.14.0 March 15, 2022 \u00b6 Installation scripts \u00b6 install-snapcraft.sh : Improve robustness install-nodejs-npm.sh : Install as snap install-go.sh : Install as snap install-go.sh : New Additionally installed packages \u00b6 pkg-config : New libzmq3-dev:amd64 : New libzmq3-dev:arm64 : New","title":"App builder env changes"},{"location":"app_builder_env_changes.html#software-development-kit-for-ctrlx-automation","text":"","title":"Software Development Kit for ctrlX AUTOMATION"},{"location":"app_builder_env_changes.html#version-1160-july-15-2022","text":"Important The newest App Builder Environment is always provided with ctrlX WORKS. Only the AMD64 version is supported because for every programing language supported by the ctrlX AUTOMATION SDK cross build capability is provided.","title":"Version 1.16.0  July 15, 2022"},{"location":"app_builder_env_changes.html#common","text":"hostname: app-builder-amd64 User boschrexroth is created in the last step of the setup workflow Poweroff instead of reboot if setup is finished","title":"Common"},{"location":"app_builder_env_changes.html#installation-scripts","text":"install-dotnet-sdk.sh : Install as Debian package install-nodejs-npm.sh : Add proxy infos to ~/.npmrc install-sdk.sh : Install Debian package ctrlx-datalayer-*.deb","title":"Installation scripts"},{"location":"app_builder_env_changes.html#additionally-installed-packages","text":"ssh, curl : Removed because they are installed in the base image. build-essential : New","title":"Additionally installed packages"},{"location":"app_builder_env_changes.html#version-1140-march-15-2022","text":"","title":"Version 1.14.0  March 15, 2022"},{"location":"app_builder_env_changes.html#installation-scripts_1","text":"install-snapcraft.sh : Improve robustness install-nodejs-npm.sh : Install as snap install-go.sh : Install as snap install-go.sh : New","title":"Installation scripts"},{"location":"app_builder_env_changes.html#additionally-installed-packages_1","text":"pkg-config : New libzmq3-dev:amd64 : New libzmq3-dev:arm64 : New","title":"Additionally installed packages"},{"location":"appdevguide.html","text":"Liability The information in this guideline is intended for product description purposes only and shall not be deemed to be of a warranty nature, unless expressly stipulated by contract. All rights are reserved with respect to the content of this documentation and the availability of the product. Table of Contents \u00b6 1 Introduction 2 App Validation Process 3 App Categories 4 Basic App Information (mandatory) 5 Further App Information (conditional) 6 Working Set Overview (mandatory) 7 ctrlX Basic Mechanisms (mandatory) 8 ctrlX Security System (optional) 9 ctrlX User Interface and Project Handling (optional) 10 ctrlX AUTOMATION System Functions (optional) 11 Real Time Extension (optional) 12 Licensing (optional) 1 Introduction \u00b6 This guideline provides guidance for app developers and partners who want to contribute to the ctrlX World Ecosystem with new apps. This is a living document. New apps might lead to new topics and may result in new guidelines at any time. 1.1 App Development for ctrlX AUTOMATION \u00b6 The open ctrlX AUTOMATION system architecture allows developers to implement further system functions with little effort at any time as apps and as open source software. This document provides guidance on how to create apps to integrate them perfectly into ctrlX AUTOMATION. Bosch Rexroth approves an app as qualified for ctrlX AUTOMATION using a dedicated app validation and signing process. This process ensures that the app meets the ctrlX AUTOMATION quality standards. This document describes all aspects that have to be considered when an app is developed. Some aspects are mandatory , both from a legal and technical viewpoint. Others are optional and describe how an app can be fully integrated in the ctrlX system architecture to provide the best user experience. 1.2 Obligations for Technical Aspects \u00b6 This document describes the technical aspects for ctrlX apps. These aspects each have one of the following obligations: MANDATORY - This aspect is strictly required and must be implemented. OPTIONAL This aspect brings added value and can or should be implemented. CONDITIONAL - This aspect is to be implemented in specific cases**. Bosch Rexroth and the partner identify the requirements during the app integration process. 1.3 Partner Contract and Legal Framework \u00b6 This development guide describes the technical integration of an app into ctrlX CORE. The following documents also need to be available and signed as non-technical prerequisites before an app gets published: The Software Distribution Framework agreement (\"Partner Contract\") describes the fundamental constraints of the partnership between you as app developer and Bosch Rexroth and affiliates A License Contract describes all app related licenses as part of the product to be sold within Bosch Rexroth and affiliates sales channels Optionally a Letter of Intent (LOI) Optionally a Non Disclosure Agreement (NDA) 2 App Validation Process \u00b6 As a mandatory step for app integration into ctrlX, Bosch Rexroth will carry out a standard app validation and signing process. For handover, Bosch Rexroth accordingly provides a ctrlX World Partner Portal SharePoint space, which will be prepared during the partner contracting process. 2.1 Initial Meeting for App Validation \u00b6 Before the validation process starts, the partner / app developer must provide the app architecture A picture of the main communication paths is needed, including a modular overview of the app a short description of the communication paths to other apps/devices the app configuration and data storage concept a description of a typical standard scenario The architecture overview should be stored as \" architecture-overview.x \" in the {app-name} folder and should be delivered with each new app version. This document typically will be provided for an initial meeting with the partner / app developer, the relevant Bosch Rexroth partner manager and the Bosch Rexroth app validation team. At this point, the partner should also already have uploaded the necessary artifacts to be able to clarify any open points. 2.2 Artifacts\u2019 Delivery \u00b6 Bosch Rexroth checks the provided artifacts and the described behavior of an app that is to be signed as an official ctrlX app in an automated validation framework. This validation framework requires a standard format for artifacts and information. To simplify the delivery of artifacts, we provide a base folder structure with description and schema files. This helps app developers to deliver the required artifacts and us to simplify the validation work. Please use the given structure, folder names and file names as given below, without any renaming. The provided artifacts and information must be organized in the following way: General Folder structure {company-name}\\ - Partner company name. Folder name is created by Bosch Rexroth {app-name}\\ - Technical app name. This app name is unique. A folder will be created by the partner {version}\\ - The version folder separates the different versions. Format is three numbers separated by dots, e.g. \"1.0.2\". Each version has to be stored in a separate folder. A folder will be created by the partner {artifacts}\\ - The required documents as input for the validation process (see 4.1) Handover of artifacts Once all the required information is available in your local folder, zip the folder using Windows-zip and upload it as \" artifacts.zip \" to the ctrlX World Partner Portal space in the \" .../{company-name}/{app-name}/{version}/ \" path. Important To avoid problems when uploading the artifacts.zip file, please use the Windows-zip feature 2.4 Validation and Signing \u00b6 Validation is typically carried out in several iterations, depending on the result of a particular validation activity. If all the required information is provided in the ctrlX World Partner Portal space, an email to ctrlx.world@boschrexroth.de will trigger a validation loop. Basically, the workflow will be as follows: Partner/app developer: Uploads required artifacts and informs Bosch Rexroth Bosch Rexroth checks the artifacts for completeness. If rework is required, the partner will be notified by email with an attached report in the \" .../{company-name}/{app-name}/{version}/results \" folder Once the artifacts are complete, the validation will start. Again, if rework is required, the partner will be notified with an attached report Once validation has been successful, Bosch Rexroth will sign the app and inform the partner by email. 3 App Categories \u00b6 Apps can be integrated into ctrlX on different levels. Three categories are defined as guidance for the prerequisites and possibilities on different levels. A category, however, is not a formal boundary, and an app can seamlessly support aspects in the different categories. Also, subsequent versions of an app might support more aspects than an earlier version. In addition, there is no correlation between the category and an app\u2019s business value. However, at least all aspects that are mentioned in Category 1 need to be met, since they are considered mandatory . The aspects are briefly described in this section The remainder of these documents provides detailed information about all aspects and also refers to additional sources of information, like how-to documents and code samples. 3.1 Category 1 (Basic): Applies to ctrlX basic mechanisms \u00b6 To be approved as an official ctrlX CORE app, an app must support a minimum set of mandatory aspects. 3.1.1 Overview \u00b6 The app itself and corresponding user documentation need to be provided. Legal aspects like FOSS are also required. Working set information is needed to support the test and validation process. During runtime, the app must use the ctrlX CORE onboard licensing mechanism. 3.1.2 Customer User Experience \u00b6 Customers can find the app in the ctrlX App Store. They know how the app is licensed and can use the overall Bosch Rexroth licensing system for ctrlX. They can also be sure that the app contributes to the basic ctrlX CORE security mechanisms. 3.1.3 Technical Prerequisites \u00b6 Note As mentioned, the aspects listed here are MANDATORY . This means all of them are required for an official ctrlX app. Basic app information: App artifacts (\u201cExecutables\u201d for ctrlX CORE and ctrlX CORE virtual and basic technical information) App documentation / user manual and release notes Additional app properties according to Linux Ubuntu conventions FOSS information Working set overview: Information about security behavior (Linux slots & plugs, ports, sockets) Information about resource consumption and read/write operations Standard task scheduling overview Test setup description for typical usage scenario Integration into ctrlX basic mechanisms: Use of ctrlX license handling App signed by Bosch Rexroth 3.2 Category 2 (Advanced): Contributes to ctrlX engineering concepts \u00b6 For good integration into ctrlX from a user's point of view, an app should meet the aspects of Category 2 \u2013 even if these aspects are not necessary for app validation. 3.2.1 Overview \u00b6 The app uses the relevant ctrlX system interfaces and supports ctrlX platform features like Identity Management, Data Management and Backup/Restore. 3.2.2 Customer User Experience \u00b6 The app contributes to the ctrlX user interface and system behavior. It integrates into basic user stories for configuration and maintenance of a ctrlX application. 3.2.3 Technical Recommendations \u00b6 Note As mentioned, the aspects listed here are OPTIONAL . However, they are highly recommended for a good user experience. Also, the category 2 and 3 aspects overlap and not formally separated Further app information: FOSS sources Semantic versioning scheme Integration into ctrlX CORE security system: ctrlX CORE reverse proxy ctrlX Key & Certificate Management ctrlX Identity Management Improved network security (no insecure protocols) Integration into ctrlX user interface and project handling ctrlX CORE navigation pane and landing page ctrlX CORE configuration storage 3.3 Category 3 (Extended): Extends ctrlX AUTOMATION features \u00b6 Finally, an app can integrate in the Automation framework and extend the ctrlX real time system Note Real time integration requires additional training and support from Bosch Rexroth to avoid unexpected system behavior and impacts on the ctrlX real-time kernel. 3.3.1 Description \u00b6 The app exposes information in the ctrlX Data Layer for all other apps. It also can extend the real time functions of ctrlX if connected to the real-time task scheduler 3.3.2 Customer User Experience \u00b6 The app extends the ctrlX AUTOMATION system functions, e.g. for Motion and/or PLC 3.3.3 Technical Recommendations \u00b6 Integration into ctrlX AUTOMATION system functions: ctrlX Data Layer ctrlX CORE logbook and diagnostics system Real-time extension: ctrlX CORE Scheduler 4 Basic App Information ( MANDATORY ) \u00b6 The basic app information is checked as a prerequisite by Bosch Rexroth, before the validation process starts. 4.1 App Artifacts ( MANDATORY ) \u00b6 4.1.1 Artifacts Folder Template \u00b6 The ctrlX World Partner Portal provides a file (artifacts.zip), which can be downloaded and extracted locally. This will create the required folder structure for the mandatory artifacts out-of-the-box, with default descriptions and schema files. !!!! important Please use the given structure, folder names and file names unchanged. This will support an efficient validation process. The artifacts are organized in five sub folders: 4.1.2 \"Disclosure\" folder ( MANDATORY ) \u00b6 The FOSS source files and license text files are stored in the disclosure folder \"fossinfo.json\" ( MANDATORY ) - license texts for all an app\u2019s used open source software. For more information about format and content, refer to the json example and the corresponding json schema in the standard \"artifacts.zip\" file. \"foss-sources.zip\" ( CONDITIONAL ) - In the foss-sources.zip file, the sources of all used open source libraries / packages are zipped without a password. \"foss-offer.x\" ( CONDITIONAL ) - If the foss-sources.zip file is not provided, a human-readable file with the name \"offer.x\" is needed. It explains how the user can get the sources. Either FOSS sources or FOSS offer is required . 4.1.3 \"Build Info\" folder ( MANDATORY ) \u00b6 The build info folder stores all build relevant information. Note: For the {xxx}-description files, a default file (with explanation) and the corresponding schema is provided in the standard artifacts.zip example. \"snapcraft.yaml\" ( MANDATORY ) - The snapcraft.yaml file is the main entry point to create a snap through Snapcraft. It contains all the details the snapcraft command needs to build a snap. See also https://snapcraft.io/docs/snapcraft-yaml-reference \"package-manifest.json\" ( MANDATORY ) - The package-manifest.json covers essential settings, like the proxy URL \"portlist-description.json\" ( MANDATORY ) - All used ports are described in the port list \"unixsocket-description.json\" ( MANDATORY ) - All used Unix sockets are described in the Unix socket description. If your app does not use a Unix socket, provide an empty description file \"slotplug-description.json\" ( MANDATORY ) - All used slot and plugs are described in the slot and plug description 4.1.4 \"Documentation\" folder ( MANDATORY ) \u00b6 All documentation relevant to the app is provided here \"manual.pdf\" ( MANDATORY ) - The app description (user manual) documents the app\u2019s overall functionality \"test-setup-description.pdf\" ( MANDATORY ) - The app setup describes how to configure the app on a ctrlX device for a typical usage and test scenario \"release-notes.pdf\" ( MANDATORY ) - The latest changes, workarounds and defects are mentioned in the release notes 4.1.5 \"App States\" folder ( MANDATORY ) \u00b6 The app validation framework tries to establish relevant states that have to be tested. Therefore, a sequence of API calls has to be provided to bring the app to the test state \"standard-scenario1.json\" ( MANDATORY ) - Each file contains a collection (sequence of RESTAPI calls) to generate the standard usage scenario. In each of these scenarios, the validation process monitors the memory and storage usage, the CPU load and the Ethernet communication load. The collections/files are to be created using Postman. \"standard-scenario{2 to n}.json\" (optional) - One or more scenarios, if appropriate 4.1.6 \"Snaps\" folder ( MANDATORY ) \u00b6 ctrlX currently supports the amd64 and the arm64 processor architecture. The corresponding target snaps for the app are provided here \"{TechnicalAppName}_{version}_arm64.snap\" ( MANDATORY ) - Snap that runs in armd64 environments. Currently, the arm64 architecture is used in ctrlX CORE hardware. \"{TechnicalAppName}_{version}_amd64.snap\" ( OPTIONAL ) - Snap that runs in amd64 environments. The amd64 is used in ctrlX CORE virtual . However, future ctrlX CORE hardware will also use amd64 architecture. So, it is recommended that a snap is also provided for this platform to avoid future inconvenience. 4.2 App Documentation ( MANDATORY ) \u00b6 4.2.1 User Manual ( MANDATORY ) \u00b6 A user manual must be delivered together with the app. The user manual must describe typical user actions for commissioning and operating the app from a user / customer perspective. 4.2.2 Test Setup Description ( MANDATORY ) \u00b6 A test setup description must be delivered together with the app. The test setup description must contain instructions to realize a test scenario. It must include a description of sequences and dependencies, e.g. additional hardware. If you use plugs and slots, please provide an explanation here. 4.2.3 Release Notes ( MANDATORY ) \u00b6 Release note documentation must be delivered together with the app. 4.2.4 General App Description for the ctrlX App Zone ( CONDITIONAL ) \u00b6 Each app needs product information as part of the sales package. The description shall be generated based on the app description template (from the ctrlX World Partner Portal) The app description package is necessary in case the app is also to be shown in the ctrlX AUTOMATION Community App Zone or other marketing channels. 4.3 Additional App Information According to Linux Ubuntu Conventions ( MANDATORY ) \u00b6 The following properties must be defined within the \"snapcraft.yaml\" file (see https://snapcraft.io/docs/snapcraft-yaml-reference), which also need to be exclusively part of the app and have to be collision free with other apps. Title - The general name of the app that will be shown on all sales channels and customer touch points, e.g. app overview or ctrlX App Store. This is defined together with the partner manager, as part of the business model definitions. Example: \"My App\" Name - The technical name of the snap. The name has to be unique in the snap universe and across all snap developer and device vendors. The snap name has to start with \"ctrlx-\" and must be lowercase and a maximum length of 32 characters . ctrlX World Partners add their company name to the snap name. Example: \"ctrlx-partnername-myapp\" Confinement - Must be set to \"strict\" for releases. See also https://snapcraft.io/docs/snap-confinement Grade - Defines the quality grade of the app. During development, you may choose to use \"devel\" . When releasing the application, the grade must be set to \"stable\" . 4.4 FOSS Info Provisioning ( MANDATORY ) \u00b6 If the app uses Free and Open Source Software (FOSS), certain license information must be delivered together with the app. With \"fossinfo.xml\" the open source license text must be disclosed for copyright reasons. Bosch Rexroth offers the possibility to display the license texts for the used open source software in the ctrlX web interface. For more information about \"fossinfo.xml\" please refer to the guideline in the SDK. If FOSS license texts are displayed within the app, at least a reference to the license display in the app must be provided in the \"fossinfo.xml\". Since users must be able to view the license texts before the open source software is installed, the \"fossinfo.xml\" must also be stored outside the app in the \"disclosure\" directory (see section 3.1.2). In addition, the license texts must be listed within the user documentation or at least a reference must be inserted where the FOSS license texts are located. 5 Further App Information ( CONDITIONAL ) \u00b6 5.1 FOSS Sources ( CONDITIONAL ) \u00b6 Bosch Rexroth recommends putting all FOSS sources in a zip file with the file name \"foss-sources.zip\" and storing it in the \"disclosure\" directory, where the \"fossinfo.xml\" is provided. In the event that the FOSS sources are not provided directly, a written offer is mandatory for open source software with copyleft clause (e.g. GPLv2 or GPLv3) . This means, a human-readable file with the name \"foss-offer.x\" needs to be provided, which explains how the user can get the app\u2019s FOSS sources. 5.2 Semantic Versioning Scheme ( OPTIONAL ) \u00b6 It is recommended that a versioning scheme is used based on https://semver.org/ for the app\u2019s versioning. This setting is also relevant in the snapcraft.yaml file while creating the snap. Note Increasing version numbers are mandatory, regardless of the versioning scheme used 5.3 Restart Delay ( OPTIONAL ) \u00b6 The restart delay of the app daemon should be set to \"5s\" or similar in the snapcraft.yaml to prevent the 10s lock-out 6 Working Set Overview ( MANDATORY ) \u00b6 6.1 Security Information & Considerations \u00b6 ctrlX CORE is designed with high security requirements. Also, the overall ctrlX CORE architecture is built to be compliant to be certified as defined by IEC62433. This also implies some requirements for the apps and software running in the ctrlX Ecosystem. For the ctrlX app, this means Only encrypted and secured communication protocols (e.g. https) must be used. Insecure protocols (e.g. http) are not to be used, unless explicitly defined in the validation process. The device attack surface should be kept as minimal as possible. This means, for example, that the number of open ports in an app should be reduced to a minimum. 6.1.1 Interfaces / Slots & Plugs ( MANDATORY ) \u00b6 Used interfaces (Slots & Plugs) must be documented in the snapcraft.yaml file. The following considerations must be taken into account: Use as few interfaces (slots/plugs) as possible . The amount of interfaces (slots & plugs) shall be limited to a minimum . The app should only declare the interfaces (slots and/or plugs) that are absolutely required to minimize the attack surface. When reviewing the app, Bosch Rexroth needs to know for which purpose a specific slot and/or plug is required by an app. Corresponding justification must be provided together with the app. No global slots & plugs . App developers must avoid assigning global slots & plugs that are valid for all applications. Global slots & plugs should only be used if absolutely necessary. Debug interfaces only on demand . By default, the app should not provide any open network debug interfaces. If debugging is required, the user should be able to enable the debug interface on demand and only after successful authentication (and authorization). In general, debug interfaces shall not be accessible without authentication and/or insufficient or even hard-coded credentials. The following operating system interfaces are denied or restricted for usage. See also https://snapcraft.io/docs/supported-interfaces. Interface Direction Parameters Exceptions Reason udisk2 Plug & Slot system-files Plug * \"read=^(\\/dev\\/shm| \\/dev\\/shm\\/.+)$\", \"write=^(\\/dev\\/shm| \\/dev\\/shm\\/.+)$\" snapd-control Plug * Prevent uncontrolled access to system configuration. raw-volumes Plug Prevent mounting of partitions. process-control Plug Prevent tampering with running processes. content Plug content=package-certificates Prevent apps to act as device admin. content Plug content=package-run Prevent apps to act as device admin. content Plug content=package-assets Prevent apps to act as device admin. content Slot content=auth-service Prevent unauthorized access, service to service authentication. content Slot content=active-solution Prevent apps to act as solution snap. block-devices Plug Prevent mounting of partitions. account-control Plug * Prevent uncontrolled access to user and group databases. removable-media Plug Prevent uncontrolled access to removal media (micro sd, USB). This list is subject to change and might be extended. If unsure, please provide the slot/plug you want to use inside your application together with justification to check whether or not this specific slot/plug is allowed and find potential alternatives. 6.1.2 Network Security and Ports ( CONDITIONAL ) \u00b6 The package-manifest.json must provide information about the used network interfaces. The app must keep its network footprint as low as possible: No open debug ports by default Binding webserver to Unix socket (preferred) or at least localhost Security protocols are to be used by default. This means: No exposure of insecure protocols like http or web socket. ctrlX reverse proxy integration should be used for those specific protocols - Or, in cases where that is not possible, https/websocket secure should be used in the app. Secure protocols are to be used for non-web apps When the app supports secure & insecure protocols, a secure configuration preset must be used for the app, so that the user must choose to override this setting if they want to choose the insecure version The app must provide a list of ports to be used in order to avoid conflicts. The app must therefore be robust to already open / used ports. At least a warning is to be issued to the user. The following ports are blocked and cannot be used by an app: 22 80 81 443 1338 (UDP) 1880 1900 (UDP) 2069 2070 4840 5355 (UDP) 5353 6000 7878 8069 11740 11741 This list is subject to change and might be extended. 6.1.3 File Permissions ( CONDITIONAL ) \u00b6 It is very likely that an app stores settings & configuration data in the application's folder (e.g. $SNAP_DATA or $SNAP_COMMON). All file permissions have to be set properly so that only the owner of the files is allowed to read or alter the content. 6.2 Resource Consumption and Read/Write Operations ( MANDATORY ) \u00b6 Typically, more than one app runs on a ctrlX device. It is therefore very important than an app does not consume too many system resources (e.g. RAM or disk space). In addition, the available virtual memory on the device is limited to the amount of physical available memory, because the possibility of swapping unused RAM to disk is disabled on ctrlX devices. The reasons for this is the otherwise negative impact on real-time capability and flash disk lifetime. 6.2.1 Resource Consumption \u00b6 Recommended amount of resources per app: RAM: <75 MB Snap-Size: ideally <100 MB, as small as possible If an app exceeds these values by a long way, then please contact your app partner support to clarify this further. 6.2.2 Integrated Storage/Flash Lifetime \u00b6 The app must not write diagnostics or similar data cyclically to the internal solid-state memory, as this will damage the flash cells. Instead, cyclical writing can be only be done to a network storage or any other external storage, as these allow easy and regular replacement for this use-case. The integrated storage medium and file system in the ctrlX CORE hardware is based on a solid state flash memory, which inherently has a limited lifetime based on the number of erase cycles for its memory cells. To increase the device\u2019s overall lifetime it is necessary to reduce the number of write/erase cycles on the flash cells. 6.3 Standard Task Scheduling ( MANDATORY ) \u00b6 The app must not have a negative impact on the real-time behavior of other apps. The scheduling / task scheme must remain flexible to allow other apps to run, e.g. the ctrlX Motion app. 6.4 Test Setup for Typical Usage Scenario ( MANDATORY ) \u00b6 For a fast and efficient start to the validation process, a usage scenario should be provided that does not require any peripheral components. This will help to identify the initial findings quickly and with comparatively little effort. If the app requires additional periphery to run properly, a separate usage scenario should be provided that describes the interaction with the external component. Videos and further media can be attached. 7 ctrlX Basic Mechanisms ( MANDATORY ) \u00b6 7.1 ctrlX License Handling ( MANDATORY ) \u00b6 A license model must be defined for each app which is part of ctrlX World. To ensure maximum usability for a ctrlX CORE user, the app must call up the ctrlX license manager API when it starts or is running to check if a license is activated. If a license is missing, the missing license will be shown to the user on a user interface (Note: This will be available after July 2021). A warning or error must be shown in case the license is missing. Each software license (SWL) bought by a customer generates one or more capabilities: Each app checks the existence of these capabilities, using the license manager interface An app license shall be enforced according to the app business model as part of the contract addendum The usage of other licensing mechanisms is not allowed The licensing interface will be available by March 2021 Note Currently, the License Manager does not return licenses on a ctrlX COREvirtual. 7.2 App Signing by Bosch Rexroth ( MANDATORY ) \u00b6 To make sure that only apps that have successfully passed the validation process are available as a ctrlX app, these Apps need to be signed by Bosch Rexroth. During the signing process, the app binaries are checked and combined with a signature. This signature guarantees that the app cannot be modified after the validation and signing process. Note At the moment, only Bosch Rexroth can sign ctrlX apps 8 ctrlX Security System ( OPTIONAL ) \u00b6 8.1 ctrlX CORE reverse proxy ( OPTIONAL ) \u00b6 The proxy URL is the most important setting in the package-manifest.json file for the app to be integrated seamlessly into the ctrlX CORE. The reverse proxy will forward requests to the URL that are defined for the app web service. An app is to be bound to a Unix socket instead of a local port. This will also prevent potential collisions with other services. Warning We strongly recommend binding the app web service to a Unix socket, e.g. /var/snap/my-app/current/package-run/my-app/my-app.web.sock , instead of a local port. This will also prevent potential collisions with other services. The path length of a Unix socket is limited to 108 characters. The complete path must respect that limit and the highlighted part has a maximal length of 50 characters. The path can be shortened if necessary by replacing \"package-run\" with \"run\" and shortening the file name from \"my-app.web.sock\" to \"web.sock\". However the folder name within the package-run (or run) folder must always be the name of the snap. Note Example code can be found here: https://developer.community.boschrexroth.com/t5/ctrlX-WORKS/Example-IntegrationWebServer-to-Reverse-Proxy/m-p/20193#M216 8.2 ctrlX Key & Certificate Management ( OPTIONAL ) \u00b6 The ctrlX CORE certificate management is to be used to manage your application\u2019s certificates through the web interface. (package-manifest.json, snapcraft.yaml) Note: When the application acts as a ctrlX client, key & certificate based authentication has to be used whenever possible. If user & password based authentication is used, the configuration file permissions have to be correct so that no other user(s) on the system can read those data. 8.3 ctrlX Identity Management/Authentication & Authorization ( OPTIONAL ) \u00b6 When running a web service, the app should use the authentication & authorization mechanisms that the ctrlX CORE provides to protect the app against unauthorized access. If the mechanisms the ctrlX CORE provides are not used, hardcoded accounts/credentials have to be avoided. The ctrlX CORE's so called \"scopes\" are to be used to model app permissions. Scopes allow permissions to be assigned to users & groups via the web interface. If case permissions are used, the permissions must be enforced within the app (package-manifest.json) 9 ctrlX User Interface and Project Handling ( OPTIONAL ) \u00b6 9.1 ctrlX Configuration Storage ( CONDITIONAL ) \u00b6 The ctrlX CORE system provides multiple ways for an app to store its data. The app data must be persisted within one of these locations to provide consistent backup and restore mechanism to users. 9.1.1 Solution Handling ( OPTIONAL ) \u00b6 The so-called \"Solution\" is an essential part of any ctrlX CORE device. It provides a central storage location for all ctrlX apps that need to persist their app data in configurations. Configuration files are saved to the solution storage or loaded from the storage on demand (by the user or by REST API calls). A configuration file contains project-specific data, like machine-related, PLC, HMI, fieldbus configurations. To be used in the event of one or more configurations that can be easily switched by the user. Configurations are used and shared by multiple apps. It does not contain data that is related to a specific device, e.g. certificates, network configurations, users and their permissions, or should be valid for multiple configurations (e.g. app settings). Should be non-binary (in future version control system / GIT will be used). However, if there is no alternative and the files do not change too often, small binaries can be stored in a configuration. 9.2.2 Environment Variables ( CONDITIONAL ) \u00b6 Environment variables are widely used across Linux to provide convenient access to system and application properties (see also https://snapcraft.io/docs/environment-variables) In the specific context of ctrlX, the environment variables $SNAP_COMMON or $SNAP_DATA ... ...Contain app-related data, that can be used across multiple configurations, e.g. solutions. ...Shall not contain data related to the user application, e.g. machine program, and should be applicable on multiple configurations. $SNAP_DATA shall be used for app data related to a specific app version (snap revision). $SNAP_COMMON shall be app data used across versions (snap revisions). External storage / SD card and USB storage device (not available yet) \u00b6 Note These external storage devices are not supported at the moment. In the future, they May contain large data (>100MB) or data that is frequently changed, e.g. logs, analytics, database. Must only contain non-confidential (public) data or data must be protected on app side. Data can be accessed or manipulated from external storage devices. 10 ctrlX AUTOMATION System Functions ( OPTIONAL ) \u00b6 10.1 ctrlX Logbook and Diagnostic System \u00b6 For further information see https://docs.automation.boschrexroth.com 11 Real Time Extension ( OPTIONAL ) \u00b6 Please contact your partner manager if a real-time extension might be required for your app. 12 Licensing ( OPTIONAL ) \u00b6 If you are ctrlX World Partner you must use the licensing service that is operated by Bosch Rexroth. For information how to adapt an app to the licensing service please have look on the Licensing Page Copyright \u00a9 Bosch Rexroth AG 2021 This guideline, as well as the data, specifications and other information set forth in it, are the exclusive property of Bosch Rexroth AG. It may not be reproduced or given to third parties without our consent.","title":"App Developer Guideline"},{"location":"appdevguide.html#table-of-contents","text":"1 Introduction 2 App Validation Process 3 App Categories 4 Basic App Information (mandatory) 5 Further App Information (conditional) 6 Working Set Overview (mandatory) 7 ctrlX Basic Mechanisms (mandatory) 8 ctrlX Security System (optional) 9 ctrlX User Interface and Project Handling (optional) 10 ctrlX AUTOMATION System Functions (optional) 11 Real Time Extension (optional) 12 Licensing (optional)","title":"Table of Contents"},{"location":"appdevguide.html#1-introduction","text":"This guideline provides guidance for app developers and partners who want to contribute to the ctrlX World Ecosystem with new apps. This is a living document. New apps might lead to new topics and may result in new guidelines at any time.","title":"1 Introduction"},{"location":"appdevguide.html#11-app-development-for-ctrlx-automation","text":"The open ctrlX AUTOMATION system architecture allows developers to implement further system functions with little effort at any time as apps and as open source software. This document provides guidance on how to create apps to integrate them perfectly into ctrlX AUTOMATION. Bosch Rexroth approves an app as qualified for ctrlX AUTOMATION using a dedicated app validation and signing process. This process ensures that the app meets the ctrlX AUTOMATION quality standards. This document describes all aspects that have to be considered when an app is developed. Some aspects are mandatory , both from a legal and technical viewpoint. Others are optional and describe how an app can be fully integrated in the ctrlX system architecture to provide the best user experience.","title":"1.1 App Development for ctrlX AUTOMATION"},{"location":"appdevguide.html#12-obligations-for-technical-aspects","text":"This document describes the technical aspects for ctrlX apps. These aspects each have one of the following obligations: MANDATORY - This aspect is strictly required and must be implemented. OPTIONAL This aspect brings added value and can or should be implemented. CONDITIONAL - This aspect is to be implemented in specific cases**. Bosch Rexroth and the partner identify the requirements during the app integration process.","title":"1.2 Obligations for Technical Aspects"},{"location":"appdevguide.html#13-partner-contract-and-legal-framework","text":"This development guide describes the technical integration of an app into ctrlX CORE. The following documents also need to be available and signed as non-technical prerequisites before an app gets published: The Software Distribution Framework agreement (\"Partner Contract\") describes the fundamental constraints of the partnership between you as app developer and Bosch Rexroth and affiliates A License Contract describes all app related licenses as part of the product to be sold within Bosch Rexroth and affiliates sales channels Optionally a Letter of Intent (LOI) Optionally a Non Disclosure Agreement (NDA)","title":"1.3 Partner Contract and Legal Framework"},{"location":"appdevguide.html#2-app-validation-process","text":"As a mandatory step for app integration into ctrlX, Bosch Rexroth will carry out a standard app validation and signing process. For handover, Bosch Rexroth accordingly provides a ctrlX World Partner Portal SharePoint space, which will be prepared during the partner contracting process.","title":"2 App Validation Process"},{"location":"appdevguide.html#21-initial-meeting-for-app-validation","text":"Before the validation process starts, the partner / app developer must provide the app architecture A picture of the main communication paths is needed, including a modular overview of the app a short description of the communication paths to other apps/devices the app configuration and data storage concept a description of a typical standard scenario The architecture overview should be stored as \" architecture-overview.x \" in the {app-name} folder and should be delivered with each new app version. This document typically will be provided for an initial meeting with the partner / app developer, the relevant Bosch Rexroth partner manager and the Bosch Rexroth app validation team. At this point, the partner should also already have uploaded the necessary artifacts to be able to clarify any open points.","title":"2.1 Initial Meeting for App Validation"},{"location":"appdevguide.html#22-artifacts-delivery","text":"Bosch Rexroth checks the provided artifacts and the described behavior of an app that is to be signed as an official ctrlX app in an automated validation framework. This validation framework requires a standard format for artifacts and information. To simplify the delivery of artifacts, we provide a base folder structure with description and schema files. This helps app developers to deliver the required artifacts and us to simplify the validation work. Please use the given structure, folder names and file names as given below, without any renaming. The provided artifacts and information must be organized in the following way: General Folder structure {company-name}\\ - Partner company name. Folder name is created by Bosch Rexroth {app-name}\\ - Technical app name. This app name is unique. A folder will be created by the partner {version}\\ - The version folder separates the different versions. Format is three numbers separated by dots, e.g. \"1.0.2\". Each version has to be stored in a separate folder. A folder will be created by the partner {artifacts}\\ - The required documents as input for the validation process (see 4.1) Handover of artifacts Once all the required information is available in your local folder, zip the folder using Windows-zip and upload it as \" artifacts.zip \" to the ctrlX World Partner Portal space in the \" .../{company-name}/{app-name}/{version}/ \" path. Important To avoid problems when uploading the artifacts.zip file, please use the Windows-zip feature","title":"2.2 Artifacts\u2019 Delivery"},{"location":"appdevguide.html#24-validation-and-signing","text":"Validation is typically carried out in several iterations, depending on the result of a particular validation activity. If all the required information is provided in the ctrlX World Partner Portal space, an email to ctrlx.world@boschrexroth.de will trigger a validation loop. Basically, the workflow will be as follows: Partner/app developer: Uploads required artifacts and informs Bosch Rexroth Bosch Rexroth checks the artifacts for completeness. If rework is required, the partner will be notified by email with an attached report in the \" .../{company-name}/{app-name}/{version}/results \" folder Once the artifacts are complete, the validation will start. Again, if rework is required, the partner will be notified with an attached report Once validation has been successful, Bosch Rexroth will sign the app and inform the partner by email.","title":"2.4 Validation and Signing"},{"location":"appdevguide.html#3-app-categories","text":"Apps can be integrated into ctrlX on different levels. Three categories are defined as guidance for the prerequisites and possibilities on different levels. A category, however, is not a formal boundary, and an app can seamlessly support aspects in the different categories. Also, subsequent versions of an app might support more aspects than an earlier version. In addition, there is no correlation between the category and an app\u2019s business value. However, at least all aspects that are mentioned in Category 1 need to be met, since they are considered mandatory . The aspects are briefly described in this section The remainder of these documents provides detailed information about all aspects and also refers to additional sources of information, like how-to documents and code samples.","title":"3 App Categories"},{"location":"appdevguide.html#31-category-1-basic-applies-to-ctrlx-basic-mechanisms","text":"To be approved as an official ctrlX CORE app, an app must support a minimum set of mandatory aspects.","title":"3.1 Category 1 (Basic): Applies to ctrlX basic mechanisms"},{"location":"appdevguide.html#311-overview","text":"The app itself and corresponding user documentation need to be provided. Legal aspects like FOSS are also required. Working set information is needed to support the test and validation process. During runtime, the app must use the ctrlX CORE onboard licensing mechanism.","title":"3.1.1 Overview"},{"location":"appdevguide.html#312-customer-user-experience","text":"Customers can find the app in the ctrlX App Store. They know how the app is licensed and can use the overall Bosch Rexroth licensing system for ctrlX. They can also be sure that the app contributes to the basic ctrlX CORE security mechanisms.","title":"3.1.2 Customer User Experience"},{"location":"appdevguide.html#313-technical-prerequisites","text":"Note As mentioned, the aspects listed here are MANDATORY . This means all of them are required for an official ctrlX app. Basic app information: App artifacts (\u201cExecutables\u201d for ctrlX CORE and ctrlX CORE virtual and basic technical information) App documentation / user manual and release notes Additional app properties according to Linux Ubuntu conventions FOSS information Working set overview: Information about security behavior (Linux slots & plugs, ports, sockets) Information about resource consumption and read/write operations Standard task scheduling overview Test setup description for typical usage scenario Integration into ctrlX basic mechanisms: Use of ctrlX license handling App signed by Bosch Rexroth","title":"3.1.3 Technical Prerequisites"},{"location":"appdevguide.html#32-category-2-advanced-contributes-to-ctrlx-engineering-concepts","text":"For good integration into ctrlX from a user's point of view, an app should meet the aspects of Category 2 \u2013 even if these aspects are not necessary for app validation.","title":"3.2 Category 2 (Advanced): Contributes to ctrlX engineering concepts"},{"location":"appdevguide.html#321-overview","text":"The app uses the relevant ctrlX system interfaces and supports ctrlX platform features like Identity Management, Data Management and Backup/Restore.","title":"3.2.1 Overview"},{"location":"appdevguide.html#322-customer-user-experience","text":"The app contributes to the ctrlX user interface and system behavior. It integrates into basic user stories for configuration and maintenance of a ctrlX application.","title":"3.2.2 Customer User Experience"},{"location":"appdevguide.html#323-technical-recommendations","text":"Note As mentioned, the aspects listed here are OPTIONAL . However, they are highly recommended for a good user experience. Also, the category 2 and 3 aspects overlap and not formally separated Further app information: FOSS sources Semantic versioning scheme Integration into ctrlX CORE security system: ctrlX CORE reverse proxy ctrlX Key & Certificate Management ctrlX Identity Management Improved network security (no insecure protocols) Integration into ctrlX user interface and project handling ctrlX CORE navigation pane and landing page ctrlX CORE configuration storage","title":"3.2.3 Technical Recommendations"},{"location":"appdevguide.html#33-category-3-extended-extends-ctrlx-automation-features","text":"Finally, an app can integrate in the Automation framework and extend the ctrlX real time system Note Real time integration requires additional training and support from Bosch Rexroth to avoid unexpected system behavior and impacts on the ctrlX real-time kernel.","title":"3.3 Category 3 (Extended): Extends ctrlX AUTOMATION features"},{"location":"appdevguide.html#331-description","text":"The app exposes information in the ctrlX Data Layer for all other apps. It also can extend the real time functions of ctrlX if connected to the real-time task scheduler","title":"3.3.1 Description"},{"location":"appdevguide.html#332-customer-user-experience","text":"The app extends the ctrlX AUTOMATION system functions, e.g. for Motion and/or PLC","title":"3.3.2 Customer User Experience"},{"location":"appdevguide.html#333-technical-recommendations","text":"Integration into ctrlX AUTOMATION system functions: ctrlX Data Layer ctrlX CORE logbook and diagnostics system Real-time extension: ctrlX CORE Scheduler","title":"3.3.3 Technical Recommendations"},{"location":"appdevguide.html#4-basic-app-information-mandatory","text":"The basic app information is checked as a prerequisite by Bosch Rexroth, before the validation process starts.","title":"4 Basic App Information (MANDATORY) "},{"location":"appdevguide.html#41-app-artifacts-mandatory","text":"","title":"4.1 App Artifacts (MANDATORY)"},{"location":"appdevguide.html#411-artifacts-folder-template","text":"The ctrlX World Partner Portal provides a file (artifacts.zip), which can be downloaded and extracted locally. This will create the required folder structure for the mandatory artifacts out-of-the-box, with default descriptions and schema files. !!!! important Please use the given structure, folder names and file names unchanged. This will support an efficient validation process. The artifacts are organized in five sub folders:","title":"4.1.1 Artifacts Folder Template"},{"location":"appdevguide.html#412-disclosure-folder-mandatory","text":"The FOSS source files and license text files are stored in the disclosure folder \"fossinfo.json\" ( MANDATORY ) - license texts for all an app\u2019s used open source software. For more information about format and content, refer to the json example and the corresponding json schema in the standard \"artifacts.zip\" file. \"foss-sources.zip\" ( CONDITIONAL ) - In the foss-sources.zip file, the sources of all used open source libraries / packages are zipped without a password. \"foss-offer.x\" ( CONDITIONAL ) - If the foss-sources.zip file is not provided, a human-readable file with the name \"offer.x\" is needed. It explains how the user can get the sources. Either FOSS sources or FOSS offer is required .","title":"4.1.2 \"Disclosure\" folder (MANDATORY)"},{"location":"appdevguide.html#413-build-info-folder-mandatory","text":"The build info folder stores all build relevant information. Note: For the {xxx}-description files, a default file (with explanation) and the corresponding schema is provided in the standard artifacts.zip example. \"snapcraft.yaml\" ( MANDATORY ) - The snapcraft.yaml file is the main entry point to create a snap through Snapcraft. It contains all the details the snapcraft command needs to build a snap. See also https://snapcraft.io/docs/snapcraft-yaml-reference \"package-manifest.json\" ( MANDATORY ) - The package-manifest.json covers essential settings, like the proxy URL \"portlist-description.json\" ( MANDATORY ) - All used ports are described in the port list \"unixsocket-description.json\" ( MANDATORY ) - All used Unix sockets are described in the Unix socket description. If your app does not use a Unix socket, provide an empty description file \"slotplug-description.json\" ( MANDATORY ) - All used slot and plugs are described in the slot and plug description","title":"4.1.3 \"Build Info\" folder (MANDATORY)"},{"location":"appdevguide.html#414-documentation-folder-mandatory","text":"All documentation relevant to the app is provided here \"manual.pdf\" ( MANDATORY ) - The app description (user manual) documents the app\u2019s overall functionality \"test-setup-description.pdf\" ( MANDATORY ) - The app setup describes how to configure the app on a ctrlX device for a typical usage and test scenario \"release-notes.pdf\" ( MANDATORY ) - The latest changes, workarounds and defects are mentioned in the release notes","title":"4.1.4 \"Documentation\" folder (MANDATORY)"},{"location":"appdevguide.html#415-app-states-folder-mandatory","text":"The app validation framework tries to establish relevant states that have to be tested. Therefore, a sequence of API calls has to be provided to bring the app to the test state \"standard-scenario1.json\" ( MANDATORY ) - Each file contains a collection (sequence of RESTAPI calls) to generate the standard usage scenario. In each of these scenarios, the validation process monitors the memory and storage usage, the CPU load and the Ethernet communication load. The collections/files are to be created using Postman. \"standard-scenario{2 to n}.json\" (optional) - One or more scenarios, if appropriate","title":"4.1.5 \"App States\" folder (MANDATORY)"},{"location":"appdevguide.html#416-snaps-folder-mandatory","text":"ctrlX currently supports the amd64 and the arm64 processor architecture. The corresponding target snaps for the app are provided here \"{TechnicalAppName}_{version}_arm64.snap\" ( MANDATORY ) - Snap that runs in armd64 environments. Currently, the arm64 architecture is used in ctrlX CORE hardware. \"{TechnicalAppName}_{version}_amd64.snap\" ( OPTIONAL ) - Snap that runs in amd64 environments. The amd64 is used in ctrlX CORE virtual . However, future ctrlX CORE hardware will also use amd64 architecture. So, it is recommended that a snap is also provided for this platform to avoid future inconvenience.","title":"4.1.6 \"Snaps\" folder (MANDATORY)"},{"location":"appdevguide.html#42-app-documentation-mandatory","text":"","title":"4.2 App Documentation (MANDATORY)"},{"location":"appdevguide.html#421-user-manual-mandatory","text":"A user manual must be delivered together with the app. The user manual must describe typical user actions for commissioning and operating the app from a user / customer perspective.","title":"4.2.1 User Manual (MANDATORY)"},{"location":"appdevguide.html#422-test-setup-description-mandatory","text":"A test setup description must be delivered together with the app. The test setup description must contain instructions to realize a test scenario. It must include a description of sequences and dependencies, e.g. additional hardware. If you use plugs and slots, please provide an explanation here.","title":"4.2.2 Test Setup Description (MANDATORY)"},{"location":"appdevguide.html#423-release-notes-mandatory","text":"Release note documentation must be delivered together with the app.","title":"4.2.3 Release Notes (MANDATORY)"},{"location":"appdevguide.html#424-general-app-description-for-the-ctrlx-app-zone-conditional","text":"Each app needs product information as part of the sales package. The description shall be generated based on the app description template (from the ctrlX World Partner Portal) The app description package is necessary in case the app is also to be shown in the ctrlX AUTOMATION Community App Zone or other marketing channels.","title":"4.2.4 General App Description for the ctrlX App Zone (CONDITIONAL)"},{"location":"appdevguide.html#43-additional-app-information-according-to-linux-ubuntu-conventions-mandatory","text":"The following properties must be defined within the \"snapcraft.yaml\" file (see https://snapcraft.io/docs/snapcraft-yaml-reference), which also need to be exclusively part of the app and have to be collision free with other apps. Title - The general name of the app that will be shown on all sales channels and customer touch points, e.g. app overview or ctrlX App Store. This is defined together with the partner manager, as part of the business model definitions. Example: \"My App\" Name - The technical name of the snap. The name has to be unique in the snap universe and across all snap developer and device vendors. The snap name has to start with \"ctrlx-\" and must be lowercase and a maximum length of 32 characters . ctrlX World Partners add their company name to the snap name. Example: \"ctrlx-partnername-myapp\" Confinement - Must be set to \"strict\" for releases. See also https://snapcraft.io/docs/snap-confinement Grade - Defines the quality grade of the app. During development, you may choose to use \"devel\" . When releasing the application, the grade must be set to \"stable\" .","title":"4.3 Additional App Information According to Linux Ubuntu Conventions (MANDATORY)"},{"location":"appdevguide.html#44-foss-info-provisioning-mandatory","text":"If the app uses Free and Open Source Software (FOSS), certain license information must be delivered together with the app. With \"fossinfo.xml\" the open source license text must be disclosed for copyright reasons. Bosch Rexroth offers the possibility to display the license texts for the used open source software in the ctrlX web interface. For more information about \"fossinfo.xml\" please refer to the guideline in the SDK. If FOSS license texts are displayed within the app, at least a reference to the license display in the app must be provided in the \"fossinfo.xml\". Since users must be able to view the license texts before the open source software is installed, the \"fossinfo.xml\" must also be stored outside the app in the \"disclosure\" directory (see section 3.1.2). In addition, the license texts must be listed within the user documentation or at least a reference must be inserted where the FOSS license texts are located.","title":"4.4 FOSS Info Provisioning (MANDATORY)"},{"location":"appdevguide.html#5-further-app-information-conditional","text":"","title":"5 Further App Information (CONDITIONAL)"},{"location":"appdevguide.html#51-foss-sources-conditional","text":"Bosch Rexroth recommends putting all FOSS sources in a zip file with the file name \"foss-sources.zip\" and storing it in the \"disclosure\" directory, where the \"fossinfo.xml\" is provided. In the event that the FOSS sources are not provided directly, a written offer is mandatory for open source software with copyleft clause (e.g. GPLv2 or GPLv3) . This means, a human-readable file with the name \"foss-offer.x\" needs to be provided, which explains how the user can get the app\u2019s FOSS sources.","title":"5.1 FOSS Sources (CONDITIONAL)"},{"location":"appdevguide.html#52-semantic-versioning-scheme-optional","text":"It is recommended that a versioning scheme is used based on https://semver.org/ for the app\u2019s versioning. This setting is also relevant in the snapcraft.yaml file while creating the snap. Note Increasing version numbers are mandatory, regardless of the versioning scheme used","title":"5.2 Semantic Versioning Scheme (OPTIONAL)"},{"location":"appdevguide.html#53-restart-delay-optional","text":"The restart delay of the app daemon should be set to \"5s\" or similar in the snapcraft.yaml to prevent the 10s lock-out","title":"5.3 Restart Delay (OPTIONAL)"},{"location":"appdevguide.html#6-working-set-overview-mandatory","text":"","title":"6 Working Set Overview (MANDATORY)"},{"location":"appdevguide.html#61-security-information-considerations","text":"ctrlX CORE is designed with high security requirements. Also, the overall ctrlX CORE architecture is built to be compliant to be certified as defined by IEC62433. This also implies some requirements for the apps and software running in the ctrlX Ecosystem. For the ctrlX app, this means Only encrypted and secured communication protocols (e.g. https) must be used. Insecure protocols (e.g. http) are not to be used, unless explicitly defined in the validation process. The device attack surface should be kept as minimal as possible. This means, for example, that the number of open ports in an app should be reduced to a minimum.","title":"6.1 Security Information &amp; Considerations"},{"location":"appdevguide.html#611-interfaces-slots-plugs-mandatory","text":"Used interfaces (Slots & Plugs) must be documented in the snapcraft.yaml file. The following considerations must be taken into account: Use as few interfaces (slots/plugs) as possible . The amount of interfaces (slots & plugs) shall be limited to a minimum . The app should only declare the interfaces (slots and/or plugs) that are absolutely required to minimize the attack surface. When reviewing the app, Bosch Rexroth needs to know for which purpose a specific slot and/or plug is required by an app. Corresponding justification must be provided together with the app. No global slots & plugs . App developers must avoid assigning global slots & plugs that are valid for all applications. Global slots & plugs should only be used if absolutely necessary. Debug interfaces only on demand . By default, the app should not provide any open network debug interfaces. If debugging is required, the user should be able to enable the debug interface on demand and only after successful authentication (and authorization). In general, debug interfaces shall not be accessible without authentication and/or insufficient or even hard-coded credentials. The following operating system interfaces are denied or restricted for usage. See also https://snapcraft.io/docs/supported-interfaces. Interface Direction Parameters Exceptions Reason udisk2 Plug & Slot system-files Plug * \"read=^(\\/dev\\/shm| \\/dev\\/shm\\/.+)$\", \"write=^(\\/dev\\/shm| \\/dev\\/shm\\/.+)$\" snapd-control Plug * Prevent uncontrolled access to system configuration. raw-volumes Plug Prevent mounting of partitions. process-control Plug Prevent tampering with running processes. content Plug content=package-certificates Prevent apps to act as device admin. content Plug content=package-run Prevent apps to act as device admin. content Plug content=package-assets Prevent apps to act as device admin. content Slot content=auth-service Prevent unauthorized access, service to service authentication. content Slot content=active-solution Prevent apps to act as solution snap. block-devices Plug Prevent mounting of partitions. account-control Plug * Prevent uncontrolled access to user and group databases. removable-media Plug Prevent uncontrolled access to removal media (micro sd, USB). This list is subject to change and might be extended. If unsure, please provide the slot/plug you want to use inside your application together with justification to check whether or not this specific slot/plug is allowed and find potential alternatives.","title":"6.1.1 Interfaces / Slots &amp; Plugs (MANDATORY)"},{"location":"appdevguide.html#612-network-security-and-ports-conditional","text":"The package-manifest.json must provide information about the used network interfaces. The app must keep its network footprint as low as possible: No open debug ports by default Binding webserver to Unix socket (preferred) or at least localhost Security protocols are to be used by default. This means: No exposure of insecure protocols like http or web socket. ctrlX reverse proxy integration should be used for those specific protocols - Or, in cases where that is not possible, https/websocket secure should be used in the app. Secure protocols are to be used for non-web apps When the app supports secure & insecure protocols, a secure configuration preset must be used for the app, so that the user must choose to override this setting if they want to choose the insecure version The app must provide a list of ports to be used in order to avoid conflicts. The app must therefore be robust to already open / used ports. At least a warning is to be issued to the user. The following ports are blocked and cannot be used by an app: 22 80 81 443 1338 (UDP) 1880 1900 (UDP) 2069 2070 4840 5355 (UDP) 5353 6000 7878 8069 11740 11741 This list is subject to change and might be extended.","title":"6.1.2 Network Security and Ports (CONDITIONAL)"},{"location":"appdevguide.html#613-file-permissions-conditional","text":"It is very likely that an app stores settings & configuration data in the application's folder (e.g. $SNAP_DATA or $SNAP_COMMON). All file permissions have to be set properly so that only the owner of the files is allowed to read or alter the content.","title":"6.1.3 File Permissions (CONDITIONAL)"},{"location":"appdevguide.html#62-resource-consumption-and-readwrite-operations-mandatory","text":"Typically, more than one app runs on a ctrlX device. It is therefore very important than an app does not consume too many system resources (e.g. RAM or disk space). In addition, the available virtual memory on the device is limited to the amount of physical available memory, because the possibility of swapping unused RAM to disk is disabled on ctrlX devices. The reasons for this is the otherwise negative impact on real-time capability and flash disk lifetime.","title":"6.2 Resource Consumption and Read/Write Operations (MANDATORY)"},{"location":"appdevguide.html#621-resource-consumption","text":"Recommended amount of resources per app: RAM: <75 MB Snap-Size: ideally <100 MB, as small as possible If an app exceeds these values by a long way, then please contact your app partner support to clarify this further.","title":"6.2.1 Resource Consumption"},{"location":"appdevguide.html#622-integrated-storageflash-lifetime","text":"The app must not write diagnostics or similar data cyclically to the internal solid-state memory, as this will damage the flash cells. Instead, cyclical writing can be only be done to a network storage or any other external storage, as these allow easy and regular replacement for this use-case. The integrated storage medium and file system in the ctrlX CORE hardware is based on a solid state flash memory, which inherently has a limited lifetime based on the number of erase cycles for its memory cells. To increase the device\u2019s overall lifetime it is necessary to reduce the number of write/erase cycles on the flash cells.","title":"6.2.2 Integrated Storage/Flash Lifetime"},{"location":"appdevguide.html#63-standard-task-scheduling-mandatory","text":"The app must not have a negative impact on the real-time behavior of other apps. The scheduling / task scheme must remain flexible to allow other apps to run, e.g. the ctrlX Motion app.","title":"6.3 Standard Task Scheduling (MANDATORY)"},{"location":"appdevguide.html#64-test-setup-for-typical-usage-scenario-mandatory","text":"For a fast and efficient start to the validation process, a usage scenario should be provided that does not require any peripheral components. This will help to identify the initial findings quickly and with comparatively little effort. If the app requires additional periphery to run properly, a separate usage scenario should be provided that describes the interaction with the external component. Videos and further media can be attached.","title":"6.4 Test Setup for Typical Usage Scenario (MANDATORY)"},{"location":"appdevguide.html#7-ctrlx-basic-mechanisms-mandatory","text":"","title":"7 ctrlX Basic Mechanisms (MANDATORY)"},{"location":"appdevguide.html#71-ctrlx-license-handling-mandatory","text":"A license model must be defined for each app which is part of ctrlX World. To ensure maximum usability for a ctrlX CORE user, the app must call up the ctrlX license manager API when it starts or is running to check if a license is activated. If a license is missing, the missing license will be shown to the user on a user interface (Note: This will be available after July 2021). A warning or error must be shown in case the license is missing. Each software license (SWL) bought by a customer generates one or more capabilities: Each app checks the existence of these capabilities, using the license manager interface An app license shall be enforced according to the app business model as part of the contract addendum The usage of other licensing mechanisms is not allowed The licensing interface will be available by March 2021 Note Currently, the License Manager does not return licenses on a ctrlX COREvirtual.","title":"7.1 ctrlX License Handling (MANDATORY)"},{"location":"appdevguide.html#72-app-signing-by-bosch-rexroth-mandatory","text":"To make sure that only apps that have successfully passed the validation process are available as a ctrlX app, these Apps need to be signed by Bosch Rexroth. During the signing process, the app binaries are checked and combined with a signature. This signature guarantees that the app cannot be modified after the validation and signing process. Note At the moment, only Bosch Rexroth can sign ctrlX apps","title":"7.2 App Signing by Bosch Rexroth (MANDATORY)"},{"location":"appdevguide.html#8-ctrlx-security-system-optional","text":"","title":"8 ctrlX Security System (OPTIONAL)"},{"location":"appdevguide.html#81-ctrlx-core-reverse-proxy-optional","text":"The proxy URL is the most important setting in the package-manifest.json file for the app to be integrated seamlessly into the ctrlX CORE. The reverse proxy will forward requests to the URL that are defined for the app web service. An app is to be bound to a Unix socket instead of a local port. This will also prevent potential collisions with other services. Warning We strongly recommend binding the app web service to a Unix socket, e.g. /var/snap/my-app/current/package-run/my-app/my-app.web.sock , instead of a local port. This will also prevent potential collisions with other services. The path length of a Unix socket is limited to 108 characters. The complete path must respect that limit and the highlighted part has a maximal length of 50 characters. The path can be shortened if necessary by replacing \"package-run\" with \"run\" and shortening the file name from \"my-app.web.sock\" to \"web.sock\". However the folder name within the package-run (or run) folder must always be the name of the snap. Note Example code can be found here: https://developer.community.boschrexroth.com/t5/ctrlX-WORKS/Example-IntegrationWebServer-to-Reverse-Proxy/m-p/20193#M216","title":"8.1 ctrlX CORE reverse proxy (OPTIONAL)"},{"location":"appdevguide.html#82-ctrlx-key-certificate-management-optional","text":"The ctrlX CORE certificate management is to be used to manage your application\u2019s certificates through the web interface. (package-manifest.json, snapcraft.yaml) Note: When the application acts as a ctrlX client, key & certificate based authentication has to be used whenever possible. If user & password based authentication is used, the configuration file permissions have to be correct so that no other user(s) on the system can read those data.","title":"8.2 ctrlX Key &amp; Certificate Management (OPTIONAL)"},{"location":"appdevguide.html#83-ctrlx-identity-managementauthentication-authorization-optional","text":"When running a web service, the app should use the authentication & authorization mechanisms that the ctrlX CORE provides to protect the app against unauthorized access. If the mechanisms the ctrlX CORE provides are not used, hardcoded accounts/credentials have to be avoided. The ctrlX CORE's so called \"scopes\" are to be used to model app permissions. Scopes allow permissions to be assigned to users & groups via the web interface. If case permissions are used, the permissions must be enforced within the app (package-manifest.json)","title":"8.3 ctrlX Identity Management/Authentication &amp; Authorization (OPTIONAL)"},{"location":"appdevguide.html#9-ctrlx-user-interface-and-project-handling-optional","text":"","title":"9 ctrlX User Interface and Project Handling (OPTIONAL)"},{"location":"appdevguide.html#91-ctrlx-configuration-storage-conditional","text":"The ctrlX CORE system provides multiple ways for an app to store its data. The app data must be persisted within one of these locations to provide consistent backup and restore mechanism to users.","title":"9.1 ctrlX Configuration Storage (CONDITIONAL)"},{"location":"appdevguide.html#911-solution-handling-optional","text":"The so-called \"Solution\" is an essential part of any ctrlX CORE device. It provides a central storage location for all ctrlX apps that need to persist their app data in configurations. Configuration files are saved to the solution storage or loaded from the storage on demand (by the user or by REST API calls). A configuration file contains project-specific data, like machine-related, PLC, HMI, fieldbus configurations. To be used in the event of one or more configurations that can be easily switched by the user. Configurations are used and shared by multiple apps. It does not contain data that is related to a specific device, e.g. certificates, network configurations, users and their permissions, or should be valid for multiple configurations (e.g. app settings). Should be non-binary (in future version control system / GIT will be used). However, if there is no alternative and the files do not change too often, small binaries can be stored in a configuration.","title":"9.1.1 Solution Handling (OPTIONAL)"},{"location":"appdevguide.html#922-environment-variables-conditional","text":"Environment variables are widely used across Linux to provide convenient access to system and application properties (see also https://snapcraft.io/docs/environment-variables) In the specific context of ctrlX, the environment variables $SNAP_COMMON or $SNAP_DATA ... ...Contain app-related data, that can be used across multiple configurations, e.g. solutions. ...Shall not contain data related to the user application, e.g. machine program, and should be applicable on multiple configurations. $SNAP_DATA shall be used for app data related to a specific app version (snap revision). $SNAP_COMMON shall be app data used across versions (snap revisions).","title":"9.2.2 Environment Variables (CONDITIONAL)"},{"location":"appdevguide.html#external-storage-sd-card-and-usb-storage-device-not-available-yet","text":"Note These external storage devices are not supported at the moment. In the future, they May contain large data (>100MB) or data that is frequently changed, e.g. logs, analytics, database. Must only contain non-confidential (public) data or data must be protected on app side. Data can be accessed or manipulated from external storage devices.","title":"External storage / SD card and USB storage device (not available yet)"},{"location":"appdevguide.html#10-ctrlx-automation-system-functions-optional","text":"","title":"10 ctrlX AUTOMATION System Functions (OPTIONAL)"},{"location":"appdevguide.html#101-ctrlx-logbook-and-diagnostic-system","text":"For further information see https://docs.automation.boschrexroth.com","title":"10.1 ctrlX Logbook and Diagnostic System"},{"location":"appdevguide.html#11-real-time-extension-optional","text":"Please contact your partner manager if a real-time extension might be required for your app.","title":"11 Real Time Extension (OPTIONAL)"},{"location":"appdevguide.html#12-licensing-optional","text":"If you are ctrlX World Partner you must use the licensing service that is operated by Bosch Rexroth. For information how to adapt an app to the licensing service please have look on the Licensing Page Copyright \u00a9 Bosch Rexroth AG 2021 This guideline, as well as the data, specifications and other information set forth in it, are the exclusive property of Bosch Rexroth AG. It may not be reproduced or given to third parties without our consent.","title":"12 Licensing (OPTIONAL)"},{"location":"changelog.html","text":"Software Development Kit for ctrlX AUTOMATION \u00b6 Version 1.16.0 July 15, 2022 \u00b6 Increase maximum numbers of opened files: Docu and sample project Convert Flatbuffers Schema Files to IEC61131 Code: Chapter in documentation Getting Started, PLC sample in samples-iec61131/fbs2plc Metadata database examples added to samples-cpp/datalayer.register.node and samples-python/datalayer.provider Revisions regarding Virtual Box and Native Ubuntu 20.04 Deploy fbs only in namepaces See also Changes of the App Build Environment Version 1.14.0 March 15, 2022 \u00b6 Use flatbuffers version 1.12 for c/c++ projects Use flatc 2.0 Remove RT Bundles from SDK Restructured sample projects docu Quick Start Guide Using ctrlX WORKS function 'App Building Environments' Using Snapcraft Remote Build from Canonical Version 1.12.0 November 22, 2021 \u00b6 Change samples to Ubuntu20 Add QEMU as new recommended build environment Added node-package Added Node.js Hello-Webserver sample Added Node.js ctrlX Data Layer Client Added C++ Automation Diagnosis Added C++ Automation Trace Added C++ ctrlX Data Layer Diagnosis Added Samples for TPM2 Added Developer Guidline Added description to adapt licensing mechanism Added Bundle Description (doxygen) for trace/diagnosis Version 1.10.0 July 15, 2021 \u00b6 Added python appdata sample Added python ctrlX Data Layer Browse sample Added python ctrlX Data Layer Client (complex) sample Added python ctrlX Data Layer Client Subsrciption sample Added python ctrlX Data Layer Provider all-data sample Added python Webserver sample Added python Calculation sample Refactored hello.webserver sample in go Added go appdata sample Added TPM2 sample in go and shell scripts Adapt style Added Api Refernece c/c++ python and c# Improve Documentation Added Python Sample with different Loglevels Added C# Sample with different Loglevels Added C++ Sample with different Loglevels Remove REST API's from package (available online) Version 1.8.0 March 25, 2021 \u00b6 Added .NET 5 (.NET Core) hello.world sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Browse sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Client sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Provider sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Demo sample (self-contained) Added python ctrlX Data Layer Client sample Added python ctrlX Data Layer Provider sample Added python API Documentation Added .NET 5 (.NET Core) API Documentation Version 1.6.0 November 15, 2020 \u00b6 Changed license from BSD3 to MIT Refactored hello.webserver sample Added datalayer.ecat.io sample (exemplary work with fieldbus) Added API descriptions Extended datalayer.register.node and datalayer.client sample with flatbuffers Prepared experimental remote snap debugging Added datalayer.realtime sample (share real time data) Version 1.4.0 July 15, 2020 \u00b6 Prepare first release","title":"Changelog"},{"location":"changelog.html#software-development-kit-for-ctrlx-automation","text":"","title":"Software Development Kit for ctrlX AUTOMATION"},{"location":"changelog.html#version-1160-july-15-2022","text":"Increase maximum numbers of opened files: Docu and sample project Convert Flatbuffers Schema Files to IEC61131 Code: Chapter in documentation Getting Started, PLC sample in samples-iec61131/fbs2plc Metadata database examples added to samples-cpp/datalayer.register.node and samples-python/datalayer.provider Revisions regarding Virtual Box and Native Ubuntu 20.04 Deploy fbs only in namepaces See also Changes of the App Build Environment","title":"Version 1.16.0  July 15, 2022"},{"location":"changelog.html#version-1140-march-15-2022","text":"Use flatbuffers version 1.12 for c/c++ projects Use flatc 2.0 Remove RT Bundles from SDK Restructured sample projects docu Quick Start Guide Using ctrlX WORKS function 'App Building Environments' Using Snapcraft Remote Build from Canonical","title":"Version 1.14.0  March 15, 2022"},{"location":"changelog.html#version-1120-november-22-2021","text":"Change samples to Ubuntu20 Add QEMU as new recommended build environment Added node-package Added Node.js Hello-Webserver sample Added Node.js ctrlX Data Layer Client Added C++ Automation Diagnosis Added C++ Automation Trace Added C++ ctrlX Data Layer Diagnosis Added Samples for TPM2 Added Developer Guidline Added description to adapt licensing mechanism Added Bundle Description (doxygen) for trace/diagnosis","title":"Version 1.12.0  November 22, 2021"},{"location":"changelog.html#version-1100-july-15-2021","text":"Added python appdata sample Added python ctrlX Data Layer Browse sample Added python ctrlX Data Layer Client (complex) sample Added python ctrlX Data Layer Client Subsrciption sample Added python ctrlX Data Layer Provider all-data sample Added python Webserver sample Added python Calculation sample Refactored hello.webserver sample in go Added go appdata sample Added TPM2 sample in go and shell scripts Adapt style Added Api Refernece c/c++ python and c# Improve Documentation Added Python Sample with different Loglevels Added C# Sample with different Loglevels Added C++ Sample with different Loglevels Remove REST API's from package (available online)","title":"Version 1.10.0  July 15, 2021"},{"location":"changelog.html#version-180-march-25-2021","text":"Added .NET 5 (.NET Core) hello.world sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Browse sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Client sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Provider sample (self-contained) Added .NET 5 (.NET Core) ctrlX Data Layer Demo sample (self-contained) Added python ctrlX Data Layer Client sample Added python ctrlX Data Layer Provider sample Added python API Documentation Added .NET 5 (.NET Core) API Documentation","title":"Version 1.8.0  March 25, 2021"},{"location":"changelog.html#version-160-november-15-2020","text":"Changed license from BSD3 to MIT Refactored hello.webserver sample Added datalayer.ecat.io sample (exemplary work with fieldbus) Added API descriptions Extended datalayer.register.node and datalayer.client sample with flatbuffers Prepared experimental remote snap debugging Added datalayer.realtime sample (share real time data)","title":"Version 1.6.0  November 15, 2020"},{"location":"changelog.html#version-140-july-15-2020","text":"Prepare first release","title":"Version 1.4.0  July 15, 2020"},{"location":"connecting_qemu_vm_ctrlx.html","text":"This document describes how SDK QEMU VMs and a ctrlX CORE can be connected. In our examples we are assuming a Windows 10 host with px.exe as local proxy. Connections between Host and SDK QEMU VMs \u00b6 A SDK QEMU VM is always connected to it's host computer via port forwarding. So from the hosts point of view services of a SDK VM are a reachable via the address localhost:FORWARDED_PORT In our examples below port 10022 of the host is forwarded to port 22 (SSH) of the SDK amd64 VM and port 20022 to port 22 of SDK aarch64 VM. From the SDK QEMU VMs perspective: 10.0.2.2 is the IP address of the host computer 10.0.2.2 is also used as gateway address *1) http://10.0.2.2:3128 is the URL of the proxy server px.exe running on the Windows host *1) The QEMU instance emulates a gateway server. This makes it possible that other network participants can be reached via their IP address. The QEMU internal gateway service routes the network packages to their destinations. Connection Between Host and ctrlX CORE Controls \u00b6 There are three ways to connect ctrlX controls: ctrlX CORE virtual with Port Forwarding configured in ctrlX WORKS ctrlX CORE virtual with virtual Network Adapter configured in ctrlX WORKS ctrlX CORE ctrlX CORE virtual with Port Forwarding \u00b6 Like the SDK VMs the ctrlX CORE virtual is connected via port forwarding which is configured in ctrlX WORKS. When the ctrlX CORE virtual is started port forwarding is done by an internally started QEMU instance. In the picture above port 12345 is used for C++ remote debugging and its forwarding has to be configured in ctrlX WORKS too. Important If port 8443 of the host is forwarded to port 443 of the ctrlX (default) add sslport=8443 to the TCP connection string: In this case the connection string has this suffix ?sslport=8443 : tcp : //boschrexroth:boschrexroth@10.0.2.0?sslport=8443 Otherwise change port forwarding to 443:443. ctrlX CORE virtual with Network Adapter \u00b6 In this case a ctrlX CORE virtual is provided by ctrlX WORKS and its internal QEMU instance with a virtual network adapter. The default IP address of this adapter is 192.168.1.1. To connect the Windows host with the ctrlX CORE virtual a so called TAP Windows Adapter v9 is created by ctrlX WORKS. The connection string for Data Layer access in this case is: tcp : //boschrexroth:boschrexroth@192.168.1.1 ctrlX CORE \u00b6 The ctrlX CORE is connected to the Windows host via its network adapter. The connection string for Data Layer access e.g. is: tcp : //boschrexroth:boschrexroth@10.52.244.123","title":"Connecting QEMU VMs and ctrlX CORE"},{"location":"connecting_qemu_vm_ctrlx.html#connections-between-host-and-sdk-qemu-vms","text":"A SDK QEMU VM is always connected to it's host computer via port forwarding. So from the hosts point of view services of a SDK VM are a reachable via the address localhost:FORWARDED_PORT In our examples below port 10022 of the host is forwarded to port 22 (SSH) of the SDK amd64 VM and port 20022 to port 22 of SDK aarch64 VM. From the SDK QEMU VMs perspective: 10.0.2.2 is the IP address of the host computer 10.0.2.2 is also used as gateway address *1) http://10.0.2.2:3128 is the URL of the proxy server px.exe running on the Windows host *1) The QEMU instance emulates a gateway server. This makes it possible that other network participants can be reached via their IP address. The QEMU internal gateway service routes the network packages to their destinations.","title":"Connections between Host and SDK QEMU VMs"},{"location":"connecting_qemu_vm_ctrlx.html#connection-between-host-and-ctrlx-core-controls","text":"There are three ways to connect ctrlX controls: ctrlX CORE virtual with Port Forwarding configured in ctrlX WORKS ctrlX CORE virtual with virtual Network Adapter configured in ctrlX WORKS ctrlX CORE","title":"Connection Between Host and ctrlX CORE Controls"},{"location":"connecting_qemu_vm_ctrlx.html#ctrlx-corevirtual-with-port-forwarding","text":"Like the SDK VMs the ctrlX CORE virtual is connected via port forwarding which is configured in ctrlX WORKS. When the ctrlX CORE virtual is started port forwarding is done by an internally started QEMU instance. In the picture above port 12345 is used for C++ remote debugging and its forwarding has to be configured in ctrlX WORKS too. Important If port 8443 of the host is forwarded to port 443 of the ctrlX (default) add sslport=8443 to the TCP connection string: In this case the connection string has this suffix ?sslport=8443 : tcp : //boschrexroth:boschrexroth@10.0.2.0?sslport=8443 Otherwise change port forwarding to 443:443.","title":"ctrlX COREvirtual with Port Forwarding"},{"location":"connecting_qemu_vm_ctrlx.html#ctrlx-corevirtual-with-network-adapter","text":"In this case a ctrlX CORE virtual is provided by ctrlX WORKS and its internal QEMU instance with a virtual network adapter. The default IP address of this adapter is 192.168.1.1. To connect the Windows host with the ctrlX CORE virtual a so called TAP Windows Adapter v9 is created by ctrlX WORKS. The connection string for Data Layer access in this case is: tcp : //boschrexroth:boschrexroth@192.168.1.1","title":"ctrlX COREvirtual with Network Adapter"},{"location":"connecting_qemu_vm_ctrlx.html#ctrlx-core","text":"The ctrlX CORE is connected to the Windows host via its network adapter. The connection string for Data Layer access e.g. is: tcp : //boschrexroth:boschrexroth@10.52.244.123","title":"ctrlX CORE"},{"location":"ctrlx_automation.html","text":"What is ctrlX AUTOMATION? \u00b6 ctrlX AUTOMATION surmounts the classic boundaries between machine control, the IT world and the Internet of Things. With a Linux real-time operating system, consistently open standards, app programming technology, web-based engineering and a comprehensive IoT connection. Visit the official website to get additional information: ctrlX AUTOMATION ctrlX CORE Fundamentals \u00b6 Find out fundamental informations and technical data about ctrlX CORE","title":"ctrlX AUTOMATION"},{"location":"ctrlx_automation.html#what-is-ctrlx-automation","text":"ctrlX AUTOMATION surmounts the classic boundaries between machine control, the IT world and the Internet of Things. With a Linux real-time operating system, consistently open standards, app programming technology, web-based engineering and a comprehensive IoT connection. Visit the official website to get additional information: ctrlX AUTOMATION","title":"What is ctrlX AUTOMATION?"},{"location":"ctrlx_automation.html#ctrlx-core-fundamentals","text":"Find out fundamental informations and technical data about ctrlX CORE","title":"ctrlX CORE Fundamentals"},{"location":"datalayer.html","text":"Documentation \u00b6 naming conventions provider Routing of requests Provider Interface functions Usage of Variant Usage of flatbuffers Metadata Typetree Usage of client Node names \u00b6 Each value is addressed by a path. A path creates of a set of nodes. When nodes are named, an API is intuitive and easy to use. If done poorly, that same API can feel difficult to use and to understand. A node can be a singleton or a collection . For Example customers is a collection node and customer is a singleton resource (in a banking domain). We can identify customers collection resource using the path /customers . We can identify a single customer resource using the path /customers/{customerID} . A node may contain sub-collection resources also. For example, sub-collection resource accounts of a particular customer can be identified using the path /customers/{customerId}/accounts (in a banking domain). Similarly, a singleton resource account inside the sub-collection resource accounts can be identified as follows: /customers/{customerId}/accounts/{accountId} . Node naming conventions \u00b6 Use small capital node names \u00b6 Always use small capital node names! Hierarchical relationships \u00b6 Use subnodes to indicate hierarchical relationship between resources device-management device-management/managed-devices device-management/managed-devices/{id} device-management/managed-devices/{id}/scripts device-management/managed-devices/{id}/scripts/{id} Use nouns to represent resources \u00b6 Nodes should refer to a resource that is a thing (noun) instead of referring to an action (verb) because nouns have properties which verbs do not have - similar to resources have attributes. Some examples of a resource are: Users of the system User Accounts Network Devices etc. and their resource URIs can be designed as below: device-management/managed-devices device-management/managed-devices/{device-id} user-management/users/ user-management/users/{id} Use verbs to represent actions \u00b6 Has to return method in metadata. Use hyphens (-) to improve the readability of nodes \u00b6 To make your nodes easy for people to interpret, use the hyphen (-) character to improve the readability of names in long path segments. inventory-management/managed-entities/{id}/install-script-location //More readable inventory-management/managedEntities/{id}/installScriptLocation //Less readable Do not use underscores ( _ ) It's possible to use an underscore in place of a hyphen to be used as separator. But depending on the applications font, it's possible that the underscore (_) character can either get partially obscured or completely hidden in some browsers or screens. To avoid this confusion, use hyphens (-) instead of underscores ( _ ). inventory-management/managed-entities/{id}/install-script-location //More readable inventory_management/managed_entities/{id}/install_script_location //More error prone Do not use file extensions \u00b6 File extensions look bad and do not add any advantage. Removing them decreases the length of URIs as well. No reason to keep them. Apart from above reason, if you want to highlight the media type of API using file extension then you should use metadata type. device-management/managed-devices.xml /*Do not use it*/ device-management/managed-devices /*This is correct path*/ Never use CRUD function names in path \u00b6 Paths should not be used to indicate that a CRUD (Create/Read/Update/Delete) function is performed. Paths should be used to uniquely identify resources and not any action upon them. Request methods should be used to indicate which CRUD function is performed. browse device-management/managed-devices //Get all devices create device-management/managed-devices //Create new Device read device-management/managed-devices/{id} //Get device for given Id write device-management/managed-devices/{id} //Update device for given Id delete device-management/managed-devices/{id} //Delete device for given Id Provider \u00b6 A provider is responsible for nodes. One provider can handle an unlimited amount of nodes. All requests to one provider are serialized: It's guarantied that if you are in one of the interface functions of a node (onRead, onWrite, ...) no other interface function of a node handled by the same provider is called. So you don't have to handle mutual exclusion to data handled by one provider. Register of nodes \u00b6 To register a path you have to specify which ProviderNode is responsible for this node. Example: Registration for ethercat/version: whenever a request for \"ethercat/version\" is send, this request will be routed to this particular node. If a provider is responsible for multiple nodes or the subnodes are unknown at the moment of registration, its possible to register with wildcards. Single wildcard \"*\" \u00b6 A single wildcard is the sign \"*\". \"*\" stands for a any string on a hierarchy level. You can use multiple wildcards at different levels. Examples: provider1: test/* provider2: test/foo/*/bar provider3: test/*/foo provider4: test/*/* provider5: test/bar/bar Double wildcard \"**\" \u00b6 A double wildcard is the string \"**\". \"**\" stands for any string on any hierarchy level. Such a wildcard is only allowed as last characters at your registration string. Example: provider6: test/** provider7: test/bar/** Routing of requests \u00b6 All requests except browse requests are routed to the provider the address matches best to the registered path. So on each level a registration with a specific path matches before a registration with a wildcard. A single wildcard matches before a double wildcard. An address matches always the best registered provider (see example). Only provider with a wildcard at end of it's registered address will get browse requests. Behavior of '/' \u00b6 Any '/' at begin or end at the request address will be removed. A provider will never get an address with a leading or tailing '/'. Routing of addresses will be done without a leading or tailing '/'. Example for routing of requests: \u00b6 address destination for browse destination for read \"\" nobody nobody \"test\" provider1 nobody \"test/1\" provider4 provider1 \"test/1/foo\" provider6 provider3 \"test/1/bar\" provider6 provider4 \"test/foo\" provider4 provider1 \"test/bar\" provider7 provider1 \"test/bar/bar\" provider7 provider5 \"test/bar/foo\" provider7 provider7 \"test/bar/bar/foo\" provider7 provider7 \"test/bar/foo/foo\" provider7 provider7 \"test/foo/foo\" provider6 provider3 \"test/foo/foo/bar\" provider6 provider2 \"test/foo/foo/foo\" provider6 provider6 \"test/1/bar\" provider6 provider4 \"test/1/bar/1\" provider6 provider6 Browse \u00b6 Whenever a node is browsed, the result is a list of strings with contains the names of the subnodes of this nodes. In general datalayer wants to answer this kind of requests at its own. Only if someone has registered with a wildcard (\"*\") for this particular node this provider will be asked to give for subnodes. The result of this request will be merged with the nodes datalayer knows for its own. So a provider does not need to return values on a browse request it has already registered with a more specific path. address result of browse \"\" \"test\" \"test\" \"foo\", \"bar\" + return from provider1 \"test/1\" \"foo\" + return from provider4 \"test/1/foo\" return from provider6 \"test/1/bar\" return from provider6 \"test/foo\" \"foo\" + return from provider4 \"test/bar\" \"foo\" + \"bar\"+ return from provider7 \"test/bar/bar\" return from provider7 \"test/bar/foo\" return from provider7 \"test/bar/bar/foo\" return from provider7 \"test/bar/foo/foo\" return from provider7 \"test/foo/foo\" \"bar\" + return from provider6 \"test/foo/foo/bar\" return from provider6 \"test/foo/foo/foo\" return from provider6 \"test/1/bar\" return from provider6 \"test/1/bar/1\" return from provider6 Provider Interface functions \u00b6 Properties: idempotent, i.e. operation will have the same effect on the servers state if executed once or multiple times (note: this does not necessarily mean returning the same response or status code) safe, i.e. must not have side effects such as state changes Input data Output data function description safe idempotent Input Output onCreate Creates an object no no yes yes onRemove Removes an object no yes no no onBrowse Browse childs of a node yes yes no yes onRead Reads value of a node yes yes yes yes onWrite Writes value to a node no yes yes yes onMetadata Reads metadata of a node yes yes no no Requests are Stateless: Your node/application is not allowed to store anything about latest request. Handle each and every request as new. No session, no history. Design your interface in a way that each request contains all the information necessary to service the request. No Client context shall be stored on the server between requests. The client is responsible for managing the state of the application. onCreate \u00b6 This function should be used to create a new object. This function is not idempotent. So two calls of onCreate will not have the same result. As input all data should be provided to create the object. As output data the location (path) of of the new object should be returned. Examples: Creating an order in an online shop Creating an axis Creating a Motion Command onRemove \u00b6 This function removes an object. No input and output data are allowed. Examples: Removing an axis onBrowse \u00b6 This function returns child nodes of this node. The result must be an array of strings with the names of the child nodes. onRead \u00b6 This function reads the value of a node. To specify the read operation the onRead function may have input data. This function is idempotent and safe. So two equal subsequent calls will have the same result and will not change the state. onWrite \u00b6 This function changes the value of an already existing node. The new value is provided as input data. As output data you can return the new node value or nothing. This function is idempotent. So if you send a request multiple times, that should be equivalent to a single request modification. onMetadata \u00b6 This function returns the metadata of this note. You have to return a metadata.fbs flatbuffer. See metadata . Usage of Variant \u00b6 A variant holds data of different types. Following basic types are defined: type description UNKNOWN unknown datatype BOOL8 bool 8 bit INT8 signed int 8 bit UINT8 unsigned int 8 bit INT16 signed int 16 bit UINT16 unsigned int 16 bit INT32 signed int 32 bit UINT32 unsigned int 32 bit INT64 signed int 64 bit UINT64 unsigned int 64 bit FLOAT32 float 32 bit FLOAT64 float 64 bit STRING string (UTF-8) ARRAY_OF_BOOL8 array of bool 8 bit ARRAY_OF_INT8 array of signed int 8 bit ARRAY_OF_UINT8 array of unsigned int 8 bit ARRAY_OF_INT16 array of signed int 16 bit ARRAY_OF_UINT16 array of unsigned int 16 bit ARRAY_OF_INT32 array of signed int 32 bit ARRAY_OF_UINT32 array of unsigned int 32 bit ARRAY_OF_INT64 array of signed int 64 bit ARRAY_OF_UINT64 array of unsigned int 64 bit ARRAY_OF_FLOAT32 array of float 32 bit ARRAY_OF_FLOAT64 array of float 64 bit ARRAY_OF_STRING array of string (UTF-8) RAW raw bytes FLATBUFFERS bytes as a complex data type encoded as a flatbuffer Set a value of a variant \u00b6 To set a value to a variant, you can use one of the following functions: setValue(\\<type> value) value is a C data type: type of the variant will be identified automatically by its type (including string) value is a vector/set: array type of the variant will be identified automatically values will be copied setValue(\\<type>* values, size_t count) value is array of c data type (including array of string) array type of variant will be identified automatically by its type (including string) values will be copied shareValue(\\<type>* values, size_t count) In some cases it is not necessary to copy the value to a variant. A reference to the particular data is sufficient. type of variant will be identified automatically only a pointer to data will be stored this function is faster than the copy functions copyFlatbuffers() copyFlatbuffer from flatbuffer builder object shareFlatbuffers same as copyFlatbuffers() but data will not be copied. Only pointer to data will be stored setSharedPointer(type, data, size) set a variant to type with data and size data will not be copied, only a pointer will be stored setType(type, size) + copyRaw(data, size) set a variant with a specific type and size with data data will be copied Get a value of a variant \u00b6 To access data you can assign a variant to a basic data type. If the type of the variant match the basic data type, the value will be copied to the variable. If the type did not match, 0 or NULL will be returned. Example access scalar values \u00b6 Variant variant; uint32_t value1 = 4711; variant.setValue(value1); uint32_t value2 = variant; // value2 is 4711 uint16_t value3 = variant; // value3 is 0 To get the type of a variant use getType() Accessing values of an Array \u00b6 You can assign a variant to an C array type. If the type of the variant match the basic data type. Example access array values \u00b6 Variant data; // data containing an array of string const char** strArray = data; for (size_t i = 0; i < data.getCount(); i++) printf(\"%s\", strArray[i]); You can also use this kind of access for non-array values. getCount() returns 1 for nonArray values and cast to const pointer returns address of data. Access flatbuffers \u00b6 A variant can hold a flatbuffer. To check whether a variant has a specific flatbuffer type you can use the verifier of the flatbuffer. This check contains check for right data type (FLATBUFFERS) and check against flatbuffer verifier. Variant data; // data with a flatbuffer if (STATUS_SUCCEEDED(data.verifyFlatbuffers(VerifyAxisBuffer))); // VerifyAxisBuffer is generated out of .fbs file { auto axis = GetAxis(data->getData()); // GetAxis is generated out of .fbs file } Usage of flatbuffers \u00b6 Flatbuffers is used for complex data types. Documentation is available at here . Base of a complex data type is type defined in a .fbs file. Out of a .fbs file you have to generate different files: type_generated.h File to include in your source code. This header enables you to access a existing flatbuffer or create a new one. type.bfbs binary representation of the type. This file is used for generic access to a flatbuffer. It enables the datalayer to convert between flatbuffer and JSON. If you use flatbuffers as a data, you have to return the content of this file as metadata (see metadata ) Automatic Build using CMake \u00b6 To build your .fbs files using CMake include following lines in your CMakeLists.txt. To use the right flatbuffer compiler use these lines: # set flatbuffer root folder set ( FLATBUFFER_ROOT ${ DEPENDENCIES_ROOT } /appflatbuffers ) # expand binary search path for flatbuffer compiler if ( WIN32 ) set ( CMAKE_PROGRAM_PATH ${ CMAKE_PROGRAM_PATH } ${ FLATBUFFER_ROOT } /public/bin/win-msvc-x86/release ) else () set ( CMAKE_PROGRAM_PATH ${ CMAKE_PROGRAM_PATH } ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/release ) # set executable attributes for flatbuffer compiler execute_process ( COMMAND chmod +x ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/debug/flatc ) execute_process ( COMMAND chmod +x ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/release/flatc ) endif () # include flatbuffer cmake functions include ( ${ FLATBUFFER_ROOT } /public/CMake/FindFlatBuffers.cmake ) To compile your .fbs files, use these lines: set ( CMAKE_INCLUDE_PATH ${ CMAKE_INCLUDE_PATH } ${ FLATBUFFER_ROOT } /public/include ) include ( ${ FLATBUFFER_ROOT } /public/CMake/FindFlatBuffers.cmake ) SET ( IDL_FILES ${ IDL_FILES } ${ CMAKE_CURRENT_LIST_DIR } /mockups/Interpolator.fbs ${ CMAKE_CURRENT_LIST_DIR } /mockups/AllDataTypes.fbs ${ CMAKE_CURRENT_LIST_DIR } /motion/axis.fbs ) build_flatbuffers ( \"${IDL_FILES}\" \"\" BuildFlatbuffers \"\" \"${CMAKE_CURRENT_BINARY_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}\" \"\" ) This will generate an additional buildtarget BuildFlatbuffers . You can add this build target to your dependencies. Tips and Tricks \u00b6 Force Defaults / IsField Present Tables fields are only stored if they are set and are different from its default values. To ensure that all values are set in your flatbuffer, you can enable force_default in flatbuffer builder object: flatbuffers :: FlatBufferBuilder builder ; builder . ForceDefaults ( true ); Access of array values assume .fbs file table myTable { myVecDouble :[ double ]; } root_type MyTable ; access as flatbuffer vector auto myTable = GetMyTable ( value . getData ()); auto myVecDouble = myTable -> myVecDouble (); for ( size_t i = 0 ; i < myVecDouble -> size (); i ++ ) double value = myVecDouble [ i ]; access as C array auto myTable = GetMyTable ( value . getData ()); const double * myVecDouble = myTable -> myVecDouble () -> data (); for ( size_t i = 0 ; i < myVecDouble -> size (); i ++ ) double value = myVecDouble [ i ]; access as plane uint_8* memory (little endian) auto myTable = GetMyTable ( value . getData ()); const uint_8 * myVecDouble = myTable -> myVecDouble () -> Data (); Metadata \u00b6 Metadata contains additional information about a node. This information can be read using the metadata function. Definition of metadata can be found here . field comment nodeClass Resource: node is a resource Method: node is a command Type: node represents a type operations contains allowed operations description Short description in markdown format descriptionUrl URL to detailed description displayName Name to be displayed instead of node address displayFormat Auto: display in standard type format Bin: display as binary Oct: display octal Dec: display Decimal Hex: display hexadecimal unit unit of value extensions user defined extensions (key/value pair) references references to other nodes (key/value pair) References to other nodes in metadata \u00b6 Metadata of nodes can reference other nodes. A reference contains of a type and a targetAddress. There are some predefined types of references type comment readType type when reading a value writeType type when writing a value createType type when creating a value The target of a reference is a address in the datalayer tree. Typetree \u00b6 All types are included as nodes in the datalayer tree. Types are located under \"types/\". Types can be references in metadata as a reference. Usage Of Client \u00b6 Creation \u00b6 To create a client use factory function createClient(addr) . For addr you have following possibilities connection scheme comment INPROC Use empty address string to use in process communication. This works only if your client is in same address space (process) like datalayer application. IPC Only available in Linux. Use this communication kind in same device between processes. TCP Communication between devices addr comment \"\" INPROC communication (default) DL_IPC_AUTO Automatic choice of IPC port. It uses \\<$HOME>/.datalayer/frontend/2069 as IPC communication port. You can also use this define for communication between snaps with same user \"ipc://\\<path> IPC communication with specific path. You have to run a broker with this IPC path. \"tcp://\\<ip>:\\<port> TCP communication with specific device. Standard port of TCP is 2069. Celix Bundle \u00b6 This components includes a Celix bundle. You can use it in your own Celix framework. Be careful that on your target exists only one broker. So if you use datalayer in multiple Celix framework only one broker has to be started. To control start of broker you can use following entry in config.properties in your Celix preferences. datalayer . broker . enable = false The default value of this switch is true. So you have to set it explicit to false to disable startup of broker in your system.","title":"Documentation"},{"location":"datalayer.html#documentation","text":"naming conventions provider Routing of requests Provider Interface functions Usage of Variant Usage of flatbuffers Metadata Typetree Usage of client","title":"Documentation"},{"location":"datalayer.html#node-names","text":"Each value is addressed by a path. A path creates of a set of nodes. When nodes are named, an API is intuitive and easy to use. If done poorly, that same API can feel difficult to use and to understand. A node can be a singleton or a collection . For Example customers is a collection node and customer is a singleton resource (in a banking domain). We can identify customers collection resource using the path /customers . We can identify a single customer resource using the path /customers/{customerID} . A node may contain sub-collection resources also. For example, sub-collection resource accounts of a particular customer can be identified using the path /customers/{customerId}/accounts (in a banking domain). Similarly, a singleton resource account inside the sub-collection resource accounts can be identified as follows: /customers/{customerId}/accounts/{accountId} .","title":"Node names"},{"location":"datalayer.html#node-naming-conventions","text":"","title":"Node naming conventions "},{"location":"datalayer.html#use-small-capital-node-names","text":"Always use small capital node names!","title":"Use small capital node names"},{"location":"datalayer.html#hierarchical-relationships","text":"Use subnodes to indicate hierarchical relationship between resources device-management device-management/managed-devices device-management/managed-devices/{id} device-management/managed-devices/{id}/scripts device-management/managed-devices/{id}/scripts/{id}","title":"Hierarchical relationships"},{"location":"datalayer.html#use-nouns-to-represent-resources","text":"Nodes should refer to a resource that is a thing (noun) instead of referring to an action (verb) because nouns have properties which verbs do not have - similar to resources have attributes. Some examples of a resource are: Users of the system User Accounts Network Devices etc. and their resource URIs can be designed as below: device-management/managed-devices device-management/managed-devices/{device-id} user-management/users/ user-management/users/{id}","title":"Use nouns to represent resources"},{"location":"datalayer.html#use-verbs-to-represent-actions","text":"Has to return method in metadata.","title":"Use verbs to represent actions"},{"location":"datalayer.html#use-hyphens-to-improve-the-readability-of-nodes","text":"To make your nodes easy for people to interpret, use the hyphen (-) character to improve the readability of names in long path segments. inventory-management/managed-entities/{id}/install-script-location //More readable inventory-management/managedEntities/{id}/installScriptLocation //Less readable Do not use underscores ( _ ) It's possible to use an underscore in place of a hyphen to be used as separator. But depending on the applications font, it's possible that the underscore (_) character can either get partially obscured or completely hidden in some browsers or screens. To avoid this confusion, use hyphens (-) instead of underscores ( _ ). inventory-management/managed-entities/{id}/install-script-location //More readable inventory_management/managed_entities/{id}/install_script_location //More error prone","title":"Use hyphens (-) to improve the readability of nodes"},{"location":"datalayer.html#do-not-use-file-extensions","text":"File extensions look bad and do not add any advantage. Removing them decreases the length of URIs as well. No reason to keep them. Apart from above reason, if you want to highlight the media type of API using file extension then you should use metadata type. device-management/managed-devices.xml /*Do not use it*/ device-management/managed-devices /*This is correct path*/","title":"Do not use file extensions"},{"location":"datalayer.html#never-use-crud-function-names-in-path","text":"Paths should not be used to indicate that a CRUD (Create/Read/Update/Delete) function is performed. Paths should be used to uniquely identify resources and not any action upon them. Request methods should be used to indicate which CRUD function is performed. browse device-management/managed-devices //Get all devices create device-management/managed-devices //Create new Device read device-management/managed-devices/{id} //Get device for given Id write device-management/managed-devices/{id} //Update device for given Id delete device-management/managed-devices/{id} //Delete device for given Id","title":"Never use CRUD function names in path"},{"location":"datalayer.html#provider","text":"A provider is responsible for nodes. One provider can handle an unlimited amount of nodes. All requests to one provider are serialized: It's guarantied that if you are in one of the interface functions of a node (onRead, onWrite, ...) no other interface function of a node handled by the same provider is called. So you don't have to handle mutual exclusion to data handled by one provider.","title":"Provider "},{"location":"datalayer.html#register-of-nodes","text":"To register a path you have to specify which ProviderNode is responsible for this node. Example: Registration for ethercat/version: whenever a request for \"ethercat/version\" is send, this request will be routed to this particular node. If a provider is responsible for multiple nodes or the subnodes are unknown at the moment of registration, its possible to register with wildcards.","title":"Register of nodes"},{"location":"datalayer.html#single-wildcard","text":"A single wildcard is the sign \"*\". \"*\" stands for a any string on a hierarchy level. You can use multiple wildcards at different levels. Examples: provider1: test/* provider2: test/foo/*/bar provider3: test/*/foo provider4: test/*/* provider5: test/bar/bar","title":"Single wildcard \"*\""},{"location":"datalayer.html#double-wildcard","text":"A double wildcard is the string \"**\". \"**\" stands for any string on any hierarchy level. Such a wildcard is only allowed as last characters at your registration string. Example: provider6: test/** provider7: test/bar/**","title":"Double wildcard \"**\""},{"location":"datalayer.html#routing-of-requests","text":"All requests except browse requests are routed to the provider the address matches best to the registered path. So on each level a registration with a specific path matches before a registration with a wildcard. A single wildcard matches before a double wildcard. An address matches always the best registered provider (see example). Only provider with a wildcard at end of it's registered address will get browse requests.","title":"Routing of requests "},{"location":"datalayer.html#behavior-of","text":"Any '/' at begin or end at the request address will be removed. A provider will never get an address with a leading or tailing '/'. Routing of addresses will be done without a leading or tailing '/'.","title":"Behavior of '/'"},{"location":"datalayer.html#example-for-routing-of-requests","text":"address destination for browse destination for read \"\" nobody nobody \"test\" provider1 nobody \"test/1\" provider4 provider1 \"test/1/foo\" provider6 provider3 \"test/1/bar\" provider6 provider4 \"test/foo\" provider4 provider1 \"test/bar\" provider7 provider1 \"test/bar/bar\" provider7 provider5 \"test/bar/foo\" provider7 provider7 \"test/bar/bar/foo\" provider7 provider7 \"test/bar/foo/foo\" provider7 provider7 \"test/foo/foo\" provider6 provider3 \"test/foo/foo/bar\" provider6 provider2 \"test/foo/foo/foo\" provider6 provider6 \"test/1/bar\" provider6 provider4 \"test/1/bar/1\" provider6 provider6","title":"Example for routing of requests:"},{"location":"datalayer.html#browse","text":"Whenever a node is browsed, the result is a list of strings with contains the names of the subnodes of this nodes. In general datalayer wants to answer this kind of requests at its own. Only if someone has registered with a wildcard (\"*\") for this particular node this provider will be asked to give for subnodes. The result of this request will be merged with the nodes datalayer knows for its own. So a provider does not need to return values on a browse request it has already registered with a more specific path. address result of browse \"\" \"test\" \"test\" \"foo\", \"bar\" + return from provider1 \"test/1\" \"foo\" + return from provider4 \"test/1/foo\" return from provider6 \"test/1/bar\" return from provider6 \"test/foo\" \"foo\" + return from provider4 \"test/bar\" \"foo\" + \"bar\"+ return from provider7 \"test/bar/bar\" return from provider7 \"test/bar/foo\" return from provider7 \"test/bar/bar/foo\" return from provider7 \"test/bar/foo/foo\" return from provider7 \"test/foo/foo\" \"bar\" + return from provider6 \"test/foo/foo/bar\" return from provider6 \"test/foo/foo/foo\" return from provider6 \"test/1/bar\" return from provider6 \"test/1/bar/1\" return from provider6","title":"Browse"},{"location":"datalayer.html#provider-interface-functions","text":"Properties: idempotent, i.e. operation will have the same effect on the servers state if executed once or multiple times (note: this does not necessarily mean returning the same response or status code) safe, i.e. must not have side effects such as state changes Input data Output data function description safe idempotent Input Output onCreate Creates an object no no yes yes onRemove Removes an object no yes no no onBrowse Browse childs of a node yes yes no yes onRead Reads value of a node yes yes yes yes onWrite Writes value to a node no yes yes yes onMetadata Reads metadata of a node yes yes no no Requests are Stateless: Your node/application is not allowed to store anything about latest request. Handle each and every request as new. No session, no history. Design your interface in a way that each request contains all the information necessary to service the request. No Client context shall be stored on the server between requests. The client is responsible for managing the state of the application.","title":"Provider Interface functions "},{"location":"datalayer.html#oncreate","text":"This function should be used to create a new object. This function is not idempotent. So two calls of onCreate will not have the same result. As input all data should be provided to create the object. As output data the location (path) of of the new object should be returned. Examples: Creating an order in an online shop Creating an axis Creating a Motion Command","title":"onCreate"},{"location":"datalayer.html#onremove","text":"This function removes an object. No input and output data are allowed. Examples: Removing an axis","title":"onRemove"},{"location":"datalayer.html#onbrowse","text":"This function returns child nodes of this node. The result must be an array of strings with the names of the child nodes.","title":"onBrowse"},{"location":"datalayer.html#onread","text":"This function reads the value of a node. To specify the read operation the onRead function may have input data. This function is idempotent and safe. So two equal subsequent calls will have the same result and will not change the state.","title":"onRead"},{"location":"datalayer.html#onwrite","text":"This function changes the value of an already existing node. The new value is provided as input data. As output data you can return the new node value or nothing. This function is idempotent. So if you send a request multiple times, that should be equivalent to a single request modification.","title":"onWrite"},{"location":"datalayer.html#onmetadata","text":"This function returns the metadata of this note. You have to return a metadata.fbs flatbuffer. See metadata .","title":"onMetadata"},{"location":"datalayer.html#usage-of-variant","text":"A variant holds data of different types. Following basic types are defined: type description UNKNOWN unknown datatype BOOL8 bool 8 bit INT8 signed int 8 bit UINT8 unsigned int 8 bit INT16 signed int 16 bit UINT16 unsigned int 16 bit INT32 signed int 32 bit UINT32 unsigned int 32 bit INT64 signed int 64 bit UINT64 unsigned int 64 bit FLOAT32 float 32 bit FLOAT64 float 64 bit STRING string (UTF-8) ARRAY_OF_BOOL8 array of bool 8 bit ARRAY_OF_INT8 array of signed int 8 bit ARRAY_OF_UINT8 array of unsigned int 8 bit ARRAY_OF_INT16 array of signed int 16 bit ARRAY_OF_UINT16 array of unsigned int 16 bit ARRAY_OF_INT32 array of signed int 32 bit ARRAY_OF_UINT32 array of unsigned int 32 bit ARRAY_OF_INT64 array of signed int 64 bit ARRAY_OF_UINT64 array of unsigned int 64 bit ARRAY_OF_FLOAT32 array of float 32 bit ARRAY_OF_FLOAT64 array of float 64 bit ARRAY_OF_STRING array of string (UTF-8) RAW raw bytes FLATBUFFERS bytes as a complex data type encoded as a flatbuffer","title":"Usage of Variant "},{"location":"datalayer.html#set-a-value-of-a-variant","text":"To set a value to a variant, you can use one of the following functions: setValue(\\<type> value) value is a C data type: type of the variant will be identified automatically by its type (including string) value is a vector/set: array type of the variant will be identified automatically values will be copied setValue(\\<type>* values, size_t count) value is array of c data type (including array of string) array type of variant will be identified automatically by its type (including string) values will be copied shareValue(\\<type>* values, size_t count) In some cases it is not necessary to copy the value to a variant. A reference to the particular data is sufficient. type of variant will be identified automatically only a pointer to data will be stored this function is faster than the copy functions copyFlatbuffers() copyFlatbuffer from flatbuffer builder object shareFlatbuffers same as copyFlatbuffers() but data will not be copied. Only pointer to data will be stored setSharedPointer(type, data, size) set a variant to type with data and size data will not be copied, only a pointer will be stored setType(type, size) + copyRaw(data, size) set a variant with a specific type and size with data data will be copied","title":"Set a value of a variant"},{"location":"datalayer.html#get-a-value-of-a-variant","text":"To access data you can assign a variant to a basic data type. If the type of the variant match the basic data type, the value will be copied to the variable. If the type did not match, 0 or NULL will be returned.","title":"Get a value of a variant"},{"location":"datalayer.html#example-access-scalar-values","text":"Variant variant; uint32_t value1 = 4711; variant.setValue(value1); uint32_t value2 = variant; // value2 is 4711 uint16_t value3 = variant; // value3 is 0 To get the type of a variant use getType()","title":"Example access scalar values"},{"location":"datalayer.html#accessing-values-of-an-array","text":"You can assign a variant to an C array type. If the type of the variant match the basic data type.","title":"Accessing values of an Array"},{"location":"datalayer.html#example-access-array-values","text":"Variant data; // data containing an array of string const char** strArray = data; for (size_t i = 0; i < data.getCount(); i++) printf(\"%s\", strArray[i]); You can also use this kind of access for non-array values. getCount() returns 1 for nonArray values and cast to const pointer returns address of data.","title":"Example access array values"},{"location":"datalayer.html#access-flatbuffers","text":"A variant can hold a flatbuffer. To check whether a variant has a specific flatbuffer type you can use the verifier of the flatbuffer. This check contains check for right data type (FLATBUFFERS) and check against flatbuffer verifier. Variant data; // data with a flatbuffer if (STATUS_SUCCEEDED(data.verifyFlatbuffers(VerifyAxisBuffer))); // VerifyAxisBuffer is generated out of .fbs file { auto axis = GetAxis(data->getData()); // GetAxis is generated out of .fbs file }","title":"Access flatbuffers"},{"location":"datalayer.html#usage-of-flatbuffers","text":"Flatbuffers is used for complex data types. Documentation is available at here . Base of a complex data type is type defined in a .fbs file. Out of a .fbs file you have to generate different files: type_generated.h File to include in your source code. This header enables you to access a existing flatbuffer or create a new one. type.bfbs binary representation of the type. This file is used for generic access to a flatbuffer. It enables the datalayer to convert between flatbuffer and JSON. If you use flatbuffers as a data, you have to return the content of this file as metadata (see metadata )","title":"Usage of flatbuffers "},{"location":"datalayer.html#automatic-build-using-cmake","text":"To build your .fbs files using CMake include following lines in your CMakeLists.txt. To use the right flatbuffer compiler use these lines: # set flatbuffer root folder set ( FLATBUFFER_ROOT ${ DEPENDENCIES_ROOT } /appflatbuffers ) # expand binary search path for flatbuffer compiler if ( WIN32 ) set ( CMAKE_PROGRAM_PATH ${ CMAKE_PROGRAM_PATH } ${ FLATBUFFER_ROOT } /public/bin/win-msvc-x86/release ) else () set ( CMAKE_PROGRAM_PATH ${ CMAKE_PROGRAM_PATH } ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/release ) # set executable attributes for flatbuffer compiler execute_process ( COMMAND chmod +x ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/debug/flatc ) execute_process ( COMMAND chmod +x ${ FLATBUFFER_ROOT } /public/bin/linux-gcc-x64/release/flatc ) endif () # include flatbuffer cmake functions include ( ${ FLATBUFFER_ROOT } /public/CMake/FindFlatBuffers.cmake ) To compile your .fbs files, use these lines: set ( CMAKE_INCLUDE_PATH ${ CMAKE_INCLUDE_PATH } ${ FLATBUFFER_ROOT } /public/include ) include ( ${ FLATBUFFER_ROOT } /public/CMake/FindFlatBuffers.cmake ) SET ( IDL_FILES ${ IDL_FILES } ${ CMAKE_CURRENT_LIST_DIR } /mockups/Interpolator.fbs ${ CMAKE_CURRENT_LIST_DIR } /mockups/AllDataTypes.fbs ${ CMAKE_CURRENT_LIST_DIR } /motion/axis.fbs ) build_flatbuffers ( \"${IDL_FILES}\" \"\" BuildFlatbuffers \"\" \"${CMAKE_CURRENT_BINARY_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}\" \"\" ) This will generate an additional buildtarget BuildFlatbuffers . You can add this build target to your dependencies.","title":"Automatic Build using CMake"},{"location":"datalayer.html#tips-and-tricks","text":"Force Defaults / IsField Present Tables fields are only stored if they are set and are different from its default values. To ensure that all values are set in your flatbuffer, you can enable force_default in flatbuffer builder object: flatbuffers :: FlatBufferBuilder builder ; builder . ForceDefaults ( true ); Access of array values assume .fbs file table myTable { myVecDouble :[ double ]; } root_type MyTable ; access as flatbuffer vector auto myTable = GetMyTable ( value . getData ()); auto myVecDouble = myTable -> myVecDouble (); for ( size_t i = 0 ; i < myVecDouble -> size (); i ++ ) double value = myVecDouble [ i ]; access as C array auto myTable = GetMyTable ( value . getData ()); const double * myVecDouble = myTable -> myVecDouble () -> data (); for ( size_t i = 0 ; i < myVecDouble -> size (); i ++ ) double value = myVecDouble [ i ]; access as plane uint_8* memory (little endian) auto myTable = GetMyTable ( value . getData ()); const uint_8 * myVecDouble = myTable -> myVecDouble () -> Data ();","title":"Tips and Tricks"},{"location":"datalayer.html#metadata","text":"Metadata contains additional information about a node. This information can be read using the metadata function. Definition of metadata can be found here . field comment nodeClass Resource: node is a resource Method: node is a command Type: node represents a type operations contains allowed operations description Short description in markdown format descriptionUrl URL to detailed description displayName Name to be displayed instead of node address displayFormat Auto: display in standard type format Bin: display as binary Oct: display octal Dec: display Decimal Hex: display hexadecimal unit unit of value extensions user defined extensions (key/value pair) references references to other nodes (key/value pair)","title":"Metadata "},{"location":"datalayer.html#references-to-other-nodes-in-metadata","text":"Metadata of nodes can reference other nodes. A reference contains of a type and a targetAddress. There are some predefined types of references type comment readType type when reading a value writeType type when writing a value createType type when creating a value The target of a reference is a address in the datalayer tree.","title":"References to other nodes in metadata "},{"location":"datalayer.html#typetree","text":"All types are included as nodes in the datalayer tree. Types are located under \"types/\". Types can be references in metadata as a reference.","title":"Typetree "},{"location":"datalayer.html#usage-of-client","text":"","title":"Usage Of Client "},{"location":"datalayer.html#creation","text":"To create a client use factory function createClient(addr) . For addr you have following possibilities connection scheme comment INPROC Use empty address string to use in process communication. This works only if your client is in same address space (process) like datalayer application. IPC Only available in Linux. Use this communication kind in same device between processes. TCP Communication between devices addr comment \"\" INPROC communication (default) DL_IPC_AUTO Automatic choice of IPC port. It uses \\<$HOME>/.datalayer/frontend/2069 as IPC communication port. You can also use this define for communication between snaps with same user \"ipc://\\<path> IPC communication with specific path. You have to run a broker with this IPC path. \"tcp://\\<ip>:\\<port> TCP communication with specific device. Standard port of TCP is 2069.","title":"Creation"},{"location":"datalayer.html#celix-bundle","text":"This components includes a Celix bundle. You can use it in your own Celix framework. Be careful that on your target exists only one broker. So if you use datalayer in multiple Celix framework only one broker has to be started. To control start of broker you can use following entry in config.properties in your Celix preferences. datalayer . broker . enable = false The default value of this switch is true. So you have to set it explicit to false to disable startup of broker in your system.","title":"Celix Bundle"},{"location":"debug.html","text":"Debugging Snaps \u00b6 Overview \u00b6 This document describes how applications can be debugged if they are running in the confined Ubuntu Core snap environment of a ctrlX CORE. In this document first is briefly described how ctrlX CORE instances are connected over TCP/IP and SSH. One chapter provides a general overview regarding debugging of snaps. Then each following chapter describes for one programming language the language-dependent features of snap debugging. Connecting ctrlX CORE devices \u00b6 IP Address of a ctrlX CORE \u00b6 From the build environment ctrlX CORE devices are connected via TCP/IP. Assuming we are using a (QEMU) virtual machine as build environment the different kind of ctrlX CORE devices are reachable over these IP addresses: ctrlX CORE virtual with port forwarding: 10.0.2.2 ctrlX CORE virtual with network adapter: 192.168.1.1 ctrlX CORE: real IP address To point 1.: From the point of view of the virtual machine this is the IP address of the host computer. The ctrlX CORE virtual has no own IP address. The connections to the control are realized via port forwarding. Set up SSH Public Key Authentication \u00b6 Debugging is based on SSH, so SSH should be set up between the debugger client on the host computer and the debugger server on the ctrlX CORE. To make logging in easier public key authentification should be installed. For this kind of authorization a private / public key pair is generated. The private key is stored into a file kept secret on your host computer. The content of the public key is appended to the file ~/.ssh/authorized_keys in your home directory of the ctrlX CORE (remote computer). Important You need an account with root rights and a home directory on the ctrlX CORE. Creating the key pair and the installation both on the host computer and on the ctrlX CORE (remote computer) is described here Set up SSH public key authentication to connect to a remote system or here (in German) OpenSSH Public Key Authentifizierung unter Ubuntu . Additional hints: - Use standard file names: \"id_rsa\" for the private and \"id_rsa.pub\" for the public key file. - On the host computer set the (UNIX) permissions attributes for \"id_rsa\" to 600 (-rw-------) - On the host computer use the file \"~/.ssh/config\" to configure several ssh connections to different ctrlX CORE devices. Snap Debugging in General \u00b6 We recommend to test your application extensively in the build environment. Debugging an application running in it's confined Ubuntu Core snap enviroment should be the last step to find issues during development and test. Common information about debugging snaps are provided here: Debugging snaps Important The log output of a snap can be checked with sudo snap logs -f snapname Start a SSH session and enter e.g. sudo snap logs -f sdk-cpp-alldata C++ \u00b6 Introduction \u00b6 Debugging C++ applications in their snap environment is done by two debugging tools: 1. The gdb server is running on the remote target. During a debug session he will attach to the running process to be debugged. 2. The gdb debugger is running on the build environment. At the start of a remote debugging session he will connect to the gdb server. For debugging all commands are sent to the server whow will execute them and send to response back to the gdb debugger. The snap daemon (snapd) provides the gdb server as buildin tool. Important The application has to stop on startup so that the gdb server can attach to the running process. For more informations about using gdb and gdb server in snap environment see https://snapcraft.io/docs/using-gdb-gdbserver . 'Debugging with GDB' provides general informations about this debugging tool: https://sourceware.org/gdb/current/onlinedocs/gdb/ Overview \u00b6 This overview will give you a short explenation how remote debugging of a C++ snap application will work. A detailed description will follow in the next chapters. These are the basics points: Your C++ code has to raise a SIGSTOP signal in debug mode. This is done typically in the startup sequence or somewhere else where needed. You have to build your C++ snap in debug mode and install it on your ctrlX. The snap application will be restarted manually via ssh with the command sudo snap run --experimental-gdbserver=:12345 <Snapname>.<Appname> The execution of the application will stop when the SIGSTOP signal is raised so that the gdb server is able to connect. From your build environment the gdb debugger is started in remote mode. Provided with IP address and port nummber he can communicate with the gdb server on the ctrlX. Now the debug process can be started using gdb debugger commands. Normally this is done from an IDE like VisualStudio Code. Prerequisites \u00b6 In the following chapters configuration and starting C++ snap application debugging is explained assuming that Visual Studio Code is used as IDE. Furthermore we assume that a hardware based ctrlX CORE (aarch64) with the IP address 192.168.1.1 is used and that there is an user with the name rootsshuser installed whow has root and ssh permissions. Prerequisites for the ctrlX \u00b6 Snapd > 2.46.1 User rootsshuser with root and ssh access to the device. Prerequisites for the Linux Build Environment \u00b6 Package gdb-multiarch installed, if not enter sudo apt-get install -y gdb-multiarch Copy public key id_sa.pub to ctrlX CORE: ssh-copy-id rootsshuser@192.168.1.1 Download and extract the SDK zip archive Getting Started \u00b6 The code and configuration examples are from the SDK sample in samples-cpp/datalayer.register.node So start Visual Studio Code, connect to your build enviroment and open this folder. Raising SIGSTOP in the C++ Code \u00b6 In main.cpp at the beginning of the 'int main()' function the code for raising the SIGSTOP signal is placed. The code is only compiled in debug mode: #ifdef MY_DEBUG std :: cout << \"Starting 'raise(SIGSTOP)', waiting for debugger..\" << std :: endl ; raise ( SIGSTOP ); std :: cout << \"Debugger connected, continuing program...\" << std :: endl ; #endif Build the Debug Snap \u00b6 Select the Visual Studio Code extension CMake in the sidebar. At the top of the explorer window click on '...' (Views and more actions) and select 'Clean all Projects'. In the status bar at the bottom of the Visual Studio Code window click on the CMake field and select 'Debug' as build variant in the options drop box. In the main menu click 'Run Build Task' and select the CMake Build Kit (compiler). For our ctrlX CORE select 'GCC for aarch64...'. The build will start and create a debug mode snap 'registernode_..._arm64.snap'. Right click this file and select 'Download...' Install the Debug Snap \u00b6 Install the debug snap on your ctrlX CORE. The application will be started but stops immediately because of raising the SIGSTOP signal at the beginning of the main function. Configuring Remote Debugging in VisualStudio Code \u00b6 From Visual Studio Code we want to start the application with the snap run command. For this the file tasks.json contains the task Launch Remote GDB Server { \"label\": \"Launch Remote GDB Server\", \"type\": \"shell\", \"problemMatcher\": \" $gcc \", \"command\": \"ssh ${ input : Root - User } @ ${ input : Target - IP } \\\"sudo snap run --experimental-gdbserver=:12345 registernode.registerNode\\\" \", } The tag 'command' starts the application under the gdb server via ssh. As second action we want to start the gdb debugger in remote mode so that he connects to the remote gdb server. Therefor in launch.json the configuration set aarch64 ctrlX (remote) is stored. { \"name\": \"aarch64 ctrlX (remote)\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \" ${ workspaceFolder } /generated/ubuntu20-gcc-aarch64/Debug/registerNode\", \"cwd\": \" ${ workspaceFolder } \", \"miDebuggerPath\": \"/usr/bin/gdb-multiarch\", \"miDebuggerServerAddress\": \"192.168.1.1:12345\", \"stopAtEntry\": true, \"targetArchitecture\": \"arm64\", \"externalConsole\": false, \"MIMode\": \"gdb\", \"setupCommands\": [ { \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true }, ] } The tag 'miDebuggerPath' select gdb-multiarch as debugger, 'miDebuggerServerAddress' set IP address and port number to connect to the remote gdb server. Starting the Application with VisualStudio Code \u00b6 Select Main menu item Terminal --> Run Task... --> Launch GDB-Server In the Terminal window a wellcome message will appear: Welcome to \"snap run --gdbserver\" . You are right before your application is run . Please open a different terminal and run : gdb - ex = \"target remote :12345\" - ex = continue - ex = \"signal SIGCONT\" ( gdb ) continue or use your favorite gdb frontend and connect to : 12345 The gdb server has started the application which stops because of SIGSTOP. We are ready to connect with the gdb debugger. Start Snap Debugging with the Visual Studio Code \u00b6 Important Attaching to the snap application succeeds only when there are no breakpoints active! Select main menu Run --> Remove All Breakpoints Select the 'Run and Debug' icon in the extension side bar. Select 'aarch64 ctrlX' in the top line of the explorer window Click the green start icon Now gdb is started and connected to the gdb server. With the DEBUG CONSOLE window Visual Studio Code provides an output area and a command line to enter gdb commands - see green area in picture below. * Click into the gdb command line (green area in the picture above) and enter -exec info b * All active breakpoints are listed. Each breakpoint has an number (see cloumn 'Num') * Delete all listed breakpoints specified by their number, beginning with 1: -exec delete 1 * Ensure with -exec info b that no breakpoints are set. * Press F5 (Start/Continue Debugging) several times until in the output area of the DEBUG CONSOLE the loaded libraries are listed and the yellow debug arrow points to the 'raise(SIGSTOP)' line. Now you can add further breakpoints and continue debugging in the known way. Screenshots \u00b6 Python \u00b6 This chapter describes remote debugging of snap written in Python. In the sample project datalayer.remote.debug all the features described in this chapter have been implemented. Using Visual Studio Code - Additional Tasks in launch.json \u00b6 On the host computer Visual Studio Code is used as Integrated Development Environment (IDE). For general informations regarding Python debugging in Visual Studio Code see https://code.visualstudio.com/docs/python/debugging , chapter \"Debugging by attaching over a network connection\". The Python Visual Studio Code extension has a Python debug client. For a remote debugging session we have add a configuration set with these parameters/values: The request type is \"attach\" : \"request\": \"attach\", The IP address of the ctrlX CORE has to be provided e.g.: \"host\": \"192.168.2.61\", The port number where the debug server is listening has to be provided e.g.: \"port\": 12345, and a link to the exe Here you can find the complete file: samples-python/datalayer.remote.debug/.vscode/launch.json There are three launch configurations for remote debugging: * \"Remote ctrlX CORE virtual - Port forwarding\" * \"Remote ctrlX CORE virtual - Network adapter\" * \"Remote ctrlX CORE\" Preparing your Python Project for Remote Debugging \u00b6 Installing the required Python packages into your build environment ist described here: samples-python/python.md In our sample project the Python package debugpy is used for remote debugging of Python code. The Python Package debugpy \u00b6 The package debugpy provides a debug server and functions to configure the debug connection and to set breakpoints. The configuration of the debug connection and the start of the debug server have to be called in the Python application program so that the application stops (preferred in the startup phase) and waits for a debug client whow wants attach to the process. Setting breakpoints by program code is optional. To make the usage of debugpy easier the essential function calls are extracted and provided in the script samples-python/datalayer.remote.debug/debugging.py. debugging.init() scans the applications parameter list for --debug-port=... If this parameter is not found remote debugging will be not enabled. Usage see main.py. debugging.wait_for_client(port: int) is an internal function called by init(). It configures the remote debug connections and starts the debug server. The application is stopped until a debug client connects. With debugging.breakpoint() breakpoints can be set by the Python code itself - see main.py. Packing debugpy into your snap \u00b6 snapcraft will pack debugpy into the snap because it is listed in the parameter \"install_requires\" of the function setup() in setup.py. Creating and Installing a snap \u00b6 Start a terminal and enter snapcraft clean --destructive-mode snapcraft --destructive-mode Important To create a snap for a ctrlX CORE you need an aarch64 (arm64) building environment e.g. a QEMU VM with aarch64 emulation. Install the snap on your ctrlX CORE. After installation of the snap the app will be started at once - but without remote debugging enabled. Start your Python App in Remote Debugging Mode \u00b6 Connect via SSH to your ctrlX and start your app in debugging mode. Stop the snap: sudo snap stop sdk-py-remote-debug Start the app providing a debug port as command line parameter: sudo snap run sdk-py-remote-debug.app --debug-port=12345 Important Ensure that the port number is the same as configured in launch.json. Now the app holds on startup and waits for a debug client to connect. Do Remote Debugging with Visual Studio Code \u00b6 In Visual Studio Code * Click the 'Run and Debug' icon in the side bar, * select the according launch configuration for remote debugging * and enter F5 Visual Studio Code will connect to the debug server on the ctrlX CORE and attach to the process. Breakpoints can be set within the Python editor. Furthermore breakpoints set programatically are active. Using Python Package debugpy in your own Projects \u00b6 To use remote debugging in your own projects just do following steps: Copy the script samples-python/datalayer.remote.debug/debugging.py into your project folder Install debugpy into your development environment e.g. by adding 'debugpy' into the file requirerequirements.txt Add debugpy to the list of parameter install_requires=[...]","title":"Debugging Snaps"},{"location":"debug.html#debugging-snaps","text":"","title":"Debugging Snaps"},{"location":"debug.html#overview","text":"This document describes how applications can be debugged if they are running in the confined Ubuntu Core snap environment of a ctrlX CORE. In this document first is briefly described how ctrlX CORE instances are connected over TCP/IP and SSH. One chapter provides a general overview regarding debugging of snaps. Then each following chapter describes for one programming language the language-dependent features of snap debugging.","title":"Overview"},{"location":"debug.html#connecting-ctrlx-core-devices","text":"","title":"Connecting ctrlX CORE devices"},{"location":"debug.html#ip-address-of-a-ctrlx-core","text":"From the build environment ctrlX CORE devices are connected via TCP/IP. Assuming we are using a (QEMU) virtual machine as build environment the different kind of ctrlX CORE devices are reachable over these IP addresses: ctrlX CORE virtual with port forwarding: 10.0.2.2 ctrlX CORE virtual with network adapter: 192.168.1.1 ctrlX CORE: real IP address To point 1.: From the point of view of the virtual machine this is the IP address of the host computer. The ctrlX CORE virtual has no own IP address. The connections to the control are realized via port forwarding.","title":"IP Address of a ctrlX CORE"},{"location":"debug.html#set-up-ssh-public-key-authentication","text":"Debugging is based on SSH, so SSH should be set up between the debugger client on the host computer and the debugger server on the ctrlX CORE. To make logging in easier public key authentification should be installed. For this kind of authorization a private / public key pair is generated. The private key is stored into a file kept secret on your host computer. The content of the public key is appended to the file ~/.ssh/authorized_keys in your home directory of the ctrlX CORE (remote computer). Important You need an account with root rights and a home directory on the ctrlX CORE. Creating the key pair and the installation both on the host computer and on the ctrlX CORE (remote computer) is described here Set up SSH public key authentication to connect to a remote system or here (in German) OpenSSH Public Key Authentifizierung unter Ubuntu . Additional hints: - Use standard file names: \"id_rsa\" for the private and \"id_rsa.pub\" for the public key file. - On the host computer set the (UNIX) permissions attributes for \"id_rsa\" to 600 (-rw-------) - On the host computer use the file \"~/.ssh/config\" to configure several ssh connections to different ctrlX CORE devices.","title":"Set up SSH Public Key Authentication"},{"location":"debug.html#snap-debugging-in-general","text":"We recommend to test your application extensively in the build environment. Debugging an application running in it's confined Ubuntu Core snap enviroment should be the last step to find issues during development and test. Common information about debugging snaps are provided here: Debugging snaps Important The log output of a snap can be checked with sudo snap logs -f snapname Start a SSH session and enter e.g. sudo snap logs -f sdk-cpp-alldata","title":"Snap Debugging in General"},{"location":"debug.html#c","text":"","title":"C++"},{"location":"debug.html#introduction","text":"Debugging C++ applications in their snap environment is done by two debugging tools: 1. The gdb server is running on the remote target. During a debug session he will attach to the running process to be debugged. 2. The gdb debugger is running on the build environment. At the start of a remote debugging session he will connect to the gdb server. For debugging all commands are sent to the server whow will execute them and send to response back to the gdb debugger. The snap daemon (snapd) provides the gdb server as buildin tool. Important The application has to stop on startup so that the gdb server can attach to the running process. For more informations about using gdb and gdb server in snap environment see https://snapcraft.io/docs/using-gdb-gdbserver . 'Debugging with GDB' provides general informations about this debugging tool: https://sourceware.org/gdb/current/onlinedocs/gdb/","title":"Introduction"},{"location":"debug.html#overview_1","text":"This overview will give you a short explenation how remote debugging of a C++ snap application will work. A detailed description will follow in the next chapters. These are the basics points: Your C++ code has to raise a SIGSTOP signal in debug mode. This is done typically in the startup sequence or somewhere else where needed. You have to build your C++ snap in debug mode and install it on your ctrlX. The snap application will be restarted manually via ssh with the command sudo snap run --experimental-gdbserver=:12345 <Snapname>.<Appname> The execution of the application will stop when the SIGSTOP signal is raised so that the gdb server is able to connect. From your build environment the gdb debugger is started in remote mode. Provided with IP address and port nummber he can communicate with the gdb server on the ctrlX. Now the debug process can be started using gdb debugger commands. Normally this is done from an IDE like VisualStudio Code.","title":"Overview"},{"location":"debug.html#prerequisites","text":"In the following chapters configuration and starting C++ snap application debugging is explained assuming that Visual Studio Code is used as IDE. Furthermore we assume that a hardware based ctrlX CORE (aarch64) with the IP address 192.168.1.1 is used and that there is an user with the name rootsshuser installed whow has root and ssh permissions.","title":"Prerequisites"},{"location":"debug.html#prerequisites-for-the-ctrlx","text":"Snapd > 2.46.1 User rootsshuser with root and ssh access to the device.","title":"Prerequisites for the ctrlX"},{"location":"debug.html#prerequisites-for-the-linux-build-environment","text":"Package gdb-multiarch installed, if not enter sudo apt-get install -y gdb-multiarch Copy public key id_sa.pub to ctrlX CORE: ssh-copy-id rootsshuser@192.168.1.1 Download and extract the SDK zip archive","title":"Prerequisites for the Linux Build Environment"},{"location":"debug.html#getting-started","text":"The code and configuration examples are from the SDK sample in samples-cpp/datalayer.register.node So start Visual Studio Code, connect to your build enviroment and open this folder.","title":"Getting Started"},{"location":"debug.html#raising-sigstop-in-the-c-code","text":"In main.cpp at the beginning of the 'int main()' function the code for raising the SIGSTOP signal is placed. The code is only compiled in debug mode: #ifdef MY_DEBUG std :: cout << \"Starting 'raise(SIGSTOP)', waiting for debugger..\" << std :: endl ; raise ( SIGSTOP ); std :: cout << \"Debugger connected, continuing program...\" << std :: endl ; #endif","title":"Raising SIGSTOP in the C++ Code"},{"location":"debug.html#build-the-debug-snap","text":"Select the Visual Studio Code extension CMake in the sidebar. At the top of the explorer window click on '...' (Views and more actions) and select 'Clean all Projects'. In the status bar at the bottom of the Visual Studio Code window click on the CMake field and select 'Debug' as build variant in the options drop box. In the main menu click 'Run Build Task' and select the CMake Build Kit (compiler). For our ctrlX CORE select 'GCC for aarch64...'. The build will start and create a debug mode snap 'registernode_..._arm64.snap'. Right click this file and select 'Download...'","title":"Build the Debug Snap"},{"location":"debug.html#install-the-debug-snap","text":"Install the debug snap on your ctrlX CORE. The application will be started but stops immediately because of raising the SIGSTOP signal at the beginning of the main function.","title":"Install the Debug Snap"},{"location":"debug.html#configuring-remote-debugging-in-visualstudio-code","text":"From Visual Studio Code we want to start the application with the snap run command. For this the file tasks.json contains the task Launch Remote GDB Server { \"label\": \"Launch Remote GDB Server\", \"type\": \"shell\", \"problemMatcher\": \" $gcc \", \"command\": \"ssh ${ input : Root - User } @ ${ input : Target - IP } \\\"sudo snap run --experimental-gdbserver=:12345 registernode.registerNode\\\" \", } The tag 'command' starts the application under the gdb server via ssh. As second action we want to start the gdb debugger in remote mode so that he connects to the remote gdb server. Therefor in launch.json the configuration set aarch64 ctrlX (remote) is stored. { \"name\": \"aarch64 ctrlX (remote)\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \" ${ workspaceFolder } /generated/ubuntu20-gcc-aarch64/Debug/registerNode\", \"cwd\": \" ${ workspaceFolder } \", \"miDebuggerPath\": \"/usr/bin/gdb-multiarch\", \"miDebuggerServerAddress\": \"192.168.1.1:12345\", \"stopAtEntry\": true, \"targetArchitecture\": \"arm64\", \"externalConsole\": false, \"MIMode\": \"gdb\", \"setupCommands\": [ { \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true }, ] } The tag 'miDebuggerPath' select gdb-multiarch as debugger, 'miDebuggerServerAddress' set IP address and port number to connect to the remote gdb server.","title":"Configuring Remote Debugging in VisualStudio Code"},{"location":"debug.html#starting-the-application-with-visualstudio-code","text":"Select Main menu item Terminal --> Run Task... --> Launch GDB-Server In the Terminal window a wellcome message will appear: Welcome to \"snap run --gdbserver\" . You are right before your application is run . Please open a different terminal and run : gdb - ex = \"target remote :12345\" - ex = continue - ex = \"signal SIGCONT\" ( gdb ) continue or use your favorite gdb frontend and connect to : 12345 The gdb server has started the application which stops because of SIGSTOP. We are ready to connect with the gdb debugger.","title":"Starting the Application with VisualStudio Code"},{"location":"debug.html#start-snap-debugging-with-the-visual-studio-code","text":"Important Attaching to the snap application succeeds only when there are no breakpoints active! Select main menu Run --> Remove All Breakpoints Select the 'Run and Debug' icon in the extension side bar. Select 'aarch64 ctrlX' in the top line of the explorer window Click the green start icon Now gdb is started and connected to the gdb server. With the DEBUG CONSOLE window Visual Studio Code provides an output area and a command line to enter gdb commands - see green area in picture below. * Click into the gdb command line (green area in the picture above) and enter -exec info b * All active breakpoints are listed. Each breakpoint has an number (see cloumn 'Num') * Delete all listed breakpoints specified by their number, beginning with 1: -exec delete 1 * Ensure with -exec info b that no breakpoints are set. * Press F5 (Start/Continue Debugging) several times until in the output area of the DEBUG CONSOLE the loaded libraries are listed and the yellow debug arrow points to the 'raise(SIGSTOP)' line. Now you can add further breakpoints and continue debugging in the known way.","title":"Start Snap Debugging with the Visual Studio Code"},{"location":"debug.html#screenshots","text":"","title":"Screenshots"},{"location":"debug.html#python","text":"This chapter describes remote debugging of snap written in Python. In the sample project datalayer.remote.debug all the features described in this chapter have been implemented.","title":"Python"},{"location":"debug.html#using-visual-studio-code-additional-tasks-in-launchjson","text":"On the host computer Visual Studio Code is used as Integrated Development Environment (IDE). For general informations regarding Python debugging in Visual Studio Code see https://code.visualstudio.com/docs/python/debugging , chapter \"Debugging by attaching over a network connection\". The Python Visual Studio Code extension has a Python debug client. For a remote debugging session we have add a configuration set with these parameters/values: The request type is \"attach\" : \"request\": \"attach\", The IP address of the ctrlX CORE has to be provided e.g.: \"host\": \"192.168.2.61\", The port number where the debug server is listening has to be provided e.g.: \"port\": 12345, and a link to the exe Here you can find the complete file: samples-python/datalayer.remote.debug/.vscode/launch.json There are three launch configurations for remote debugging: * \"Remote ctrlX CORE virtual - Port forwarding\" * \"Remote ctrlX CORE virtual - Network adapter\" * \"Remote ctrlX CORE\"","title":"Using Visual Studio Code - Additional Tasks in launch.json"},{"location":"debug.html#preparing-your-python-project-for-remote-debugging","text":"Installing the required Python packages into your build environment ist described here: samples-python/python.md In our sample project the Python package debugpy is used for remote debugging of Python code.","title":"Preparing your Python Project for Remote Debugging"},{"location":"debug.html#the-python-package-debugpy","text":"The package debugpy provides a debug server and functions to configure the debug connection and to set breakpoints. The configuration of the debug connection and the start of the debug server have to be called in the Python application program so that the application stops (preferred in the startup phase) and waits for a debug client whow wants attach to the process. Setting breakpoints by program code is optional. To make the usage of debugpy easier the essential function calls are extracted and provided in the script samples-python/datalayer.remote.debug/debugging.py. debugging.init() scans the applications parameter list for --debug-port=... If this parameter is not found remote debugging will be not enabled. Usage see main.py. debugging.wait_for_client(port: int) is an internal function called by init(). It configures the remote debug connections and starts the debug server. The application is stopped until a debug client connects. With debugging.breakpoint() breakpoints can be set by the Python code itself - see main.py.","title":"The Python Package debugpy"},{"location":"debug.html#packing-debugpy-into-your-snap","text":"snapcraft will pack debugpy into the snap because it is listed in the parameter \"install_requires\" of the function setup() in setup.py.","title":"Packing debugpy into your snap"},{"location":"debug.html#creating-and-installing-a-snap","text":"Start a terminal and enter snapcraft clean --destructive-mode snapcraft --destructive-mode Important To create a snap for a ctrlX CORE you need an aarch64 (arm64) building environment e.g. a QEMU VM with aarch64 emulation. Install the snap on your ctrlX CORE. After installation of the snap the app will be started at once - but without remote debugging enabled.","title":"Creating and Installing a snap"},{"location":"debug.html#start-your-python-app-in-remote-debugging-mode","text":"Connect via SSH to your ctrlX and start your app in debugging mode. Stop the snap: sudo snap stop sdk-py-remote-debug Start the app providing a debug port as command line parameter: sudo snap run sdk-py-remote-debug.app --debug-port=12345 Important Ensure that the port number is the same as configured in launch.json. Now the app holds on startup and waits for a debug client to connect.","title":"Start your Python App in Remote Debugging Mode"},{"location":"debug.html#do-remote-debugging-with-visual-studio-code","text":"In Visual Studio Code * Click the 'Run and Debug' icon in the side bar, * select the according launch configuration for remote debugging * and enter F5 Visual Studio Code will connect to the debug server on the ctrlX CORE and attach to the process. Breakpoints can be set within the Python editor. Furthermore breakpoints set programatically are active.","title":"Do Remote Debugging with Visual Studio Code"},{"location":"debug.html#using-python-package-debugpy-in-your-own-projects","text":"To use remote debugging in your own projects just do following steps: Copy the script samples-python/datalayer.remote.debug/debugging.py into your project folder Install debugpy into your development environment e.g. by adding 'debugpy' into the file requirerequirements.txt Add debugpy to the list of parameter install_requires=[...]","title":"Using Python Package debugpy in your own Projects"},{"location":"dotnet.html","text":"README .NET Apps @ ctrlX \u00b6 Introduction \u00b6 This document describes how to setup up your development environment for building self-contained ctrlX Apps based on Microsoft .NET runtime . Self-contained means, your App contains an already matching and optimized .NET runtime for your target architecture, so there's no need to install any additional .NET runtime. All samples generate Apps (snaps) for the targets ctrlX CORE virtual (amd64) ctrlX CORE (arm64) Prerequisites \u00b6 In this chapter we describe how to install the necessary components on a development environment based on a QEMU VM. How you can create and run a QEMU VM is described here . Installation of .NET SDK on the QEMU VM \u00b6 Start a SSH session and login into the VM with boschrexroth/boschrexroth: ssh - p 10022 boschrexroth @localhost Start the script to install .NET as snap on your VM: ./install-dotnet-sdk.sh When installation is finished you can check your installed SDKs: dotnet --list-sdks The output should show the installed version and the path of ths dotnet-sdk. Check your Runtime: dotnet --list-runtimes Install the Visual Studio Code Extension from Marketplace \u00b6 We recommend to use Microsoft Visual Studio Code on your host computer as IDE - see here . To develop and test .NET application for the ctrlX we have to install the C# extension in the VM. Start Visual Studio Code and connect it with the QEMU VM. Select the extension icon in the left side bar and enter c# Select this extension and click 'Install in SSH' Prepare NuGet on the QEMU VM \u00b6 .NET projects can use NuGet packages. Therefor we have to provide some prerequisites on the VM. If you're behing a corporate proxy, you have to configure the NuGet Proxy in configuration file: /home/ ${ USER } /.nuget/NuGet/NuGet.Config Edit the NuGet configuration file with your preferred editor or with Visual Studio Code and add a config section containing the http_proxy and https_proxy inside the configuration section like shown below. Example: The following sample uses the Px Proxy running on the host computer. From the VM's point of view, this proxy can be reached with the URL http://10.0.2.2:3128. <configuration> <config> <add key= \"http_proxy\" value= \"http://10.0.2.2:3128\" /> <add key= \"https_proxy\" value= \"http://10.0.2.2:3128\" /> </config> ... </configuration> Building a .NET Sample Project \u00b6 Each .NET sample provides a rich set of tasks for your convenience. Click on Terminal -> Run Task . Choose your preferred task to run. Build (compile) your code \u00b6 Click on Terminal -> Run Task . Choose Task build . Clean your code \u00b6 Click on Terminal -> Run Task . Choose Task clean . Publish your (self-contained) application \u00b6 Click on Terminal -> Run Task . Choose any Task publish * matching your architecture and mode. make snap \u00b6 Click on Terminal -> Run Task . Choose any Task make snap * matching your architecture and mode. Debugging \u00b6 Debug on QEMU VM \u00b6 Just press F5 or Click on the Run from the menu. Choose Run -> .NET Core Launch (console) . Press the green Play button. Debug snap on ctrlX CORE virtual \u00b6 Click on Terminal -> Run Task . Choose any Task make snap amd64 . Install snap on ctrlX CORE virtual via ctrlX web interface For debugging snaps see here Debug snap on ctrlX CORE \u00b6 Click on Terminal -> Run Task . Choose any Task make snap arm64 . Install snap on ctrlX CORE via ctrlX web interface For debugging snaps see here Now you're ready to code .NET on ctrlX! Please open any sample directory in WSL using the Remote Explorer and see documentations how to Best Practise \u00b6 Provider Concepts \u00b6 There different concepts to write a Data Layer provider: Create and register nodes with individual node handlers \u00b6 Create a provider, which creates and registers all nodes with an individual node handler n x CreateNode n x Register Node : Handler = 1:1 Recommendation: Use for a small/medium of nodes with individual node handling. Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.provider Create and register nodes with same node handler \u00b6 Create a provider, which creates individual nodes and registers all nodes individually with same node handler. n x CreateNode n x Register Node : Handler = n:1 Recommendation: Use for a small/medium of nodes with common node handling Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No Implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.mqtt datalayer.provider.alldata Virtual provider (lightweight): Register on wildcard and manage virtual nodes \u00b6 Create just one node with a single node handler, registered to a wildcard address (e.g. myroot/**) and managing the nodes for your own. This lightweight handler returns virtual nodes in OnBrowse() method. See Data Layer documentation for details. 1 x CreateNode 1 x Register Node : Handler = n:1 Recommendation: Use for a large/very large or dynamic set of nodes (big data provider). Use if you want to manage the nodes in your application code. Pros: Very efficient. Contras: The Data Layer is not managaging your node hierarchy: You have to return the valid data in OnBrowse() . Samples: datalayer.provider.virtual Pitfalls \u00b6 Arithmetic operators of different integral or foating point types \u00b6 The following operators perform arithmetic operations with operands of numeric types: Unary : ++ (increment), -- (decrement), + (plus), and - (minus) operators Binary : * (multiplication), / (division), % (remainder), + (addition), and - (subtraction) operators Those operators are supported by all integral and floating-point numeric types. In the case of integral types, those operators (except the ++ and -- operators) are defined for the int , uint , long , and ulong types. When operands are of other integral types ( sbyte , byte , short , ushort , or char ), their values are converted to the int type , which is also the result type of an operation. When operands are of different integral or floating-point types, their values are converted to the closest containing type , if such a type exists. For more information, see the Numeric promotions section of the C# language specification. The ++ and -- operators are defined for all integral and floating-point numeric types and the char type. Example : Let' say we just wan't to increment a sbyte Variant value by keeping the data type, we have cast the result after performing the arithmetic operation: sbyte value = 42 ; var oldVariant = new Variant ( value ) var newVariant = new Variant (( sbyte )( oldVariant . ToSByte () + 1 )); Please see here for more informations. Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":".NET"},{"location":"dotnet.html#readme-net-apps-ctrlx","text":"","title":"README .NET Apps @ ctrlX"},{"location":"dotnet.html#introduction","text":"This document describes how to setup up your development environment for building self-contained ctrlX Apps based on Microsoft .NET runtime . Self-contained means, your App contains an already matching and optimized .NET runtime for your target architecture, so there's no need to install any additional .NET runtime. All samples generate Apps (snaps) for the targets ctrlX CORE virtual (amd64) ctrlX CORE (arm64)","title":"Introduction"},{"location":"dotnet.html#prerequisites","text":"In this chapter we describe how to install the necessary components on a development environment based on a QEMU VM. How you can create and run a QEMU VM is described here .","title":"Prerequisites"},{"location":"dotnet.html#installation-of-net-sdk-on-the-qemu-vm","text":"Start a SSH session and login into the VM with boschrexroth/boschrexroth: ssh - p 10022 boschrexroth @localhost Start the script to install .NET as snap on your VM: ./install-dotnet-sdk.sh When installation is finished you can check your installed SDKs: dotnet --list-sdks The output should show the installed version and the path of ths dotnet-sdk. Check your Runtime: dotnet --list-runtimes","title":"Installation of .NET SDK on the QEMU VM"},{"location":"dotnet.html#install-the-visual-studio-code-extension-from-marketplace","text":"We recommend to use Microsoft Visual Studio Code on your host computer as IDE - see here . To develop and test .NET application for the ctrlX we have to install the C# extension in the VM. Start Visual Studio Code and connect it with the QEMU VM. Select the extension icon in the left side bar and enter c# Select this extension and click 'Install in SSH'","title":"Install the Visual Studio Code Extension from Marketplace"},{"location":"dotnet.html#prepare-nuget-on-the-qemu-vm","text":".NET projects can use NuGet packages. Therefor we have to provide some prerequisites on the VM. If you're behing a corporate proxy, you have to configure the NuGet Proxy in configuration file: /home/ ${ USER } /.nuget/NuGet/NuGet.Config Edit the NuGet configuration file with your preferred editor or with Visual Studio Code and add a config section containing the http_proxy and https_proxy inside the configuration section like shown below. Example: The following sample uses the Px Proxy running on the host computer. From the VM's point of view, this proxy can be reached with the URL http://10.0.2.2:3128. <configuration> <config> <add key= \"http_proxy\" value= \"http://10.0.2.2:3128\" /> <add key= \"https_proxy\" value= \"http://10.0.2.2:3128\" /> </config> ... </configuration>","title":"Prepare NuGet on the QEMU VM"},{"location":"dotnet.html#building-a-net-sample-project","text":"Each .NET sample provides a rich set of tasks for your convenience. Click on Terminal -> Run Task . Choose your preferred task to run.","title":"Building a .NET Sample Project"},{"location":"dotnet.html#build-compile-your-code","text":"Click on Terminal -> Run Task . Choose Task build .","title":"Build (compile) your code"},{"location":"dotnet.html#clean-your-code","text":"Click on Terminal -> Run Task . Choose Task clean .","title":"Clean your code"},{"location":"dotnet.html#publish-your-self-contained-application","text":"Click on Terminal -> Run Task . Choose any Task publish * matching your architecture and mode.","title":"Publish your (self-contained) application"},{"location":"dotnet.html#make-snap","text":"Click on Terminal -> Run Task . Choose any Task make snap * matching your architecture and mode.","title":"make snap"},{"location":"dotnet.html#debugging","text":"","title":"Debugging"},{"location":"dotnet.html#debug-on-qemu-vm","text":"Just press F5 or Click on the Run from the menu. Choose Run -> .NET Core Launch (console) . Press the green Play button.","title":"Debug on QEMU VM"},{"location":"dotnet.html#debug-snap-on-ctrlx-corevirtual","text":"Click on Terminal -> Run Task . Choose any Task make snap amd64 . Install snap on ctrlX CORE virtual via ctrlX web interface For debugging snaps see here","title":"Debug snap on ctrlX COREvirtual"},{"location":"dotnet.html#debug-snap-on-ctrlx-core","text":"Click on Terminal -> Run Task . Choose any Task make snap arm64 . Install snap on ctrlX CORE via ctrlX web interface For debugging snaps see here Now you're ready to code .NET on ctrlX! Please open any sample directory in WSL using the Remote Explorer and see documentations how to","title":"Debug snap on ctrlX CORE"},{"location":"dotnet.html#best-practise","text":"","title":"Best Practise"},{"location":"dotnet.html#provider-concepts","text":"There different concepts to write a Data Layer provider:","title":"Provider Concepts"},{"location":"dotnet.html#create-and-register-nodes-with-individual-node-handlers","text":"Create a provider, which creates and registers all nodes with an individual node handler n x CreateNode n x Register Node : Handler = 1:1 Recommendation: Use for a small/medium of nodes with individual node handling. Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.provider","title":"Create and register nodes with individual node handlers"},{"location":"dotnet.html#create-and-register-nodes-with-same-node-handler","text":"Create a provider, which creates individual nodes and registers all nodes individually with same node handler. n x CreateNode n x Register Node : Handler = n:1 Recommendation: Use for a small/medium of nodes with common node handling Use for a logical grouping and managing of nodes. Pros: The Data Layer is managaging your node hierarchy: No Implementation of OnBrowse() required (return DL_UNSUPPORTED or DL_OK with an empty list). Contras: Not efficent for a large/very large set of nodes to handle. Samples: datalayer.mqtt datalayer.provider.alldata","title":"Create and register nodes with same node handler"},{"location":"dotnet.html#virtual-provider-lightweight-register-on-wildcard-and-manage-virtual-nodes","text":"Create just one node with a single node handler, registered to a wildcard address (e.g. myroot/**) and managing the nodes for your own. This lightweight handler returns virtual nodes in OnBrowse() method. See Data Layer documentation for details. 1 x CreateNode 1 x Register Node : Handler = n:1 Recommendation: Use for a large/very large or dynamic set of nodes (big data provider). Use if you want to manage the nodes in your application code. Pros: Very efficient. Contras: The Data Layer is not managaging your node hierarchy: You have to return the valid data in OnBrowse() . Samples: datalayer.provider.virtual","title":"Virtual provider (lightweight): Register on wildcard and manage virtual nodes"},{"location":"dotnet.html#pitfalls","text":"","title":"Pitfalls"},{"location":"dotnet.html#arithmetic-operators-of-different-integral-or-foating-point-types","text":"The following operators perform arithmetic operations with operands of numeric types: Unary : ++ (increment), -- (decrement), + (plus), and - (minus) operators Binary : * (multiplication), / (division), % (remainder), + (addition), and - (subtraction) operators Those operators are supported by all integral and floating-point numeric types. In the case of integral types, those operators (except the ++ and -- operators) are defined for the int , uint , long , and ulong types. When operands are of other integral types ( sbyte , byte , short , ushort , or char ), their values are converted to the int type , which is also the result type of an operation. When operands are of different integral or floating-point types, their values are converted to the closest containing type , if such a type exists. For more information, see the Numeric promotions section of the C# language specification. The ++ and -- operators are defined for all integral and floating-point numeric types and the char type. Example : Let' say we just wan't to increment a sbyte Variant value by keeping the data type, we have cast the result after performing the arithmetic operation: sbyte value = 42 ; var oldVariant = new Variant ( value ) var newVariant = new Variant (( sbyte )( oldVariant . ToSByte () + 1 )); Please see here for more informations.","title":"Arithmetic operators of different integral or foating point types"},{"location":"dotnet.html#support","text":"","title":"Support"},{"location":"dotnet.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"dotnet.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"dotnet.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"dotnet.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"fbs2plc.html","text":"The ctrlX Data Layer provides nodes containing structured data in the Flatbuffers format. Hereby in a Flatbuffer schema file (fbs file) the data structure is defined. The FlatBuffers compiler flatc is able to compile such a fbs file into code for several programming languages including IEC 61131-3 Structured Text (ST). This guide describes how a fbs file can be compiled into IEC 61131-3 ST code and how this code can be imported and used in your IEC 61131-3 project to handle Flatbuffers. The described workflow and the tools are currently running only under Windows 10 . Prerequisites \u00b6 1. ctrlX WORKS \u00b6 Install ctrlX WORKS >= 1.14 with the functions 'ctrlX PLC Engineering' and 'App Build Environment'. As installation path we recommend to use \"C:\\Program Files\\Rexroth\\ctrlX WORKS\" If you did so the path to ctrlX PLC Engineering is \"C:\\Program Files\\Rexroth\\ctrlX WORKS\\Studio\\Common\\ctrlX-PLC-Engineering.exe\" 2. ctrlX AUTOMATION SDK \u00b6 Download the ctrlX AUTOMATION SDK and extract it to c:\\ctrlx-automation-sdk The extracted archive contains two executables. Add the storage locations of these tools to the environment variable PATH. For flatc.exe: setx \"%PATH%;c:\\ctrlx-automation-sdk\\bin\\oss.flatbuffers\\win-msvc-x64\\release\" For fbs2plc.exe: setx \"%PATH%;c:\\ctrlx-automation-sdk\\bin\\fbs2plc\\win-x64\" 3. sdk-cpp-alldata as Provider \u00b6 Reading and writing a Flatbuffer Data Layer node within our IEC 61131-3 code requires an instance which provides this node to the ctrlX Data Layer. Therefor we use the snap sdk-cpp-alldata deployed by the ctrlX AUTOMATION SDK in the folder samples-cpp/datalayer.provider.all-data . This snap has to be build and installed in the ctrlX CORE, see: Quick Start Guide Building Snaps If the snap is installed and the ctrlX CORE is in Operation Mode it will provide a Flatbuffer variable with this Data Layer path: sdk-cpp-alldata/dynamic/fbs This node can be read, changed and written by our IEC 61131-3 sample code. From fbs File to a PLC library \u00b6 1. Working Directory \u00b6 Start a Windows the console app cmd.exe and create a working directory. c: & mkdir \\fbs2plc & cd \\fbs2plc Copy the start.bat file from the ctrlX AUTOMATION SDK into this directory copy c:\\ctrlx-automation-sdk\\samples-iec61131\\fbs-read-write\\start.bat . Copy the sampleSchema.fbs file from the ctrlX AUTOMATION SDK into this directory copy c:\\ctrlx-automation-sdk\\samples-cpp\\datalayer.provider.all-data\\sampleSchema.fbs . 2. ctrlX PLC Engineering \u00b6 Open ctrlX WORKS, select Engineering Tools and open ctrlX PLC Engineering. Within ctrlX PLC Engineering: Create a new empty library with the name sampleSchema Store it under c:\\fbs2plc 3. Prepare start.bat \u00b6 The batch file start.bat calls the executable fbs2plc.exe stored in c:\\ctrlx-automation-sdk\\bin\\fbs2plc\\win-x64 Open start.bat with a txt editor, check/change the parameter values below and save the file -title \"Flatbuffer sampleSchema Handling\" ^ -company \"Bosch Rexroth AG\" ^ -version 1.0.0.1 ^ -released ^ -author \"Bosch Rexroth AG\" ^ -placeHolder \"SampleSchema\" ^ -description \"Makes sampleSchema.fbs available in PLC code\" ^ -defaultNamespace sampleSchema ^ *) If you do not want to release your library at once set this line under comment: REM -released ^ Important Do not delete the ^ character at the end of each line! 4. Run start.bat \u00b6 Within the working directory launch the start.bat file: start.bat This file starts the fbs2plc executable. From here flatc is called to create ST code, which is then imported into the opened PLC library. You can watch the progress in the trace output. If an error occurs the execution is stopped. Warnings can be ignored. 5. Check Imported Code \u00b6 In ctrlX PLC Engineering check all imported content under the tab page POUs . If everything is OK save the library: Main menu time File: Store project and install in library system Using the PLC library in a PLC Project \u00b6 1. Create a new PLC Project \u00b6 In ctrlX PLC Engineering Create a new Project, Use an according ctrlX CORE template. Name : sampleSchema Save it under c:\\fbs2plc 2. Add Library \u00b6 Double click Libray Manager Select Add Library Search the generated library: Flatbuffer sampleSchema Handling 3. Import PLC Code \u00b6 Select main menu item Project: Import Select the file c:\\ctrlx-automation-sdk\\samples-iec61131\\fbs-read-write\\ctrlxVirtual.export Click the Login icon in the tool bar (Alt + F8) The project will be complied and downloaded into the PLC runtime system of the ctrlX CORE - an existing PLC application in the ctrlX CORE will be overwritten. Start the PLC application with the start icon of the tool bar. The PLC program should run without failure. 4. Check the Flatbuffer Access \u00b6 From a web browser login into your ctrlX CORE Web UI Select Settings - Data Layer Expand the Data Layer tree: sdk-cpp-alldata/dynamic/fbs The values of the x, y, z variables should be changed by our PLC program.","title":"Using Flatbuffers in IEC 61131-3 Code"},{"location":"fbs2plc.html#prerequisites","text":"","title":"Prerequisites"},{"location":"fbs2plc.html#1-ctrlx-works","text":"Install ctrlX WORKS >= 1.14 with the functions 'ctrlX PLC Engineering' and 'App Build Environment'. As installation path we recommend to use \"C:\\Program Files\\Rexroth\\ctrlX WORKS\" If you did so the path to ctrlX PLC Engineering is \"C:\\Program Files\\Rexroth\\ctrlX WORKS\\Studio\\Common\\ctrlX-PLC-Engineering.exe\"","title":"1. ctrlX WORKS"},{"location":"fbs2plc.html#2-ctrlx-automation-sdk","text":"Download the ctrlX AUTOMATION SDK and extract it to c:\\ctrlx-automation-sdk The extracted archive contains two executables. Add the storage locations of these tools to the environment variable PATH. For flatc.exe: setx \"%PATH%;c:\\ctrlx-automation-sdk\\bin\\oss.flatbuffers\\win-msvc-x64\\release\" For fbs2plc.exe: setx \"%PATH%;c:\\ctrlx-automation-sdk\\bin\\fbs2plc\\win-x64\"","title":"2. ctrlX AUTOMATION SDK"},{"location":"fbs2plc.html#3-sdk-cpp-alldata-as-provider","text":"Reading and writing a Flatbuffer Data Layer node within our IEC 61131-3 code requires an instance which provides this node to the ctrlX Data Layer. Therefor we use the snap sdk-cpp-alldata deployed by the ctrlX AUTOMATION SDK in the folder samples-cpp/datalayer.provider.all-data . This snap has to be build and installed in the ctrlX CORE, see: Quick Start Guide Building Snaps If the snap is installed and the ctrlX CORE is in Operation Mode it will provide a Flatbuffer variable with this Data Layer path: sdk-cpp-alldata/dynamic/fbs This node can be read, changed and written by our IEC 61131-3 sample code.","title":"3. sdk-cpp-alldata as Provider"},{"location":"fbs2plc.html#from-fbs-file-to-a-plc-library","text":"","title":"From fbs File to a PLC library"},{"location":"fbs2plc.html#1-working-directory","text":"Start a Windows the console app cmd.exe and create a working directory. c: & mkdir \\fbs2plc & cd \\fbs2plc Copy the start.bat file from the ctrlX AUTOMATION SDK into this directory copy c:\\ctrlx-automation-sdk\\samples-iec61131\\fbs-read-write\\start.bat . Copy the sampleSchema.fbs file from the ctrlX AUTOMATION SDK into this directory copy c:\\ctrlx-automation-sdk\\samples-cpp\\datalayer.provider.all-data\\sampleSchema.fbs .","title":"1. Working Directory"},{"location":"fbs2plc.html#2-ctrlx-plc-engineering","text":"Open ctrlX WORKS, select Engineering Tools and open ctrlX PLC Engineering. Within ctrlX PLC Engineering: Create a new empty library with the name sampleSchema Store it under c:\\fbs2plc","title":"2. ctrlX PLC Engineering"},{"location":"fbs2plc.html#3-prepare-startbat","text":"The batch file start.bat calls the executable fbs2plc.exe stored in c:\\ctrlx-automation-sdk\\bin\\fbs2plc\\win-x64 Open start.bat with a txt editor, check/change the parameter values below and save the file -title \"Flatbuffer sampleSchema Handling\" ^ -company \"Bosch Rexroth AG\" ^ -version 1.0.0.1 ^ -released ^ -author \"Bosch Rexroth AG\" ^ -placeHolder \"SampleSchema\" ^ -description \"Makes sampleSchema.fbs available in PLC code\" ^ -defaultNamespace sampleSchema ^ *) If you do not want to release your library at once set this line under comment: REM -released ^ Important Do not delete the ^ character at the end of each line!","title":"3. Prepare start.bat"},{"location":"fbs2plc.html#4-run-startbat","text":"Within the working directory launch the start.bat file: start.bat This file starts the fbs2plc executable. From here flatc is called to create ST code, which is then imported into the opened PLC library. You can watch the progress in the trace output. If an error occurs the execution is stopped. Warnings can be ignored.","title":"4. Run start.bat"},{"location":"fbs2plc.html#5-check-imported-code","text":"In ctrlX PLC Engineering check all imported content under the tab page POUs . If everything is OK save the library: Main menu time File: Store project and install in library system","title":"5. Check Imported Code"},{"location":"fbs2plc.html#using-the-plc-library-in-a-plc-project","text":"","title":"Using the PLC library in a PLC Project"},{"location":"fbs2plc.html#1-create-a-new-plc-project","text":"In ctrlX PLC Engineering Create a new Project, Use an according ctrlX CORE template. Name : sampleSchema Save it under c:\\fbs2plc","title":"1. Create a new PLC Project"},{"location":"fbs2plc.html#2-add-library","text":"Double click Libray Manager Select Add Library Search the generated library: Flatbuffer sampleSchema Handling","title":"2. Add Library"},{"location":"fbs2plc.html#3-import-plc-code","text":"Select main menu item Project: Import Select the file c:\\ctrlx-automation-sdk\\samples-iec61131\\fbs-read-write\\ctrlxVirtual.export Click the Login icon in the tool bar (Alt + F8) The project will be complied and downloaded into the PLC runtime system of the ctrlX CORE - an existing PLC application in the ctrlX CORE will be overwritten. Start the PLC application with the start icon of the tool bar. The PLC program should run without failure.","title":"3. Import PLC Code"},{"location":"fbs2plc.html#4-check-the-flatbuffer-access","text":"From a web browser login into your ctrlX CORE Web UI Select Settings - Data Layer Expand the Data Layer tree: sdk-cpp-alldata/dynamic/fbs The values of the x, y, z variables should be changed by our PLC program.","title":"4. Check the Flatbuffer Access"},{"location":"install-scripts.html","text":"An App Build Environment instance created by ctrlX WORKS or based on the scripts under the SDK folder public/scripts/environment has a set of important install scripts in the directory /home/boschrexroth/. install-sdk.sh \u00b6 Important Starting this script must be the first step using a new App Build Environment. This script downloads the ctrlX AUTOMATION SDK archive from github, extracts the content into the actual directory, sets some x permission flags and installs the ctrlx-datalayer debian package. Also snapcraft is installed because in the initialization phase during the first boot this snap cannot be installed. Here the archive is directly installed into the home directory: cd ./install-sdk.sh cd ctrlx-automation-sdk install-deb.sh \u00b6 Important Calling this script once is mandatory for architectural cross-builds of C++ apps. cd ./install-deb.sh Important libraries for the Data Layer communication are installed for both amd64 and arm64 (aarch64) architecture. install-go.sh \u00b6 If you want to develop apps in golang call this script: cd . / install - go . sh install-dotnet.sh \u00b6 If you want to develop apps in C# call this script: cd ./install-dotnet.sh install-nodejs-npm.sh \u00b6 If you want to develop apps in Node.js call this script: cd ./install-nodejs-npm.sh The Node.js snap inclusively the Node Package Manager npm ist installed. install-snapcraft.sh \u00b6 This script installs snapcraft, it is called implicitly by the other scripts.","title":"Important Installation Scripts"},{"location":"install-scripts.html#install-sdksh","text":"Important Starting this script must be the first step using a new App Build Environment. This script downloads the ctrlX AUTOMATION SDK archive from github, extracts the content into the actual directory, sets some x permission flags and installs the ctrlx-datalayer debian package. Also snapcraft is installed because in the initialization phase during the first boot this snap cannot be installed. Here the archive is directly installed into the home directory: cd ./install-sdk.sh cd ctrlx-automation-sdk","title":"install-sdk.sh"},{"location":"install-scripts.html#install-debsh","text":"Important Calling this script once is mandatory for architectural cross-builds of C++ apps. cd ./install-deb.sh Important libraries for the Data Layer communication are installed for both amd64 and arm64 (aarch64) architecture.","title":"install-deb.sh"},{"location":"install-scripts.html#install-gosh","text":"If you want to develop apps in golang call this script: cd . / install - go . sh","title":"install-go.sh"},{"location":"install-scripts.html#install-dotnetsh","text":"If you want to develop apps in C# call this script: cd ./install-dotnet.sh","title":"install-dotnet.sh"},{"location":"install-scripts.html#install-nodejs-npmsh","text":"If you want to develop apps in Node.js call this script: cd ./install-nodejs-npm.sh The Node.js snap inclusively the Node Package Manager npm ist installed.","title":"install-nodejs-npm.sh"},{"location":"install-scripts.html#install-snapcraftsh","text":"This script installs snapcraft, it is called implicitly by the other scripts.","title":"install-snapcraft.sh"},{"location":"licensing.html","text":"This document is part of the Bosch Rexroth ctrlX CORE App Development Guideline, and describes how to adapt to the the license management of the device. Please refer to the App Development Guide for further information. Table of Contents \u00b6 1 Introduction 2 License Enforcement 2.1 Add Content Plug to snapcraft.yaml 2.2 Adapt package-manifest.json 2.3 Use REST API to Enforce Licenses 3 Licensing Modes 3.1 Overview 3.2 ctrlX CORE Main License 3.3 ctrlX CORE Temporary Usage Rights (Emergency Mode) 3.4 ctrX CORE 10 Day Trial License 3.5 Four Hour Engineering Demo License on ctrlX CORE virtual 3.6 Additional License Mode: ctrX CORE 3 Month Test License 2 Introduction \u00b6 From a user's perspective, device licenses are managed by the Bosch Rexroth Licensing Center https://licensing.boschrexroth.com . Using the portal it is possible to assign licenses to a device and to download a capability response, which contains all assigned licenses for a specific device. The downloaded capability response can than be deployed to the corresponding device. The ctrlX CORE User Interfaces therefore provides a page which allows to upload a capability response and to check the currently available licenses on the device. For developers, the ctrlX CORE offers a restful API via an internal unix domain socket which can be used by an app to request and release a specific license. 3 License Enforcement \u00b6 To integrate an app into the license management, please follow the instructions below. 3.1 Add Content Plug to snapcraft.yaml ( ) \u00b6 To get access to the unix domain socket that provides the restful API, add the following content plug definition to the snapcraft.yaml: plugs : licensing-service : interface : content content : licensing-service target : $SNAP_DATA/licensing-service This will create a folder \"license-service\" during installation of the app on the ctrlX CORE and provide access to the unix domain socket \"licensing-service.sock\" which will be located in the folder. 3.2 Adapt package-manifest.json ( ) \u00b6 The app shall provide information in the package-manifest about each license that is supported. Description and title shall be human readable. The \"required\" flag indicates whether a license is mandatory to use the application. Set the flag to true when the license is required and to false, when the license is optional. \"licenses\" : [ { \"name\" : \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\" , \"title\" : \"ctrlX CORE - Foobar License\" , \"description\" : \"Unlock the App's functionality.\" , \"required\" : true }, { \"name\" : \"SWL-XCx-FRW-ADVANCED_FOOBAR\" , \"title\" : \"ctrlX CORE - Foobar License Extension\" , \"description\" : \"This license extends the functionality of the App.\" , \"required\" : false } ], 3.3 Use REST API to enforce licenses \u00b6 3.3.1 License Integration \u00b6 How an app reacts when no license is present or the license is removed during runtime, can be freely chosen by the app. Nevertheless, to provide a unique user experience across multiple apps, the following best practices are recommended. The app should acquire the license when started or (each time) when a function is called which requires a license. Additionally, the app should check whether the license is still present on the device in regular intervals or if the license has been removed or expired. Therefore, either release and re-acquire the license or use the getCapabilities() function. This applies for both, mandatory and optional, types of licenses. In case a license is not required anymore - e.g. when the app is stopped or uninstalled - the license should be released so that it is returned to the license pool and can be acquired by another app. Otherwise, the license will become available again only after a reboot of the device. In case a license is missing, a warning or an error shall be displayed and/or logged and the user should be informed which licences are required to execute the specific functionality of the app. Important On the ctrlX CORE, when enforcing licenses the use of the license management is mandatory. Individual implementations are not permitted. 3.3.2 License Manager API \u00b6 The licensing API is available on GitHub: https://boschrexroth.github.io/rest-api-description Implementing this API, an app is able to - Acquire a license - Release a license - Get a list of all available license capabilities - Update the license status in a ctrlX CORE Function HTTP Method URI Payload Response Aquire license POST /license { \"name\": \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\", \"version\": \"1.0\" } 200 { \"isPermanent\": true, \"endDate\": \"2030-01-01T12:00:27. 7+00:20\", \"name\": \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\", \"id\": 0083d875-30e8-4ff6-9f92-46096ef2d123\", \"version\": \"1.0\", \"startDate\":\"2030-01-01T12:00:27.87+00:20\" } Release license DELETE /license/{id} none 204 Get list of all activated capabilities GET /capabilities none 200, [ { \"isPermanent\": true, \"finalExpirationDate\": \"2030-01-01T12:00:27.87+00:20\", \"name\": \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\", \"count\": 1, \"version\": \"1.0\", \"startDate\": \"2030-01-01T12:00:27.87+00:20\" } ] ] Update the capability state in the device PUT /capabilities file string($binary) 3.3.3 Acquiring & releasing a license \u00b6 Acquiring a license generates a unique license ID for that particular license. This ID is required to release the license. Therefore, this ID should be stored in a directory which is not affected when your application goes into a faulty state and needs to be restarted. The usage of /tmp is recommended for this. Hint Know more about mounting temporary disk in memory system type:tmpfs from snap documentation. 3.3.4 Available licenses on the device (activated capabilities) \u00b6 Upon request, an app may retrieve the list of available licenses on the device including all details (e.g. expiration, counter, ...). This may be used to check whether a specific license is available (and not in use) before trying to acquire it. Nevertheless, this is optional - it is sufficient to just try to acquire a license and then check whether the acquisition request was successful. Sample response: 3.3.5 Update license status \u00b6 The API allows to upload a capability response from the license portal to update the license status on the device (e.g. add new licenses). This functionality is not required by an app itself. 4 Licensing Modes \u00b6 4.1 Overview \u00b6 The license management on the ctrlX CORE supports several different licensing modes. THe following table gives an overview about the license modes. License Mode Target Key Usage Additional information Main License ctrlX CORE SWL_XCR_{YOUR_APP_LICENSE_CODE} mandatory (none specific) Temporary Usage Rights (Emergency Mode) ctrlX CORE SWL_XCR_{YOUR_APP_LICENSE_CODE} mandatory tampered flag is true 10 Day Trial License ctrlX CORE SWL_XCR_{YOUR_APP_LICENSE_CODE} optional isPermanent flag is false Four Hour Engineering Demo License ctrlX CORE virtual SWL_XCR_ENGINEERING_4H optional (none specific) As displayed in the table, there is only the \"four hour engineering demo license\" available on the ctrlX CORE virtual , which allows to evaluate a new app for a limited time (the trlX CORE virtual is terminated after four hours to prevent productive use) The different license modes, and the expected behaviour of the App for these modes, are briefly described below. 4.2 ctrlX CORE Main License \u00b6 Purpose: Standard License Description: - This is the standard license that a user obtains when buying an app. Therefore, the support of this license mode is mandatory . - The license is obtained (bought) in the Bosch Rexroth Licensing Center and then assigned to a specific device by the user. - The standard license can be either permanent (unlimited) or time based (expires) Expected App Behaviour : - The app shall start and run as intended, when the standard license is available. - If acquiring a license is not possible (no license is available), the app shall inform the user that a license needs to be obtained. - In case of time based licenses, the app should inform the user on time before the license expires. As a best practice, a user should be informed four weeks prior to expiration. - When no standard app specific license is available on the device, an app shall only run if one of the other licenses is active. 4.3 ctrlX CORE Temporary Usage Rights (Emergency Mode) \u00b6 Purpose: Avoid machine downtime Description: - On a ctrlX CORE, the user has the possibility to activate a special mode that is called \"Temporary usage rights\". The mode can be activated using the License Manager UI. - Enabling this mode allows users to operate the ctrlX CORE in a productive environment for ten consecutive days. The single purpose of this mode is to prevent a downtime when a defect device is replaced and no licenses have been assigned, yet. This mode can only be activated once on a device - Within these ten days, the user has to either add licenses to the new device or move the licenses from the broken device to the replacement device. Warning After ten days, the mode will expire and cannot be reactivated. Expected App Behaviour: Support of this license is mandatory . The app is able to detect whether the system runs in this mode by evaluating the tampered flag in the response to the acquisition request (the flag is set to true ) When this mode is active, the app should work as if a standard license is available. 4.4 ctrX CORE 10 Day Trial License \u00b6 Purpose: Test Mode on ctrlX CORE Hardware Description: - The 10 day trial license allows to use all apps - which support this license mode - for a restricted time for testing purposes. - The license is intended for test and evaluation only and not for use in a production environment - The license will automatically expire after 10 days. - Other than the temporary usage rights mode, 10 day trial licenses may be used (consecutively) in case an according contractual agreement is available for all involved parties (Bosch Rexroth, Customer, ctrlX World Partner). Expected App Behaviour: - Support of this mode is optional . - The app is able to detect whether the system runs in this mode by evaluating the isPermanent flag in the response to the acquisition request (the flag is set to false ) - When this mode is active, the app should work as if a standard license is available. 4.5 Four Hour Engineering Demo License on ctrlX CORE virtual \u00b6 Purpose : Evaluation mode on a ctrlX CORE virtual Description : - An according special license key ( SWL_XCR_ENGINEERING_4H ) indicates that currently the limited evaluation mode is active - After 4 hours the virtual device shuts down itself to prevent a productive use. Expected App Behaviour: - Support of this mode is optional . - In order to support this non-productive mode, apps must check for the license SWL_XCR_ENGINEERING_4H , which guarantees that the runtime is limited to 4 hours. 4.6 Additional License Mode: ctrX CORE 3 Month Test License \u00b6 Purpose: Time limited test and evaluation of apps which are in beta/prototype phase (B-Sample phase) Description: - This mode is not intended / available for partner apps by default. - Please get in touch with Bosch Rexroth directly, if this mode might be of interest for you. Copyright Copyright (c) 2022 Bosch Rexroth AG","title":"License Management"},{"location":"licensing.html#table-of-contents","text":"1 Introduction 2 License Enforcement 2.1 Add Content Plug to snapcraft.yaml 2.2 Adapt package-manifest.json 2.3 Use REST API to Enforce Licenses 3 Licensing Modes 3.1 Overview 3.2 ctrlX CORE Main License 3.3 ctrlX CORE Temporary Usage Rights (Emergency Mode) 3.4 ctrX CORE 10 Day Trial License 3.5 Four Hour Engineering Demo License on ctrlX CORE virtual 3.6 Additional License Mode: ctrX CORE 3 Month Test License","title":"Table of Contents"},{"location":"licensing.html#2-introduction","text":"From a user's perspective, device licenses are managed by the Bosch Rexroth Licensing Center https://licensing.boschrexroth.com . Using the portal it is possible to assign licenses to a device and to download a capability response, which contains all assigned licenses for a specific device. The downloaded capability response can than be deployed to the corresponding device. The ctrlX CORE User Interfaces therefore provides a page which allows to upload a capability response and to check the currently available licenses on the device. For developers, the ctrlX CORE offers a restful API via an internal unix domain socket which can be used by an app to request and release a specific license.","title":"2 Introduction "},{"location":"licensing.html#3-license-enforcement","text":"To integrate an app into the license management, please follow the instructions below.","title":"3 License Enforcement "},{"location":"licensing.html#31-add-content-plug-to-snapcraftyaml","text":"To get access to the unix domain socket that provides the restful API, add the following content plug definition to the snapcraft.yaml: plugs : licensing-service : interface : content content : licensing-service target : $SNAP_DATA/licensing-service This will create a folder \"license-service\" during installation of the app on the ctrlX CORE and provide access to the unix domain socket \"licensing-service.sock\" which will be located in the folder.","title":"3.1 Add Content Plug to snapcraft.yaml ()"},{"location":"licensing.html#32-adapt-package-manifestjson","text":"The app shall provide information in the package-manifest about each license that is supported. Description and title shall be human readable. The \"required\" flag indicates whether a license is mandatory to use the application. Set the flag to true when the license is required and to false, when the license is optional. \"licenses\" : [ { \"name\" : \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\" , \"title\" : \"ctrlX CORE - Foobar License\" , \"description\" : \"Unlock the App's functionality.\" , \"required\" : true }, { \"name\" : \"SWL-XCx-FRW-ADVANCED_FOOBAR\" , \"title\" : \"ctrlX CORE - Foobar License Extension\" , \"description\" : \"This license extends the functionality of the App.\" , \"required\" : false } ],","title":"3.2 Adapt package-manifest.json ()"},{"location":"licensing.html#33-use-rest-api-to-enforce-licenses","text":"","title":"3.3 Use REST API to enforce licenses "},{"location":"licensing.html#331-license-integration","text":"How an app reacts when no license is present or the license is removed during runtime, can be freely chosen by the app. Nevertheless, to provide a unique user experience across multiple apps, the following best practices are recommended. The app should acquire the license when started or (each time) when a function is called which requires a license. Additionally, the app should check whether the license is still present on the device in regular intervals or if the license has been removed or expired. Therefore, either release and re-acquire the license or use the getCapabilities() function. This applies for both, mandatory and optional, types of licenses. In case a license is not required anymore - e.g. when the app is stopped or uninstalled - the license should be released so that it is returned to the license pool and can be acquired by another app. Otherwise, the license will become available again only after a reboot of the device. In case a license is missing, a warning or an error shall be displayed and/or logged and the user should be informed which licences are required to execute the specific functionality of the app. Important On the ctrlX CORE, when enforcing licenses the use of the license management is mandatory. Individual implementations are not permitted.","title":"3.3.1 License Integration"},{"location":"licensing.html#332-license-manager-api","text":"The licensing API is available on GitHub: https://boschrexroth.github.io/rest-api-description Implementing this API, an app is able to - Acquire a license - Release a license - Get a list of all available license capabilities - Update the license status in a ctrlX CORE Function HTTP Method URI Payload Response Aquire license POST /license { \"name\": \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\", \"version\": \"1.0\" } 200 { \"isPermanent\": true, \"endDate\": \"2030-01-01T12:00:27. 7+00:20\", \"name\": \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\", \"id\": 0083d875-30e8-4ff6-9f92-46096ef2d123\", \"version\": \"1.0\", \"startDate\":\"2030-01-01T12:00:27.87+00:20\" } Release license DELETE /license/{id} none 204 Get list of all activated capabilities GET /capabilities none 200, [ { \"isPermanent\": true, \"finalExpirationDate\": \"2030-01-01T12:00:27.87+00:20\", \"name\": \"SWL-XCx-FRW-BASIC_FOOBAR-NNNN\", \"count\": 1, \"version\": \"1.0\", \"startDate\": \"2030-01-01T12:00:27.87+00:20\" } ] ] Update the capability state in the device PUT /capabilities file string($binary)","title":"3.3.2 License Manager API"},{"location":"licensing.html#333-acquiring-releasing-a-license","text":"Acquiring a license generates a unique license ID for that particular license. This ID is required to release the license. Therefore, this ID should be stored in a directory which is not affected when your application goes into a faulty state and needs to be restarted. The usage of /tmp is recommended for this. Hint Know more about mounting temporary disk in memory system type:tmpfs from snap documentation.","title":"3.3.3 Acquiring &amp; releasing a license"},{"location":"licensing.html#334-available-licenses-on-the-device-activated-capabilities","text":"Upon request, an app may retrieve the list of available licenses on the device including all details (e.g. expiration, counter, ...). This may be used to check whether a specific license is available (and not in use) before trying to acquire it. Nevertheless, this is optional - it is sufficient to just try to acquire a license and then check whether the acquisition request was successful. Sample response:","title":"3.3.4 Available licenses on the device (activated capabilities)"},{"location":"licensing.html#335-update-license-status","text":"The API allows to upload a capability response from the license portal to update the license status on the device (e.g. add new licenses). This functionality is not required by an app itself.","title":"3.3.5 Update license status"},{"location":"licensing.html#4-licensing-modes","text":"","title":"4 Licensing Modes  "},{"location":"licensing.html#41-overview","text":"The license management on the ctrlX CORE supports several different licensing modes. THe following table gives an overview about the license modes. License Mode Target Key Usage Additional information Main License ctrlX CORE SWL_XCR_{YOUR_APP_LICENSE_CODE} mandatory (none specific) Temporary Usage Rights (Emergency Mode) ctrlX CORE SWL_XCR_{YOUR_APP_LICENSE_CODE} mandatory tampered flag is true 10 Day Trial License ctrlX CORE SWL_XCR_{YOUR_APP_LICENSE_CODE} optional isPermanent flag is false Four Hour Engineering Demo License ctrlX CORE virtual SWL_XCR_ENGINEERING_4H optional (none specific) As displayed in the table, there is only the \"four hour engineering demo license\" available on the ctrlX CORE virtual , which allows to evaluate a new app for a limited time (the trlX CORE virtual is terminated after four hours to prevent productive use) The different license modes, and the expected behaviour of the App for these modes, are briefly described below.","title":"4.1 Overview "},{"location":"licensing.html#42-ctrlx-core-main-license","text":"Purpose: Standard License Description: - This is the standard license that a user obtains when buying an app. Therefore, the support of this license mode is mandatory . - The license is obtained (bought) in the Bosch Rexroth Licensing Center and then assigned to a specific device by the user. - The standard license can be either permanent (unlimited) or time based (expires) Expected App Behaviour : - The app shall start and run as intended, when the standard license is available. - If acquiring a license is not possible (no license is available), the app shall inform the user that a license needs to be obtained. - In case of time based licenses, the app should inform the user on time before the license expires. As a best practice, a user should be informed four weeks prior to expiration. - When no standard app specific license is available on the device, an app shall only run if one of the other licenses is active.","title":"4.2 ctrlX CORE Main License  "},{"location":"licensing.html#43-ctrlx-core-temporary-usage-rights-emergency-mode","text":"Purpose: Avoid machine downtime Description: - On a ctrlX CORE, the user has the possibility to activate a special mode that is called \"Temporary usage rights\". The mode can be activated using the License Manager UI. - Enabling this mode allows users to operate the ctrlX CORE in a productive environment for ten consecutive days. The single purpose of this mode is to prevent a downtime when a defect device is replaced and no licenses have been assigned, yet. This mode can only be activated once on a device - Within these ten days, the user has to either add licenses to the new device or move the licenses from the broken device to the replacement device. Warning After ten days, the mode will expire and cannot be reactivated. Expected App Behaviour: Support of this license is mandatory . The app is able to detect whether the system runs in this mode by evaluating the tampered flag in the response to the acquisition request (the flag is set to true ) When this mode is active, the app should work as if a standard license is available.","title":"4.3 ctrlX CORE Temporary Usage Rights (Emergency Mode)  "},{"location":"licensing.html#44-ctrx-core-10-day-trial-license","text":"Purpose: Test Mode on ctrlX CORE Hardware Description: - The 10 day trial license allows to use all apps - which support this license mode - for a restricted time for testing purposes. - The license is intended for test and evaluation only and not for use in a production environment - The license will automatically expire after 10 days. - Other than the temporary usage rights mode, 10 day trial licenses may be used (consecutively) in case an according contractual agreement is available for all involved parties (Bosch Rexroth, Customer, ctrlX World Partner). Expected App Behaviour: - Support of this mode is optional . - The app is able to detect whether the system runs in this mode by evaluating the isPermanent flag in the response to the acquisition request (the flag is set to false ) - When this mode is active, the app should work as if a standard license is available.","title":"4.4 ctrX CORE 10 Day Trial License  "},{"location":"licensing.html#45-four-hour-engineering-demo-license-on-ctrlx-corevirtual","text":"Purpose : Evaluation mode on a ctrlX CORE virtual Description : - An according special license key ( SWL_XCR_ENGINEERING_4H ) indicates that currently the limited evaluation mode is active - After 4 hours the virtual device shuts down itself to prevent a productive use. Expected App Behaviour: - Support of this mode is optional . - In order to support this non-productive mode, apps must check for the license SWL_XCR_ENGINEERING_4H , which guarantees that the runtime is limited to 4 hours.","title":"4.5 Four Hour Engineering Demo License on  ctrlX COREvirtual "},{"location":"licensing.html#46-additional-license-mode-ctrx-core-3-month-test-license","text":"Purpose: Time limited test and evaluation of apps which are in beta/prototype phase (B-Sample phase) Description: - This mode is not intended / available for partner apps by default. - Please get in touch with Bosch Rexroth directly, if this mode might be of interest for you. Copyright Copyright (c) 2022 Bosch Rexroth AG","title":"4.6 Additional License Mode: ctrX CORE 3 Month Test License  "},{"location":"log.html","text":"Logging \u00b6 Introduction \u00b6 During development, test phase and at runtime it is very useful - and in case of problems essential - that an application publishes messages. These messages can be informations, diagnostics or errors according the event which triggered the message. These messages should be displayed and stored uniform. We recommend to use the build-in Linux systemd logging service called journald. The Using of Linux Kernel Log Levels \u00b6 The interface to journald depends from the programming language. But for all these predefined Linux log levels (values) are common: EMERGENCY The system is unusable (and will be shut down) ALERT There is a severe error, action must be taken immediately CRITICAL There is a critical error ERROR A job was aborted in case of an error WARNING There is an abnormal condition but the actual job can be finished NOTICE There is a normal but significant condition INFO A messages informs about an internal state DEBUG Message shows details regarding program flow or results Be carefull with level EMERGENCY: Messages with this level are sent to all consoles! Logging Samples in the SDK \u00b6 In these folders of ctrlX SDK logging samples for different programming languages are provided: samples-cpp/diagnostics.logbook samples-net/diagnostics.logbook samples-python/python.logbook Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Community License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Logging"},{"location":"log.html#logging","text":"","title":"Logging"},{"location":"log.html#introduction","text":"During development, test phase and at runtime it is very useful - and in case of problems essential - that an application publishes messages. These messages can be informations, diagnostics or errors according the event which triggered the message. These messages should be displayed and stored uniform. We recommend to use the build-in Linux systemd logging service called journald.","title":"Introduction"},{"location":"log.html#the-using-of-linux-kernel-log-levels","text":"The interface to journald depends from the programming language. But for all these predefined Linux log levels (values) are common: EMERGENCY The system is unusable (and will be shut down) ALERT There is a severe error, action must be taken immediately CRITICAL There is a critical error ERROR A job was aborted in case of an error WARNING There is an abnormal condition but the actual job can be finished NOTICE There is a normal but significant condition INFO A messages informs about an internal state DEBUG Message shows details regarding program flow or results Be carefull with level EMERGENCY: Messages with this level are sent to all consoles!","title":"The Using of Linux Kernel Log Levels"},{"location":"log.html#logging-samples-in-the-sdk","text":"In these folders of ctrlX SDK logging samples for different programming languages are provided: samples-cpp/diagnostics.logbook samples-net/diagnostics.logbook samples-python/python.logbook","title":"Logging Samples in the SDK"},{"location":"log.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Community","title":"Support"},{"location":"log.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"numopenfilehandles.html","text":"How to Configure the maximal Number of Open File Handles \u00b6 Indroduction \u00b6 The maximum number of open file/socket handles is by default limited to 1024. This is not enough for some apps (e.g. connectivity apps or databases). The actual settings can be shown with: ulimit -a Maximum file handles: cat /proc/sys/fs/file-max Allocated, allocated but unused, maximum number of file handles: cat /proc/sys/fs/file-nr Solution \u00b6 For a lot of apps the number of 1024 maximal opened file handles is sufficient. If a larger number of opened file handles is required this can be done with the command ulimit , for example: ulimit -n 16384 Your app should run this command in the startup phase of your app. Therefor we recommend to: Create a script in a sub folder e.g. ulimit-snap/ of your project. And to add into your snapcraft.yaml file a daemon entry to call this script at startup. Script to call ulimit: #!/bin/sh ulimit -n 16384 Additional daemon in your snapcraft.yaml file: parts: ulimit-script: plugin: dump source: ./ulimit-snap apps: ulimit: daemon: simple command: increase-ulimit.sh Complete Example Snap \u00b6 In this SDK an complete example project creating a demo snap is stored under samples-sh/ulimit-snap. The sample project folder also contains a README.md file with further informations.","title":"Configure maximal Number of Open File Handles"},{"location":"numopenfilehandles.html#how-to-configure-the-maximal-number-of-open-file-handles","text":"","title":"How to Configure the maximal Number of Open File Handles"},{"location":"numopenfilehandles.html#indroduction","text":"The maximum number of open file/socket handles is by default limited to 1024. This is not enough for some apps (e.g. connectivity apps or databases). The actual settings can be shown with: ulimit -a Maximum file handles: cat /proc/sys/fs/file-max Allocated, allocated but unused, maximum number of file handles: cat /proc/sys/fs/file-nr","title":"Indroduction"},{"location":"numopenfilehandles.html#solution","text":"For a lot of apps the number of 1024 maximal opened file handles is sufficient. If a larger number of opened file handles is required this can be done with the command ulimit , for example: ulimit -n 16384 Your app should run this command in the startup phase of your app. Therefor we recommend to: Create a script in a sub folder e.g. ulimit-snap/ of your project. And to add into your snapcraft.yaml file a daemon entry to call this script at startup. Script to call ulimit: #!/bin/sh ulimit -n 16384 Additional daemon in your snapcraft.yaml file: parts: ulimit-script: plugin: dump source: ./ulimit-snap apps: ulimit: daemon: simple command: increase-ulimit.sh","title":"Solution"},{"location":"numopenfilehandles.html#complete-example-snap","text":"In this SDK an complete example project creating a demo snap is stored under samples-sh/ulimit-snap. The sample project folder also contains a README.md file with further informations.","title":"Complete Example Snap"},{"location":"overview.html","text":"The ctrlX AUTOMATION SDK is the Software Development Kit of ctrlX AUTOMATION . With this SDK software applications (apps) can be developed for the Linux based ctrlX AUTOMATION CORE devices in various high level languages. A short introduction into ctrlX AUTOMATION you can find here: ctrlX AUTOMATION . Quick Step Guide Building a Snap from a SDK Sample Project \u00b6 Creating a snap (app) from a SDK sample project in a few steps is described here: Quick Start Guide Important Topics \u00b6 Use the following sections of this documentation to learn more about the contents of the ctrlX AUTOMATION SDK. Setup App Build Environment \u00b6 How to setup a Linux Ubuntu app build environment using a virtual or a bare-metal machine is described here: Setup Overview Samples \u00b6 Samples : A description of the included examples in the SDK and how to use them. References \u00b6 References : An overview of useful links and some references Changes \u00b6 Changelog : Changes since last release Additional Information \u00b6 Here you can find additional documentation, help and support which goes beyond the scope of this SDK: Online Product Information ctrlX AUTOMATION Community","title":"Overview"},{"location":"overview.html#quick-step-guide-building-a-snap-from-a-sdk-sample-project","text":"Creating a snap (app) from a SDK sample project in a few steps is described here: Quick Start Guide","title":"Quick Step Guide Building a Snap from a SDK Sample Project"},{"location":"overview.html#important-topics","text":"Use the following sections of this documentation to learn more about the contents of the ctrlX AUTOMATION SDK.","title":"Important Topics"},{"location":"overview.html#setup-app-build-environment","text":"How to setup a Linux Ubuntu app build environment using a virtual or a bare-metal machine is described here: Setup Overview","title":"Setup App Build Environment"},{"location":"overview.html#samples","text":"Samples : A description of the included examples in the SDK and how to use them.","title":"Samples"},{"location":"overview.html#references","text":"References : An overview of useful links and some references","title":"References"},{"location":"overview.html#changes","text":"Changelog : Changes since last release","title":"Changes"},{"location":"overview.html#additional-information","text":"Here you can find additional documentation, help and support which goes beyond the scope of this SDK: Online Product Information ctrlX AUTOMATION Community","title":"Additional Information"},{"location":"package-assets.html","text":"Basics \u00b6 Beside the metadata published using the snapcraft.yaml the package-assets interface provides a way to provide additional information of your app to the ctrlX CORE system. Currently the following information can be provided by the package-assets folder: A package manifest containing a declarative description of the app, including permissions, menus and reverse proxy configurations Translation files for different parts of the app Open Source Software (OSS) information of used Software in the app Details for each topic can be found below. Providing the Package Assets \u00b6 The third-party app has to provide the manifest file to the ctrlX CORE system. Thus, a data exchange has to be set up between the app and the Device Admin app. To exchange information, the content interface with the name \"package-assets\" is used. This content interface works opposite to the \"normal\" content interface. In this case, the plug provides data by mounting a directory into the space provided by the slot. Canonical calls this principle \"spool mode\". The following example shows the procedure step-by-step. Create the folder \"configs/package-assets\u201d in the root of your snap project. Update your snapcraft.yaml Add a new part which copies the content of the \"configs\" directory to your $SNAP folder using the dump plugin. Add the slot \"package-assets\" to your slot configuration Add the relevant files to \"configs/package-assets\" folder, for detailed information on each file see below. Example snapcraft.yaml name : rexroth-myapp [ ... ] parts : [ ... ] configs : plugin : dump source : ./configs [ ... ] slots : [ ... ] package-assets : interface : content content : package-assets source : read : - $SNAP/package-assets/${SNAPCRAFT_PROJECT_NAME} [ ... ] The package manifest \u00b6 An app can provide own menu entries, use the reverse proxy infrastructure including permissions and the storage solution. This document describes the different integration points and how they work. The package-manifest is essential for the integration points. Beside the snapcraft.yaml, it is strongly recommended that the app has to provide the package manifest to be integrated into the ctrlX CORE system. Menus \u00b6 An app can be integrated into the ctrlX CORE navigation by defining menu entries. There are three possible integration points: Sidebar: To allow the navigation to the main functionality of your apps Settings: To allow the navigation to your app settings Home Overview: To provide a customized tile for your application Declare menu items in the package-manifest \u00b6 Add a \"menus\" element to the package manifest of your snap. The \"menus\" element is defined as an object that comprises three elements: sidebar: An array of items to be integrated into the main menu settings: An array of items to be integrated into the settings menu system: An array of items to be integrated into the system menu overview: An array of items to be integrated into the app overview An item is defined as an object with the following elements: id: A string used as unique item identifier to order items (required) title: A string used as display title of the item (required) description: A string providing an additional description (optional and only used by overview items) icon: A string representing the icon name of the item (optional) link: A string representing the target address of this item, including the application base href (required if no \"items\" are provided) target: A string that specifies where the link is shown. Use \"_blank\" or a specific name to open the link in a new tab (recommended for 3rd-party apps) items: An array of sub-items of this item (required if no link is provided. It is currently only supported for main menu items and restricted to one sub-level) permissions: An array of scope identifiers representing the permissions required to enable the item (optional) Example [ ... ] \"menus\" : { \"sidebar\" : [ { \"id\" : \"solutions\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ], \"items\" : [ { \"id\" : \"solutions-activeconfiguration\" , \"title\" : \"Active Configuration\" , \"link\" : \"/solutions/activeconfiguration\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] }, { \"id\" : \"solutions-overview\" , \"title\" : \"Solutions Overview\" , \"link\" : \"/solutions/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } ], \"settings\" : [ { \"id\" : \"solutions-settings\" , \"title\" : \"Solution Settings\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/solutions/settings\" , \"permissions\" : [ \"solutions.rw\" ] } ], \"system\" : [ { \"id\" : \"reboot\" , \"title\" : \"Reboot\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/reboot-manager\" ] } ], \"overview\" : [ { \"id\" : \"solutions-overview\" , \"title\" : \"Solutions\" , \"description\" : \"Manage solutions on the control\" , \"icon\" : \"bosch-ic-solutions\" , \"link\" : \"/solutions/activeconfiguration\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } [ ... ] If the third-party app uses a specified port and not our reverse proxy infrastructure, use the template variable \"${hostname}\" to allow the ctrlX CORE to replace it dynamically. E.g.: Example [ ... ] { \"id\" : \"node-red\" , \"title\" : \"Node-RED\" , \"link\" : \"http://${hostname}:1880/\" , } [ ... ] If you want to open your application in your own tab, you can define the target tab. After this integration, a third-party app opens in a separate tab in the browser. If your application can integrate and validate the ctrlX CORE token. You can \"transfer\" the token using a query field. This is done with the template variable \"${bearertoken}\". Example ... \"menus\" : { \"sidebar\" : [ { \"id\" : \"app-name\" , \"title\" : \"My App Name\" , \"icon\" : \"myApp-Icon\" , \"permissions\" : [], \"items\" : [ { \"id\" : \"myApp-Id\" , \"title\" : \"MySideBarTitle\" , \"link\" : \"/app-name?access_token=${bearertoken}\" , \"target\" : \"myApp-Id\" , \"permissions\" : [] }, ... ] }] [ ... ] Reverse Proxy \u00b6 The reverse proxy handles all external web-based (HTTP/HTTPS) requests to the device. The reverse proxy provides the following functionality: Automatic HTTPS: By default, all data exchanged between client and server is encrypted. Token validation: By default, only authenticated users may access resources on the device (except the login page). Requests with invalid tokens (lifetime expired, invalid signature) are rejected. The proxy mapping provides the configuration required by the reverse proxy to redirect requests for a specific URL to a web server running on the device. Proxy Mapping Example { [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"rexroth-solutions.web\" , \"url\" : \"/rexroth-solutions\" , \"binding\" : \":5000\" , \"restricted\" : [ \"/rexroth-solutions/api/v1.0\" ] } ] } [ ... ] } Providing a proxy configuration is optional in some cases (e.g. if your snap does not provide a web service). If a proxy configuration is provided, the following parameters are valid: name (mandatory): Name of the web service. The format is: <id>.<service> The name has to be unique. Examples: rexroth-solutions.web rexroth-hmi.web ... url (mandatory): URL provided by the reverse proxy. When a client tries to access this URL, the reverse proxy transparently redirects the request to the web server. Thus, your web server has to be configured to listen to e.g. \"/cool-app\" and not \"/\". Must not conflict with other web service URLs. Examples: /solutions /hmi ... binding (mandatory): Resource identifier to which the reverse proxy redirects the requests. The resource can either be a port or a Unix socket. Using a Unix socket is highly recommended. Examples: :5000 192.168.1.17:5000 \"unix://{$SNAP_DATA}/package-run/rexroth-solutions/rexroth-solutions.web.sock\" restricted: Restricted URL. Only authenticated clients can access the URLs defined here. One important example is the API URL(s) - those URLs should be restricted in most use cases. Examples: \"/rexroth-solutions/api/v1.0\" Info Remark: If a snap provides multiple web servers, multiple ProxyMapping entries are allowed. Binding \u00b6 Unix sockets (recommended) To use Unix sockets, the web server of your application has to bind against a Unix Domain Socket . Most web server frameworks already support this functionality. The benefit of Unix sockets is the additional security (file access can be restricted via file permissions) and the lower attack surface on network level (the service cannot be reached externally). To enable your snap and to provide the reverse proxy access to your Unix socket, use the content interface slot \"package-run\". It uses the same mechanism as the \"package-assets\" interface. Example [ ... ] package-run : interface : content content : package-run source : write : - $SNAP_DATA/package-run/${SNAPCRAFT_PROJECT_NAME} In the example mentioned above, your \"unix socket file\" should be created under {$SNAP_DATA}/package-run/{$SNAP_NAME}/web.sock . The file has to be managed completely by your application logic and - in contrast to a network socket, has to be deleted after unbinding. Also consider deleting the Unix domain socket before binding your web server before start-up. Now, publish the information on the socket file using the package-manifest via the ProxyMapping described above. The relevant part is the \"binding\" section below. Replace Warning The path length of a Unix socket is limited to 108 characters. Thus, ensure that the resolved path, e.g /var/snap/third-party-snap/current/ package-run/third-party-snap/third-party-snap.web.sock does not exceed that limit and that the highlighted part does not exceed 50 characters. If required, shorten the path by replacing \"package-run\" with \"run\" and change the file name from \"third-party-snap.web.sock\" to \"web.sock\". Example: Example [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"third-party-snap.web\" , \"url\" : \"/cool-app\" , \"binding\" : \"unix://{$SNAP_DATA}/package-run/third-party-snap/web.sock\" } ] }, [ ... ] Local host (not recommended) Only bind to a local host if a Unix domain socket (see above) cannot be used. Your app has to bind to a specified port that is not used by other apps. Example [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"third-party-snap.web\" , \"url\" : \"/cool-app\" , \"binding\" : \":4711\" , } ] }, [ ... ] Scopes and Permissions \u00b6 If access is restricted to specific resources, define scopes. When using the Identity Management, an administrator can configure the users and groups allowed to access specific resources. The following example shows two simple scopes (read/write, all settings, read-only settings). In every routine, the web server has to check whether the provided token includes the scope. Example { \"id\" : \"rexroth-solutions\" , [ ... ] \"scopes-declaration\" : [ { \"identifier\" : \"rexroth-solutions.web\" , \"name\" : \"Solutions Web Server permissions\" , \"description\" : \"Solution Management Permissions\" , \"scopes\" : [ { \"identifier\" : \"rexroth-solutions.web.solutions.rw\" , \"name\" : \"Solutions Management\" , \"description\" : \"Manage and modify solutions\" }, { \"identifier\" : \"rexroth-solutions.web.solutions.r\" , \"name\" : \"View solutions\" , \"description\" : \"View (but not modify) solutions\" } ] } ], Remark: Restrictions apply on the scope namings, identifiers, etc. (see below) Use the following schema for the main identifier of the scope: <id>.<service> id: Package identifier. Has to correspond to the snap name Example: rexroth-solutions, rexroth-vpnmanager, ... service: Service identifier Example: web Some examples: rexroth-solutions.web rexroth-vpnmanager.web Use this schema for the identifier of the scope: <id>.<service>.<scope_name>.<access> id : Package identifier. Has to correspond to the snap name Example: rexroth-solutions, rexroth-vpnmanager, ... service: Service identifier Example: web scope_name: Name of the specific scope Example: solutions, connections, configurations, users, ... access: Type of access to the resource represented by this scope. Supported are: r (read-only): Allows read-only access to specific resources w (write-only): Allows write-only access to specific resources rw (read/write): Allows read-only and write access to specific resources x (execute): Executes a specific action represented by a resource Some examples: rexroth-vpnmanager.web.shortcuts.r: Read-only access to VPN shortcuts rexroth-vpnmanager.web.shortcuts.rw: Read and create VPN connection shortcuts rexroth-deviceadmin.web.own_password.w: Update (but not read) the password of the user currently logged in rexroth-vpnmanager.web.shortcuts.x: Start/stop VPN connections via existing starters (shortcuts) Enforcing permissions in your service \u00b6 The web server has to enforce the defined permissions. The following pseudo code snippet shows a simple example in which the function ListAddresses checks whether the client has the permission to execute the function. The scope \"rexroth-device.all.rwx\" is a special scope reflecting an administrative access permission (see below). Example func ListAddresses ( w http . ResponseWriter , r * http . Request ) { // Define valid scopes for resource access scope := [] string { \"networkmanager.all.r\" , \"networkmanager.all.rw\" , \"rexroth-device.all.rwx\" } // Extract scopes from http request and compare them to valid scopes // Return if not authorized if ok , _ := checkPermissions ( r , scope ); ! ok { errors . ErrUnauthorized . Write ( w ) return } Admin Scope \u00b6 By default, the Identity Management provides a special admin scope (\"rexroth-device.all.rwx\u201d) that should only be assigned to admin users. It is recommended to grant users full access to your web application if they are provided with this permission. This facilitates the handling of administrator accounts. The following snippet shows the definition of the admin scope. You can see (and assign) the permission to users and/or groups. Example { \"identifier\" : \"rexroth-device\" , \"name\" : \"Global device administration\" , \"description\" : \"Global device administration permissions allow unrestricted access to all system resources\" , \"scopes\" :[ { \"identifier\" : \"rexroth-device.all.rwx\" , \"name\" : \"Administration access\" , \"Description\" : \"Unrestricted, administrative access to system resources\" } ] } Certificate Management (optional) \u00b6 The certificate manager handles cryptographic material for all applications on the device. The certificate manager can add/delete/list certificates or keys to/from a specific application. It also issues a warning if a certificate expires soon or is already invalid. If a snap handles cryptographic material, it can use this centralized service following the instructions: First, the snap has to provide the content interface \"package-certificates\". Via this interface, the certificate manager can add and access certificates and keys of a specific snap. Thus, write permissions are required. Example name : rexroth-solutions [ ... ] slots : [ ... ] package-certificates : interface : content content : package-certificates source : write : - $SNAP_COMMON/package-certificates/${SNAPCRAFT_PROJECT_NAME} [ ... ] Certificate Stores \u00b6 The certificate store block defines whether a snap service has to handle cryptographic keys or certificates. A snap should have different certificate stores for different services. These stores are defined in the package-assets file (see following code snippet) Example \"certificatestores\" : [ { \"id\" : \"examplestore\" , \"title\" : \"Example Store\" , \"description\" : \"This is only an example store for documentation purposes.\" } ], id (mandatory): Use a unique ID, as it is used to identify the store via the REST interface. opcua vpnmanager ... title (mandatory): Name used in the front end. OPCUA VPN Manager ... description: Optional and displayed in the front end. To describe the application and provide some more information. The following predefined folder structure applies to every certificate store: Hint SNAPCRAFT_PROJECT_NAME has to be replaced with the real name! Example /$SNAP_COMMON/package-certificates/{SNAPCRAFT_PROJECT_NAME}/ ./application1 /ca /own /private /certs /rejected /keys /certs /trusted /keys /certs ./application2 /ca ... Hint You can store your keys using a TPM . Example package-manifest.json \u00b6 Example { \"version\" : \"1.0.0\" , \"id\" : \"rexroth-solutions\" , \"certificatestores\" : [ { \"id\" : \"examplestore\" , \"title\" : \"Example Store\" , \"description\" : \"This is only an example store for documentation purposes.\" } ], \"services\" : { \"proxyMapping\" : [ { \"name\" : \"rexroth-solutions.web\" , \"url\" : \"/rexroth-solutions\" , \"binding\" : \":5000\" , \"restricted\" : [ \"/rexroth-solutions/api/v1.0\" ] } ] }, \"scopes-declaration\" : [ { \"identifier\" : \"rexroth-solutions.web\" , \"name\" : \"Solutions Scopes\" , \"description\" : \"Scopes for the Solutions resources\" , \"scopes\" : [ { \"identifier\" : \"rexroth-solutions.web.all.rw\" , \"name\" : \"Manage Solutions\" , \"description\" : \"Manage and modify all solutions\" }, { \"identifier\" : \"rexroth-solutions.web.all.r\" , \"name\" : \"View solutions\" , \"description\" : \"View (but not modify) solutions\" } ] } ], \"menus\" : { \"sidebar\" : [ { \"id\" : \"solutions\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ], \"items\" : [ { \"id\" : \"solution-home\" , \"title\" : \"Solutions Home\" , \"link\" : \"/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] }, { \"id\" : \"solution-targets\" , \"title\" : \"Targets\" , \"link\" : \"/solutions/targets\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } ], \"settings\" : [ { \"id\" : \"solution-settings\" , \"title\" : \"Solution Settings\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/solutions/settings\" , \"permissions\" : [ \"solutions.rw\" ] } ], \"overview\" : [ { \"id\" : \"solution-overview\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"link\" : \"/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } } The language files \u00b6 Language files are used to translate text sections into different languages. Bosch Rexroth Apps are shipped with english and german language files. Currently the multi language system (MLS) supports translations for the content of the package manifest texts which are organized in the ./package-assets/i18n folder of the app. Translation of the Package Manifest \u00b6 One aspect of the MLS is the translation of the text fields provided by the package manifest, e.g. menu items, descriptions etc. To enable the app developer to provide translations for these fields a new property i18n was introduced. This property behaves as a tag for the parent object that requires translation for its childs. The value is defining the name of the tag in dot notation . Additionally you have to provide the language files for the package-manifest in the ./package-assets/i18n folder. Their name should follow the pattern <app name>.package-manifest.<language tag>.json . In case of an app \"my-app\" that provides german translations, this would be my-app.package-manifest.de.json . It is recommended to provide a language file for english and german. The structure inside the language file must reflect the tags defined including the propery you would like to translate. You can either use dot, bracket or mixed notation in the file. Arrays are not supported. Example myapp.package-manifest.json [ ... ] \"menus\" : { \"sidebar\" : [ { \"id\" : \"_myapp\" , \"title\" : \"My App\" , \"description\" : \"A cool app you should not miss\" , \"icon\" : \"Bosch-Ic-home-outline\" , \"link\" : \"/myapp/home\" , \"i18n\" : \"sidebar.myapp\" } ], }, [ ... ] i18n/myapp.package-manifest.de.json (dot notation) { \"sidebar.myapp.title\" : \"Meine App\" , \"sidebar.myapp.description\" : \"Eine k\u00fchle App die du nicht verpassen solltest\" } i18n/myapp.package-manifest.de.json (bracket notation) { \"sidebar\" : { \"myapp\" : { \"title\" : : \"Meine App\" , \"description\" : \"Eine k\u00fchle App die du nicht verpassen solltest\" } } } Basically you can translate every aspect of the package-manifest this way.","title":"Package Assets"},{"location":"package-assets.html#basics","text":"Beside the metadata published using the snapcraft.yaml the package-assets interface provides a way to provide additional information of your app to the ctrlX CORE system. Currently the following information can be provided by the package-assets folder: A package manifest containing a declarative description of the app, including permissions, menus and reverse proxy configurations Translation files for different parts of the app Open Source Software (OSS) information of used Software in the app Details for each topic can be found below.","title":"Basics"},{"location":"package-assets.html#providing-the-package-assets","text":"The third-party app has to provide the manifest file to the ctrlX CORE system. Thus, a data exchange has to be set up between the app and the Device Admin app. To exchange information, the content interface with the name \"package-assets\" is used. This content interface works opposite to the \"normal\" content interface. In this case, the plug provides data by mounting a directory into the space provided by the slot. Canonical calls this principle \"spool mode\". The following example shows the procedure step-by-step. Create the folder \"configs/package-assets\u201d in the root of your snap project. Update your snapcraft.yaml Add a new part which copies the content of the \"configs\" directory to your $SNAP folder using the dump plugin. Add the slot \"package-assets\" to your slot configuration Add the relevant files to \"configs/package-assets\" folder, for detailed information on each file see below. Example snapcraft.yaml name : rexroth-myapp [ ... ] parts : [ ... ] configs : plugin : dump source : ./configs [ ... ] slots : [ ... ] package-assets : interface : content content : package-assets source : read : - $SNAP/package-assets/${SNAPCRAFT_PROJECT_NAME} [ ... ]","title":"Providing the Package Assets"},{"location":"package-assets.html#the-package-manifest","text":"An app can provide own menu entries, use the reverse proxy infrastructure including permissions and the storage solution. This document describes the different integration points and how they work. The package-manifest is essential for the integration points. Beside the snapcraft.yaml, it is strongly recommended that the app has to provide the package manifest to be integrated into the ctrlX CORE system.","title":"The package manifest"},{"location":"package-assets.html#menus","text":"An app can be integrated into the ctrlX CORE navigation by defining menu entries. There are three possible integration points: Sidebar: To allow the navigation to the main functionality of your apps Settings: To allow the navigation to your app settings Home Overview: To provide a customized tile for your application","title":"Menus"},{"location":"package-assets.html#declare-menu-items-in-the-package-manifest","text":"Add a \"menus\" element to the package manifest of your snap. The \"menus\" element is defined as an object that comprises three elements: sidebar: An array of items to be integrated into the main menu settings: An array of items to be integrated into the settings menu system: An array of items to be integrated into the system menu overview: An array of items to be integrated into the app overview An item is defined as an object with the following elements: id: A string used as unique item identifier to order items (required) title: A string used as display title of the item (required) description: A string providing an additional description (optional and only used by overview items) icon: A string representing the icon name of the item (optional) link: A string representing the target address of this item, including the application base href (required if no \"items\" are provided) target: A string that specifies where the link is shown. Use \"_blank\" or a specific name to open the link in a new tab (recommended for 3rd-party apps) items: An array of sub-items of this item (required if no link is provided. It is currently only supported for main menu items and restricted to one sub-level) permissions: An array of scope identifiers representing the permissions required to enable the item (optional) Example [ ... ] \"menus\" : { \"sidebar\" : [ { \"id\" : \"solutions\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ], \"items\" : [ { \"id\" : \"solutions-activeconfiguration\" , \"title\" : \"Active Configuration\" , \"link\" : \"/solutions/activeconfiguration\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] }, { \"id\" : \"solutions-overview\" , \"title\" : \"Solutions Overview\" , \"link\" : \"/solutions/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } ], \"settings\" : [ { \"id\" : \"solutions-settings\" , \"title\" : \"Solution Settings\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/solutions/settings\" , \"permissions\" : [ \"solutions.rw\" ] } ], \"system\" : [ { \"id\" : \"reboot\" , \"title\" : \"Reboot\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/reboot-manager\" ] } ], \"overview\" : [ { \"id\" : \"solutions-overview\" , \"title\" : \"Solutions\" , \"description\" : \"Manage solutions on the control\" , \"icon\" : \"bosch-ic-solutions\" , \"link\" : \"/solutions/activeconfiguration\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } [ ... ] If the third-party app uses a specified port and not our reverse proxy infrastructure, use the template variable \"${hostname}\" to allow the ctrlX CORE to replace it dynamically. E.g.: Example [ ... ] { \"id\" : \"node-red\" , \"title\" : \"Node-RED\" , \"link\" : \"http://${hostname}:1880/\" , } [ ... ] If you want to open your application in your own tab, you can define the target tab. After this integration, a third-party app opens in a separate tab in the browser. If your application can integrate and validate the ctrlX CORE token. You can \"transfer\" the token using a query field. This is done with the template variable \"${bearertoken}\". Example ... \"menus\" : { \"sidebar\" : [ { \"id\" : \"app-name\" , \"title\" : \"My App Name\" , \"icon\" : \"myApp-Icon\" , \"permissions\" : [], \"items\" : [ { \"id\" : \"myApp-Id\" , \"title\" : \"MySideBarTitle\" , \"link\" : \"/app-name?access_token=${bearertoken}\" , \"target\" : \"myApp-Id\" , \"permissions\" : [] }, ... ] }] [ ... ]","title":"Declare menu items in the package-manifest"},{"location":"package-assets.html#reverse-proxy","text":"The reverse proxy handles all external web-based (HTTP/HTTPS) requests to the device. The reverse proxy provides the following functionality: Automatic HTTPS: By default, all data exchanged between client and server is encrypted. Token validation: By default, only authenticated users may access resources on the device (except the login page). Requests with invalid tokens (lifetime expired, invalid signature) are rejected. The proxy mapping provides the configuration required by the reverse proxy to redirect requests for a specific URL to a web server running on the device. Proxy Mapping Example { [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"rexroth-solutions.web\" , \"url\" : \"/rexroth-solutions\" , \"binding\" : \":5000\" , \"restricted\" : [ \"/rexroth-solutions/api/v1.0\" ] } ] } [ ... ] } Providing a proxy configuration is optional in some cases (e.g. if your snap does not provide a web service). If a proxy configuration is provided, the following parameters are valid: name (mandatory): Name of the web service. The format is: <id>.<service> The name has to be unique. Examples: rexroth-solutions.web rexroth-hmi.web ... url (mandatory): URL provided by the reverse proxy. When a client tries to access this URL, the reverse proxy transparently redirects the request to the web server. Thus, your web server has to be configured to listen to e.g. \"/cool-app\" and not \"/\". Must not conflict with other web service URLs. Examples: /solutions /hmi ... binding (mandatory): Resource identifier to which the reverse proxy redirects the requests. The resource can either be a port or a Unix socket. Using a Unix socket is highly recommended. Examples: :5000 192.168.1.17:5000 \"unix://{$SNAP_DATA}/package-run/rexroth-solutions/rexroth-solutions.web.sock\" restricted: Restricted URL. Only authenticated clients can access the URLs defined here. One important example is the API URL(s) - those URLs should be restricted in most use cases. Examples: \"/rexroth-solutions/api/v1.0\" Info Remark: If a snap provides multiple web servers, multiple ProxyMapping entries are allowed.","title":"Reverse Proxy"},{"location":"package-assets.html#binding","text":"Unix sockets (recommended) To use Unix sockets, the web server of your application has to bind against a Unix Domain Socket . Most web server frameworks already support this functionality. The benefit of Unix sockets is the additional security (file access can be restricted via file permissions) and the lower attack surface on network level (the service cannot be reached externally). To enable your snap and to provide the reverse proxy access to your Unix socket, use the content interface slot \"package-run\". It uses the same mechanism as the \"package-assets\" interface. Example [ ... ] package-run : interface : content content : package-run source : write : - $SNAP_DATA/package-run/${SNAPCRAFT_PROJECT_NAME} In the example mentioned above, your \"unix socket file\" should be created under {$SNAP_DATA}/package-run/{$SNAP_NAME}/web.sock . The file has to be managed completely by your application logic and - in contrast to a network socket, has to be deleted after unbinding. Also consider deleting the Unix domain socket before binding your web server before start-up. Now, publish the information on the socket file using the package-manifest via the ProxyMapping described above. The relevant part is the \"binding\" section below. Replace Warning The path length of a Unix socket is limited to 108 characters. Thus, ensure that the resolved path, e.g /var/snap/third-party-snap/current/ package-run/third-party-snap/third-party-snap.web.sock does not exceed that limit and that the highlighted part does not exceed 50 characters. If required, shorten the path by replacing \"package-run\" with \"run\" and change the file name from \"third-party-snap.web.sock\" to \"web.sock\". Example: Example [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"third-party-snap.web\" , \"url\" : \"/cool-app\" , \"binding\" : \"unix://{$SNAP_DATA}/package-run/third-party-snap/web.sock\" } ] }, [ ... ] Local host (not recommended) Only bind to a local host if a Unix domain socket (see above) cannot be used. Your app has to bind to a specified port that is not used by other apps. Example [ ... ] \"services\" : { \"proxyMapping\" : [ { \"name\" : \"third-party-snap.web\" , \"url\" : \"/cool-app\" , \"binding\" : \":4711\" , } ] }, [ ... ]","title":"Binding"},{"location":"package-assets.html#scopes-and-permissions","text":"If access is restricted to specific resources, define scopes. When using the Identity Management, an administrator can configure the users and groups allowed to access specific resources. The following example shows two simple scopes (read/write, all settings, read-only settings). In every routine, the web server has to check whether the provided token includes the scope. Example { \"id\" : \"rexroth-solutions\" , [ ... ] \"scopes-declaration\" : [ { \"identifier\" : \"rexroth-solutions.web\" , \"name\" : \"Solutions Web Server permissions\" , \"description\" : \"Solution Management Permissions\" , \"scopes\" : [ { \"identifier\" : \"rexroth-solutions.web.solutions.rw\" , \"name\" : \"Solutions Management\" , \"description\" : \"Manage and modify solutions\" }, { \"identifier\" : \"rexroth-solutions.web.solutions.r\" , \"name\" : \"View solutions\" , \"description\" : \"View (but not modify) solutions\" } ] } ], Remark: Restrictions apply on the scope namings, identifiers, etc. (see below) Use the following schema for the main identifier of the scope: <id>.<service> id: Package identifier. Has to correspond to the snap name Example: rexroth-solutions, rexroth-vpnmanager, ... service: Service identifier Example: web Some examples: rexroth-solutions.web rexroth-vpnmanager.web Use this schema for the identifier of the scope: <id>.<service>.<scope_name>.<access> id : Package identifier. Has to correspond to the snap name Example: rexroth-solutions, rexroth-vpnmanager, ... service: Service identifier Example: web scope_name: Name of the specific scope Example: solutions, connections, configurations, users, ... access: Type of access to the resource represented by this scope. Supported are: r (read-only): Allows read-only access to specific resources w (write-only): Allows write-only access to specific resources rw (read/write): Allows read-only and write access to specific resources x (execute): Executes a specific action represented by a resource Some examples: rexroth-vpnmanager.web.shortcuts.r: Read-only access to VPN shortcuts rexroth-vpnmanager.web.shortcuts.rw: Read and create VPN connection shortcuts rexroth-deviceadmin.web.own_password.w: Update (but not read) the password of the user currently logged in rexroth-vpnmanager.web.shortcuts.x: Start/stop VPN connections via existing starters (shortcuts)","title":"Scopes and Permissions"},{"location":"package-assets.html#enforcing-permissions-in-your-service","text":"The web server has to enforce the defined permissions. The following pseudo code snippet shows a simple example in which the function ListAddresses checks whether the client has the permission to execute the function. The scope \"rexroth-device.all.rwx\" is a special scope reflecting an administrative access permission (see below). Example func ListAddresses ( w http . ResponseWriter , r * http . Request ) { // Define valid scopes for resource access scope := [] string { \"networkmanager.all.r\" , \"networkmanager.all.rw\" , \"rexroth-device.all.rwx\" } // Extract scopes from http request and compare them to valid scopes // Return if not authorized if ok , _ := checkPermissions ( r , scope ); ! ok { errors . ErrUnauthorized . Write ( w ) return }","title":"Enforcing permissions in your service"},{"location":"package-assets.html#admin-scope","text":"By default, the Identity Management provides a special admin scope (\"rexroth-device.all.rwx\u201d) that should only be assigned to admin users. It is recommended to grant users full access to your web application if they are provided with this permission. This facilitates the handling of administrator accounts. The following snippet shows the definition of the admin scope. You can see (and assign) the permission to users and/or groups. Example { \"identifier\" : \"rexroth-device\" , \"name\" : \"Global device administration\" , \"description\" : \"Global device administration permissions allow unrestricted access to all system resources\" , \"scopes\" :[ { \"identifier\" : \"rexroth-device.all.rwx\" , \"name\" : \"Administration access\" , \"Description\" : \"Unrestricted, administrative access to system resources\" } ] }","title":"Admin Scope"},{"location":"package-assets.html#certificate-management-optional","text":"The certificate manager handles cryptographic material for all applications on the device. The certificate manager can add/delete/list certificates or keys to/from a specific application. It also issues a warning if a certificate expires soon or is already invalid. If a snap handles cryptographic material, it can use this centralized service following the instructions: First, the snap has to provide the content interface \"package-certificates\". Via this interface, the certificate manager can add and access certificates and keys of a specific snap. Thus, write permissions are required. Example name : rexroth-solutions [ ... ] slots : [ ... ] package-certificates : interface : content content : package-certificates source : write : - $SNAP_COMMON/package-certificates/${SNAPCRAFT_PROJECT_NAME} [ ... ]","title":"Certificate Management (optional)"},{"location":"package-assets.html#certificate-stores","text":"The certificate store block defines whether a snap service has to handle cryptographic keys or certificates. A snap should have different certificate stores for different services. These stores are defined in the package-assets file (see following code snippet) Example \"certificatestores\" : [ { \"id\" : \"examplestore\" , \"title\" : \"Example Store\" , \"description\" : \"This is only an example store for documentation purposes.\" } ], id (mandatory): Use a unique ID, as it is used to identify the store via the REST interface. opcua vpnmanager ... title (mandatory): Name used in the front end. OPCUA VPN Manager ... description: Optional and displayed in the front end. To describe the application and provide some more information. The following predefined folder structure applies to every certificate store: Hint SNAPCRAFT_PROJECT_NAME has to be replaced with the real name! Example /$SNAP_COMMON/package-certificates/{SNAPCRAFT_PROJECT_NAME}/ ./application1 /ca /own /private /certs /rejected /keys /certs /trusted /keys /certs ./application2 /ca ... Hint You can store your keys using a TPM .","title":"Certificate Stores"},{"location":"package-assets.html#example-package-manifestjson","text":"Example { \"version\" : \"1.0.0\" , \"id\" : \"rexroth-solutions\" , \"certificatestores\" : [ { \"id\" : \"examplestore\" , \"title\" : \"Example Store\" , \"description\" : \"This is only an example store for documentation purposes.\" } ], \"services\" : { \"proxyMapping\" : [ { \"name\" : \"rexroth-solutions.web\" , \"url\" : \"/rexroth-solutions\" , \"binding\" : \":5000\" , \"restricted\" : [ \"/rexroth-solutions/api/v1.0\" ] } ] }, \"scopes-declaration\" : [ { \"identifier\" : \"rexroth-solutions.web\" , \"name\" : \"Solutions Scopes\" , \"description\" : \"Scopes for the Solutions resources\" , \"scopes\" : [ { \"identifier\" : \"rexroth-solutions.web.all.rw\" , \"name\" : \"Manage Solutions\" , \"description\" : \"Manage and modify all solutions\" }, { \"identifier\" : \"rexroth-solutions.web.all.r\" , \"name\" : \"View solutions\" , \"description\" : \"View (but not modify) solutions\" } ] } ], \"menus\" : { \"sidebar\" : [ { \"id\" : \"solutions\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ], \"items\" : [ { \"id\" : \"solution-home\" , \"title\" : \"Solutions Home\" , \"link\" : \"/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] }, { \"id\" : \"solution-targets\" , \"title\" : \"Targets\" , \"link\" : \"/solutions/targets\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } ], \"settings\" : [ { \"id\" : \"solution-settings\" , \"title\" : \"Solution Settings\" , \"icon\" : \"bosch-ic-gear\" , \"link\" : \"/solutions/settings\" , \"permissions\" : [ \"solutions.rw\" ] } ], \"overview\" : [ { \"id\" : \"solution-overview\" , \"title\" : \"Solutions\" , \"icon\" : \"bosch-ic-solutions\" , \"link\" : \"/solutions\" , \"permissions\" : [ \"solutions.r\" , \"solutions.rw\" ] } ] } }","title":"Example package-manifest.json"},{"location":"package-assets.html#the-language-files","text":"Language files are used to translate text sections into different languages. Bosch Rexroth Apps are shipped with english and german language files. Currently the multi language system (MLS) supports translations for the content of the package manifest texts which are organized in the ./package-assets/i18n folder of the app.","title":"The language files"},{"location":"package-assets.html#translation-of-the-package-manifest","text":"One aspect of the MLS is the translation of the text fields provided by the package manifest, e.g. menu items, descriptions etc. To enable the app developer to provide translations for these fields a new property i18n was introduced. This property behaves as a tag for the parent object that requires translation for its childs. The value is defining the name of the tag in dot notation . Additionally you have to provide the language files for the package-manifest in the ./package-assets/i18n folder. Their name should follow the pattern <app name>.package-manifest.<language tag>.json . In case of an app \"my-app\" that provides german translations, this would be my-app.package-manifest.de.json . It is recommended to provide a language file for english and german. The structure inside the language file must reflect the tags defined including the propery you would like to translate. You can either use dot, bracket or mixed notation in the file. Arrays are not supported. Example myapp.package-manifest.json [ ... ] \"menus\" : { \"sidebar\" : [ { \"id\" : \"_myapp\" , \"title\" : \"My App\" , \"description\" : \"A cool app you should not miss\" , \"icon\" : \"Bosch-Ic-home-outline\" , \"link\" : \"/myapp/home\" , \"i18n\" : \"sidebar.myapp\" } ], }, [ ... ] i18n/myapp.package-manifest.de.json (dot notation) { \"sidebar.myapp.title\" : \"Meine App\" , \"sidebar.myapp.description\" : \"Eine k\u00fchle App die du nicht verpassen solltest\" } i18n/myapp.package-manifest.de.json (bracket notation) { \"sidebar\" : { \"myapp\" : { \"title\" : : \"Meine App\" , \"description\" : \"Eine k\u00fchle App die du nicht verpassen solltest\" } } } Basically you can translate every aspect of the package-manifest this way.","title":"Translation of the Package Manifest"},{"location":"persistdata.html","text":"Copyright \u00a9 Bosch Rexroth AG 2021 This document, as well as the data, specifications and other information set forth in it, are the exclusive property of Bosch Rexroth AG. It may not be reproduced or given to third parties without our consent. Liability The information in this document is intended for product description purposes only and shall not be deemed to be a guaranteed characteristic, unless expressly stipulated by contract. All rights are reserved with respect to the content of this documentation and the availability of the product. Table of content \u00b6 1 Introduction 2 Get access to the Solutions storage 3 Specify your app directories 4 Register for saving and loading 5 Implement saving and loading Appendix 1 Introduction \u00b6 This How-To shows how to integrate an App into the common ctrlX persistence and storage mechanisms. Persistence handling is done by the Solutions App (app.solutions), which is an essential part of any ctrlX CORE device. It provides a central storage for other apps that need to persist their app data. App data is saved to the storage or loaded from the storage on demand (via app editors, the \"Manage app data\" UI, or the Solutions REST API). The diagram shows that the storage provided by the Solutions app is structured into two conceptual locations: The appdata location contains the files representing the current state of the apps and is owned by the apps. The archive contains saved configurations and is managed by the Solutions app. The responsibilities of the Solutions app and Apps that persist their data in the Solutions storage are allocated as follows: Solutions (app.solutions): - Provide file storage and make appdata directory available via the activeConfiguration symlink - Trigger and coordinate \"save\" and \"load\" operations and collect results - Manage the archived configurations (Web UI, REST API) Apps: - Participate in loading and saving - Use and update the files in their appdata directories - Must not change the contents of archived configurations 2 Get access to the Solutions storage \u00b6 The Solutions app exports the base directory of the storage location as a slot using a content interface. Your app must provide a plug that connects to the slot so that the $SNAP_COMMON/solutions directory becomes visible in your file system: snapcraft.yaml: plugs : active-solution : interface : content content : solutions target : $SNAP_COMMON/solutions The $SNAP_COMMON/solution directory contains an activeConfiguration symlink. Use this symlink to get the path to the appdata directory which contains the currently active app data: $SNAP_COMMON/solutions/activeConfiguration \u2192 $SNAP_COMMON/solutions/DefaultSolution/configurations/appdata/ Note: Your app might start before the active-solution interface is connected by the system. You can handle this scenario in two ways: Use an entry-point script and check status of the active-solution interface using snapctl is-connected active-solution; e.g. create a script which has the following content and is defined in your snapcraft.yaml as the command to execute: #!/bin/bash while ! snapctl is-connected active-solution do sleep 5 done $SNAP/bin/ Check existence of the folder $SNAP_COMMON/solutions/activeConfiguration in your application logic In a development environment, you can check the connection of the active-solution interface by - calling snap connections and checking whether there is an entry with > interface content[solutions] for the plug \\<your app name>:active-solution and slot rexroth-solutions:active-solution - running a shell in the context of your app and checking the content of the folder $SNAP_COMMON/solutions which must contain a folder DefaultSolution and the two symlinks activeSolution and activeConfiguration . The shell can be started with snap run --shell \\<your app name>.\\<your app command> 3 Specify your app directories \u00b6 Within the appdata root directory, define a sub-directory with a unique name as your base directory. We recommend to use your app's name in lowercase letters to avoid conflicts with other apps and allow users to easily identify your data in the file system. The screenshot shows an example with the base directories of the Motion and PLC apps, among others. You should also explicitly declare ownership of your app directories in your package manifest. The following example shows the declaration of the PLC base directory. package-manifest.json: \"configuration\" : { \"appDirectories\" : [ { \"name\" : \"plc\" , \"description\" : \"PLC\" , \"icon\" : \"bosch-ic-components\" , \"copyOnLoad\" : true } ] } name (required): The name or path of the app directory description : The title to display in the \"Manage app data\" content view (should be consistent with title used e.g. in sidebar menu); if omitted or empty, the app directory does not appear in the content view icon : The app icon to display in the \"Manage app data\" content view (should be consistent with icon used e.g. in sidebar menu); if omitted or empty, no icon is displayed in the content view copyOnLoad : Set \u201ctrue\u201d to instruct the Solutions app to copy the data from your app directory in the archive to the active configuration on load; omit (or set \"false\") to enable custom \"smart loading\"; see section \"From copying to smart loading\" for details writeProtected : By default, app directories and their contents can be changed by users with \"Manage configurations\" permissions (e.g., via WebDAV). Set \"true\" for your root app directory to protect your app directory and its sub-directories in the active configuration against changes by users; omit (or set \"false\") for specific sub-directories to provide write-access to those directories. Since XCR-V-0112. Configuration contents should generally have the following properties: Compatible : Changes to content formats should not break existing applications (new format definitions accept old contents). Human-readable : Formats should be human-readable and therefore be text-based (which also allows comparisons between different versions). Names and values should be descriptive and understandable, e.g. by using well-known domain vocabulary. Extendable : Device and engineering functionality will enhance from version to version. You should make sure that your file formats are extendible to cope with new use cases. We recommend JSON as the file format where possible, as it supports these properties. You may also consider to provide corresponding JSON-schema files to enable guidance and validation. In any case, JSON files should contain a root object (NOT an array) to enable schema references and extendibility. Remark: Your app can specify \"private files\" inside your appdata directories in order to exclude them from save and load operations. See appendix \"App-private files\" for details. 4 Register for saving and loading \u00b6 In order to participate in the save and load operations triggered by the Solutions app, your app must register its own save and load commands. The following example shows how to register a save and a load command for Motion settings by adding the respective command declarations to the package manifest: package-manifest.json: \"commands\" : { \"activeConfiguration\" : { \"save\" : [ { \"id\" : \"motion\" , \"subject\" : \"motion settings\" , \"url\" : \"/automation/api/v1/motion/admin/cfg/save\" } ], \"load\" : [ { \"id\" : \"motion\" , \"subject\" : \"motion settings\" , \"url\" : \"/automation/api/v1/motion/admin/cfg/load\" } ], } } For each command, the following elements must be specified: id (required): a string serving as the identifier of the save or load command; must be unique within the \u201ccommands/activeConfiguration/save\u201d and \u201ccommands/activeConfiguration/load\u201d paths, respectively subject (required): a string denoting what will be saved or loaded; used to inform users, e.g. in messages like \u201cLoading motion settings \u201d or \u201cFailed to load motion settings \u201d url (required): a string representing the request URL; URLs starting with a slash are interpreted to be relative to https://\\<host> (the control itself). Declare an absolute URL if you need to specify a port, e.g. http://localhost:5555/my-app/api/v1/save . The URL is used for HTTP POST requests which include command parameters in the request body (see section \"Request parameters\" for details) By default there is no defined order of command execution. Starting with version XCR-V-0112, a command may declare that it needs to be executed after other commands. If this is required (which should be the exception), add an after element to your command declaration with an array containing the IDs of the predecessor commands. Note: Hint for developers providing Data Layer endpoints for loading and saving In order to make the Data Layer endpoints for saving and loading a configuration consistent, the respective URLs should adhere to the following pattern: \\<datalayer-basepath>/\\< technology >/admin/cfg/\\<operation> Examples: - /automation/api/v1/ scheduler /admin/cfg/save(or load) - /automation/api/v1/ fieldbuses/ethercat/master /admin/cfg/save (or load) - /automation/api/v1/ motion /admin/cfg/save (or load) 5 Implement saving and loading \u00b6 With the term \"participants\" we refer to apps that have registered save and load commands in order to participate in save and load operations as described in the previous section. Processing sequences \u00b6 Save and load operations triggered by the Solutions app are processed in phases. In each phase, the Solutions app sends requests to all registered participants sequentially in undefined order; that is, participants must not depend on each other. A save operation is processed in one phase: save : Save current app state into active configuration (appdata directory) A load operation is processed in five phases: query : Check if loading is possible in the current system state prepare : Perform any required preparatory steps load : Load archived configuration into the apps, and persist resulting app state to the active configuration (appdata directory) validate : Perform any required post-processing steps activate (if phases 1-4 have been finished without problems): Establish desired run state of the device; abort (otherwise): Do not change run state of the device If the query phase (1) has been completed without any error or problem response, the processing continues with the following phases (2-5) in the specified order. Otherwise, the load operation is canceled and the errors and problems are reported to the user. Any errors or problems that occur during phases 2-5 are collected and reported to the user when the whole operation is completed. A more detailed description of the load phases and example sequences can be found in the Appendix. Request parameters \u00b6 The following information is sent as request parameters to all participants in all save and load phases: configurationPath : the directory of the configuration to be loaded, starting from the solutions directory, e.g. \"solutions/DefaultSolution/configurations/ \"; in case of a save operation, the configuration path should be ignored, as the target of saving is always the active configuration (appdata directory) id : a random code which identifies the instance of save or load operation, e.g. \"282xy5\"; also used to find corresponding messages in the Logbook; should be included in the dynamic description of diagnostic messages and trace messages by all participants; convention: put in square brackets at the end of diagnostic messages and trace messages; see section \"Diagnostic messages\" for details phase : specifies the current processing phase of a save or load operation; one of the phases described in section \"Processing sequences\"; e.g., \"load\" The request parameters are provided in the request body as a JSON object with the following structure (using the sample values from above): { \"configurationPath\" : \"solutions/DefaultSolution/configurations/<configuration>\" , \"id\" : \"282xy5\" , \"phase\" : \"load\" } Expected behavior \u00b6 Participants must consider the following conditions and constraints in their command implementations. Success behavior \u00b6 The save or load command must respond with a success status code (2xx or 3xx, typically with 204 and an empty body). If there is no data to load, the command must reset its app to its initial state (no axes defined, no PLC program available, etc.). Related app data must completely be removed from the active configuration. If a phase is not relevant or unknown to the command, the command must respond with the status code 204 (and an empty body). Failure behavior \u00b6 The save or load command must respond with an error status code (4xx or 5xx). The response body must contain a JSON object describing the occurred problem (see \"Problem Schema Definition\" in the Appendix for the required format). The Solutions frontend reports the following fields of the problem response for every failed save or load command: mainDiagnosisCode and title detailedDiagnosisCode and detail dynamicDescription incl. the id of the save or load operation (see example below) The dynamicDescription field can provide specific information for the user, like the cause of the failure and hints how to resolve it (if cause and hint are not already provided through the main and detailed diagnosis). The field may contain \u201c\\n\u201c to separate cause and hint in the result output of the UI, e.g. \u201cFormat error in X.json.\\nAdapt file or use motion editor to fix/recreate axis. [282xy5]\u201d Common response if app requires Setup state for loading (since XCR-V-0116) If a participant gets a load request, but requires Setup state for loading, it should Respond with status code 409 (Conflict) Return a Problem object with the common mainDiagnosisCode 080F0E00 (\"Loading configuration not possible in current state\") a participant-specific detailed diagnostic which references the common main diagnostic and explains the cause of the problem and how to resolve it Not write diagnoses to the Logbook in the query phase Limitation: The described approach is only applicable to Rexroth apps. Diagnostic messages \u00b6 The Solutions app only logs a general diagnostic message on start and finish of a save and load operation. Each participant should additionally log its own activities and occurred problems into the control\u2019s Logbook. Any diagnostic message or trace message related to saving or loading should include the current id at the end of the dynamic description in square brackets. Example of diagnostic entries as they would appear in the Logbook: Level Date Unit Code Description Info 06/04/2020, 10:33:11.964 web.solutions 080A0401 Loading configuration successfully finished [282xy5] ... ... ... ... ... ... ... ... \\<main diag code> \\<detailed diag code> \\<main diag text> \\<detailed diag text> \\<dynamic description text> [282xy5] \\<entity text> Info 06/04/2020, 10:31:20.733 web.automation \\<main diag code> Trace message\\<component name> Scheduler successfully prepared for loading [282xy5] Info 06/04/2020, 10:31:19.820 web.solutions 080A0400 Loading configuration started [282xy5] Note: The id of a save or load operation can also be found on and copied from the \"Manage app data\" page (Save or Load report) in order to search for corresponding messages in the Logbook. The diagnostic numbers may be used to find the beginning and end of the respective operation in the Logbook, e.g. \"080A0400\" denoting \"Loading configuration started\". Robustness \u00b6 Command implementations must be robust with respect to the following conditions: The order in which requests are sent to the participants within a phase is undefined. Any command that is executed before or after a specific other command may fail. Invalid data or problems in general must not break the application, but should result in a user-friendly problem response or diagnostic message. The set of save and load phases may be extended. Participants must therefore respond to unknown phases with status code 204. New parameters may be added to the command request body to enable advanced use cases. Invariants \u00b6 The coordinator (Solutions app) ensures the following properties: The activeConfiguration symlink is available and points to the directory containing the currently active appdata. Only a single save or load operation is processed at a time. The sequence of calls which are made to perform a save or load operation adheres to the specification (cf. Appendix). When a participant does not respond to a request, the request is canceled and reported as problem. Processing continues. Problems are collected and reported to the user, start and end messages for save and load operations are written to the Logbook. From copying to smart loading \u00b6 Apps must update their appdata sub-directory contents during the load operation to reflect the data which has been loaded and is now active in the apps. A first basic implementation may be to just copy the directory contents from the \"configuration to load\" to the corresponding appdata sub-directory. The Solutions app provides a default implementation of this file copy functionality. To activate this functionality, use the copyOnLoad option in your app directory declarations (cf. section \"Specify your app directories\"). The following example shows how a set of copyOnLoad declarations would be applied for a given configuration: Example app directory declarations (pseudo code): a/b: copyOnLoad=false a/b/c: copyOnLoad=true a/b/c/h: copyOnLoad=false Directories in the configuration to load: a a/b a/b/c/d a/b/c/h a/b/e/f a/g Result showing which directories would be copied (and why): a : true ( default , as not declared ) b : false ( declared ) c : true ( declared ) d : true ( inherited from c ) h : false ( declared ) e : false ( inherited from b ) f : false ( inherited from e ) g : true ( inherited from a ) However, an app might improve the load functionality by evaluating the changes to be applied during load. The app may determine that state changes (e.g., stopping the PLC for loading) are actually not required depending on the kind of data to load. Some participants may even be able to skip a load operation completely if their part of the configuration has not changed. If you want to take control and be able to evaluate differences between the configuration files and the appdata files, declare your base directory or specific sub-directories you would like to handle yourself in the package manifest omit the copyOnLoad option (or set copyOnLoad to \"false\") Note: For compatibility reasons with previous ctrlX CORE releases, copyOnLoad is executed before the \"prepare\" phase. If you do not use copyOnLoad, you should persist your app data in the \"load\" phase as specified; see the \"Annotated load process\" in the Appendix for details Appendix \u00b6 Annotated load process \u00b6 Example loading sequences \u00b6 Cancelled \u00b6 Succeeded \u00b6 Failed \u00b6 Problem schema definition \u00b6 Failure responses to command requests must adhere to the following schema: Problem.yaml Problem : type : object x-version : '1.0.0' description : > This document defines a \"problem detail\" as a way to carry machine-readable details of errors in a HTTP response to avoid the need to define new error response formats for HTTP APIs. required : - type - title properties : type : type : string format : uri description : | A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be \"about:blank\". default : 'about:blank' example : 'https://example.com/probs/out-of-credit' title : type : string description : | A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4). example : You do not have enough credit. status : type : integer format : int32 description : | The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. example : 403 detail : type : string description : | A human-readable explanation specific to this occurrence of the problem. example : Your current balance is 30, but that costs 50. instance : type : string description : | A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. example : /account/12345/msgs/abc code : type : string deprecated : true description : | An error code issued by the system that caused the original problem. This code can be used to track down the root cause of the error. example : F360001 mainDiagnosisCode : type : string description : | The main diagnosis code is issued by the system that caused the problem. This code can be used to track down the root cause and source of the error. It can be used to search in the documentation for a solution. It SHOULD NOT change from occurrence to occurrence of the same problem. example : 080F0100 detailedDiagnosisCode : type : string description : | The detailed diagnosis code issued by the system that caused the problem. This code can be used to track down the detailed cause and source of the error. It can be used to search in the documentation for a solution. The detailed diagnosis code gives additional information about the cause of the error. It SHOULD NOT change from occurrence to occurrence of the same problem. example : '00666001' dynamicDescription : type : string description : | A dynamic description gives detailed information about the occurrence of a problem. It can change between different occurrences of the same error. example : value = -4.5 severity : type : string description : ' Severity of a problem as defined RFC5424 of the Syslog standard, see https://tools.ietf.org/html/rfc5424' example : Error enum : - Emergency - Alert - Critical - Error - Warning - Notice - Informational - Debug links : type : array description : | Collection of links to fix the problem. E.g. links to online user manual, to an online community (using tags) or a developer chat (e.g. Slack). items : type : string format : uri example : https://stackoverflow.com/questions/tagged/boschrexroth+controlx+f360001 moreInfo : type : object additionalProperties : true example : trace : ExampleClass.cpp#452 Null pointer exception class : ExampleClass App-private files \u00b6 (Supported from XCR-V-0112) Apps may need to store files in their appdata directories which are only needed at runtime. These files (or directories) have to be ignored on loading and when saving the appdata to an archived configuration. An app can specify such files using the \"appPrivateFiles\" element in the configuration section of its manifest. The element value is an array of strings where each string represents a regular expression following the RE2 syntax (https://golang.org/s/re2syntax). The expressions describe paths and names of files to be considered as private and are checked case-insensitively. The following example shows the declaration of \"appPrivateFiles\" with 3 regular expressions and the declaration of the app's root directory: package-manifest.json \"configuration\" : { \"appPrivateFiles\" : [ \"^my-app/private/\" , \"^my-app/mixed/[^/]+\\\\.bak\" , \"^my-app/mixed/$\" ], \"appDirectories\" : [ { \"name\" : \"my-app\" , \"description\" : \"My app\" , \"icon\" : \"bosch-ic-components\" , \"copyOnLoad\" : true } ] } Apps should only specify private files in their own app directories. Therefore, it is a good practice to start each regular expression with \"^my-app/\" where my-app is a root app directory of the app. Hints for the regular expressions: The characters \"[]().\\^\\$|?*+{}\" have special meanings and must be escaped with \"\\\" to be used uninterpreted. \"^\" matches the start of the string, \"$\" matches the end of the string. To provide \"\\\\\" in the manifest file which is in JSON format, you have to double it because the backslash is an escape character in JSON too. Examples for regular expressions (with an app root directory of \"my-app\") Regular expression Meaning \"^my-app/private/\" defines the my-app/private directory and its content as private \" my-app/mixed/[ /]+..bak\" defines all files with extension .bak within the my-app/mixed directory as private \"^my-app/mixed/$\" defines the my-app/mixed directory itself as private so that it is not removed if empty","title":"Data Persistance"},{"location":"persistdata.html#table-of-content","text":"1 Introduction 2 Get access to the Solutions storage 3 Specify your app directories 4 Register for saving and loading 5 Implement saving and loading Appendix","title":"Table of content"},{"location":"persistdata.html#1-introduction","text":"This How-To shows how to integrate an App into the common ctrlX persistence and storage mechanisms. Persistence handling is done by the Solutions App (app.solutions), which is an essential part of any ctrlX CORE device. It provides a central storage for other apps that need to persist their app data. App data is saved to the storage or loaded from the storage on demand (via app editors, the \"Manage app data\" UI, or the Solutions REST API). The diagram shows that the storage provided by the Solutions app is structured into two conceptual locations: The appdata location contains the files representing the current state of the apps and is owned by the apps. The archive contains saved configurations and is managed by the Solutions app. The responsibilities of the Solutions app and Apps that persist their data in the Solutions storage are allocated as follows: Solutions (app.solutions): - Provide file storage and make appdata directory available via the activeConfiguration symlink - Trigger and coordinate \"save\" and \"load\" operations and collect results - Manage the archived configurations (Web UI, REST API) Apps: - Participate in loading and saving - Use and update the files in their appdata directories - Must not change the contents of archived configurations","title":"1 Introduction"},{"location":"persistdata.html#2-get-access-to-the-solutions-storage","text":"The Solutions app exports the base directory of the storage location as a slot using a content interface. Your app must provide a plug that connects to the slot so that the $SNAP_COMMON/solutions directory becomes visible in your file system: snapcraft.yaml: plugs : active-solution : interface : content content : solutions target : $SNAP_COMMON/solutions The $SNAP_COMMON/solution directory contains an activeConfiguration symlink. Use this symlink to get the path to the appdata directory which contains the currently active app data: $SNAP_COMMON/solutions/activeConfiguration \u2192 $SNAP_COMMON/solutions/DefaultSolution/configurations/appdata/ Note: Your app might start before the active-solution interface is connected by the system. You can handle this scenario in two ways: Use an entry-point script and check status of the active-solution interface using snapctl is-connected active-solution; e.g. create a script which has the following content and is defined in your snapcraft.yaml as the command to execute: #!/bin/bash while ! snapctl is-connected active-solution do sleep 5 done $SNAP/bin/ Check existence of the folder $SNAP_COMMON/solutions/activeConfiguration in your application logic In a development environment, you can check the connection of the active-solution interface by - calling snap connections and checking whether there is an entry with > interface content[solutions] for the plug \\<your app name>:active-solution and slot rexroth-solutions:active-solution - running a shell in the context of your app and checking the content of the folder $SNAP_COMMON/solutions which must contain a folder DefaultSolution and the two symlinks activeSolution and activeConfiguration . The shell can be started with snap run --shell \\<your app name>.\\<your app command>","title":"2 Get access to the Solutions storage"},{"location":"persistdata.html#3-specify-your-app-directories","text":"Within the appdata root directory, define a sub-directory with a unique name as your base directory. We recommend to use your app's name in lowercase letters to avoid conflicts with other apps and allow users to easily identify your data in the file system. The screenshot shows an example with the base directories of the Motion and PLC apps, among others. You should also explicitly declare ownership of your app directories in your package manifest. The following example shows the declaration of the PLC base directory. package-manifest.json: \"configuration\" : { \"appDirectories\" : [ { \"name\" : \"plc\" , \"description\" : \"PLC\" , \"icon\" : \"bosch-ic-components\" , \"copyOnLoad\" : true } ] } name (required): The name or path of the app directory description : The title to display in the \"Manage app data\" content view (should be consistent with title used e.g. in sidebar menu); if omitted or empty, the app directory does not appear in the content view icon : The app icon to display in the \"Manage app data\" content view (should be consistent with icon used e.g. in sidebar menu); if omitted or empty, no icon is displayed in the content view copyOnLoad : Set \u201ctrue\u201d to instruct the Solutions app to copy the data from your app directory in the archive to the active configuration on load; omit (or set \"false\") to enable custom \"smart loading\"; see section \"From copying to smart loading\" for details writeProtected : By default, app directories and their contents can be changed by users with \"Manage configurations\" permissions (e.g., via WebDAV). Set \"true\" for your root app directory to protect your app directory and its sub-directories in the active configuration against changes by users; omit (or set \"false\") for specific sub-directories to provide write-access to those directories. Since XCR-V-0112. Configuration contents should generally have the following properties: Compatible : Changes to content formats should not break existing applications (new format definitions accept old contents). Human-readable : Formats should be human-readable and therefore be text-based (which also allows comparisons between different versions). Names and values should be descriptive and understandable, e.g. by using well-known domain vocabulary. Extendable : Device and engineering functionality will enhance from version to version. You should make sure that your file formats are extendible to cope with new use cases. We recommend JSON as the file format where possible, as it supports these properties. You may also consider to provide corresponding JSON-schema files to enable guidance and validation. In any case, JSON files should contain a root object (NOT an array) to enable schema references and extendibility. Remark: Your app can specify \"private files\" inside your appdata directories in order to exclude them from save and load operations. See appendix \"App-private files\" for details.","title":"3 Specify your app directories"},{"location":"persistdata.html#4-register-for-saving-and-loading","text":"In order to participate in the save and load operations triggered by the Solutions app, your app must register its own save and load commands. The following example shows how to register a save and a load command for Motion settings by adding the respective command declarations to the package manifest: package-manifest.json: \"commands\" : { \"activeConfiguration\" : { \"save\" : [ { \"id\" : \"motion\" , \"subject\" : \"motion settings\" , \"url\" : \"/automation/api/v1/motion/admin/cfg/save\" } ], \"load\" : [ { \"id\" : \"motion\" , \"subject\" : \"motion settings\" , \"url\" : \"/automation/api/v1/motion/admin/cfg/load\" } ], } } For each command, the following elements must be specified: id (required): a string serving as the identifier of the save or load command; must be unique within the \u201ccommands/activeConfiguration/save\u201d and \u201ccommands/activeConfiguration/load\u201d paths, respectively subject (required): a string denoting what will be saved or loaded; used to inform users, e.g. in messages like \u201cLoading motion settings \u201d or \u201cFailed to load motion settings \u201d url (required): a string representing the request URL; URLs starting with a slash are interpreted to be relative to https://\\<host> (the control itself). Declare an absolute URL if you need to specify a port, e.g. http://localhost:5555/my-app/api/v1/save . The URL is used for HTTP POST requests which include command parameters in the request body (see section \"Request parameters\" for details) By default there is no defined order of command execution. Starting with version XCR-V-0112, a command may declare that it needs to be executed after other commands. If this is required (which should be the exception), add an after element to your command declaration with an array containing the IDs of the predecessor commands. Note: Hint for developers providing Data Layer endpoints for loading and saving In order to make the Data Layer endpoints for saving and loading a configuration consistent, the respective URLs should adhere to the following pattern: \\<datalayer-basepath>/\\< technology >/admin/cfg/\\<operation> Examples: - /automation/api/v1/ scheduler /admin/cfg/save(or load) - /automation/api/v1/ fieldbuses/ethercat/master /admin/cfg/save (or load) - /automation/api/v1/ motion /admin/cfg/save (or load)","title":"4 Register for saving and loading"},{"location":"persistdata.html#5-implement-saving-and-loading","text":"With the term \"participants\" we refer to apps that have registered save and load commands in order to participate in save and load operations as described in the previous section.","title":"5 Implement saving and loading"},{"location":"persistdata.html#processing-sequences","text":"Save and load operations triggered by the Solutions app are processed in phases. In each phase, the Solutions app sends requests to all registered participants sequentially in undefined order; that is, participants must not depend on each other. A save operation is processed in one phase: save : Save current app state into active configuration (appdata directory) A load operation is processed in five phases: query : Check if loading is possible in the current system state prepare : Perform any required preparatory steps load : Load archived configuration into the apps, and persist resulting app state to the active configuration (appdata directory) validate : Perform any required post-processing steps activate (if phases 1-4 have been finished without problems): Establish desired run state of the device; abort (otherwise): Do not change run state of the device If the query phase (1) has been completed without any error or problem response, the processing continues with the following phases (2-5) in the specified order. Otherwise, the load operation is canceled and the errors and problems are reported to the user. Any errors or problems that occur during phases 2-5 are collected and reported to the user when the whole operation is completed. A more detailed description of the load phases and example sequences can be found in the Appendix.","title":"Processing sequences"},{"location":"persistdata.html#request-parameters","text":"The following information is sent as request parameters to all participants in all save and load phases: configurationPath : the directory of the configuration to be loaded, starting from the solutions directory, e.g. \"solutions/DefaultSolution/configurations/ \"; in case of a save operation, the configuration path should be ignored, as the target of saving is always the active configuration (appdata directory) id : a random code which identifies the instance of save or load operation, e.g. \"282xy5\"; also used to find corresponding messages in the Logbook; should be included in the dynamic description of diagnostic messages and trace messages by all participants; convention: put in square brackets at the end of diagnostic messages and trace messages; see section \"Diagnostic messages\" for details phase : specifies the current processing phase of a save or load operation; one of the phases described in section \"Processing sequences\"; e.g., \"load\" The request parameters are provided in the request body as a JSON object with the following structure (using the sample values from above): { \"configurationPath\" : \"solutions/DefaultSolution/configurations/<configuration>\" , \"id\" : \"282xy5\" , \"phase\" : \"load\" }","title":"Request parameters"},{"location":"persistdata.html#expected-behavior","text":"Participants must consider the following conditions and constraints in their command implementations.","title":"Expected behavior"},{"location":"persistdata.html#success-behavior","text":"The save or load command must respond with a success status code (2xx or 3xx, typically with 204 and an empty body). If there is no data to load, the command must reset its app to its initial state (no axes defined, no PLC program available, etc.). Related app data must completely be removed from the active configuration. If a phase is not relevant or unknown to the command, the command must respond with the status code 204 (and an empty body).","title":"Success behavior"},{"location":"persistdata.html#failure-behavior","text":"The save or load command must respond with an error status code (4xx or 5xx). The response body must contain a JSON object describing the occurred problem (see \"Problem Schema Definition\" in the Appendix for the required format). The Solutions frontend reports the following fields of the problem response for every failed save or load command: mainDiagnosisCode and title detailedDiagnosisCode and detail dynamicDescription incl. the id of the save or load operation (see example below) The dynamicDescription field can provide specific information for the user, like the cause of the failure and hints how to resolve it (if cause and hint are not already provided through the main and detailed diagnosis). The field may contain \u201c\\n\u201c to separate cause and hint in the result output of the UI, e.g. \u201cFormat error in X.json.\\nAdapt file or use motion editor to fix/recreate axis. [282xy5]\u201d Common response if app requires Setup state for loading (since XCR-V-0116) If a participant gets a load request, but requires Setup state for loading, it should Respond with status code 409 (Conflict) Return a Problem object with the common mainDiagnosisCode 080F0E00 (\"Loading configuration not possible in current state\") a participant-specific detailed diagnostic which references the common main diagnostic and explains the cause of the problem and how to resolve it Not write diagnoses to the Logbook in the query phase Limitation: The described approach is only applicable to Rexroth apps.","title":"Failure behavior"},{"location":"persistdata.html#diagnostic-messages","text":"The Solutions app only logs a general diagnostic message on start and finish of a save and load operation. Each participant should additionally log its own activities and occurred problems into the control\u2019s Logbook. Any diagnostic message or trace message related to saving or loading should include the current id at the end of the dynamic description in square brackets. Example of diagnostic entries as they would appear in the Logbook: Level Date Unit Code Description Info 06/04/2020, 10:33:11.964 web.solutions 080A0401 Loading configuration successfully finished [282xy5] ... ... ... ... ... ... ... ... \\<main diag code> \\<detailed diag code> \\<main diag text> \\<detailed diag text> \\<dynamic description text> [282xy5] \\<entity text> Info 06/04/2020, 10:31:20.733 web.automation \\<main diag code> Trace message\\<component name> Scheduler successfully prepared for loading [282xy5] Info 06/04/2020, 10:31:19.820 web.solutions 080A0400 Loading configuration started [282xy5] Note: The id of a save or load operation can also be found on and copied from the \"Manage app data\" page (Save or Load report) in order to search for corresponding messages in the Logbook. The diagnostic numbers may be used to find the beginning and end of the respective operation in the Logbook, e.g. \"080A0400\" denoting \"Loading configuration started\".","title":"Diagnostic messages"},{"location":"persistdata.html#robustness","text":"Command implementations must be robust with respect to the following conditions: The order in which requests are sent to the participants within a phase is undefined. Any command that is executed before or after a specific other command may fail. Invalid data or problems in general must not break the application, but should result in a user-friendly problem response or diagnostic message. The set of save and load phases may be extended. Participants must therefore respond to unknown phases with status code 204. New parameters may be added to the command request body to enable advanced use cases.","title":"Robustness"},{"location":"persistdata.html#invariants","text":"The coordinator (Solutions app) ensures the following properties: The activeConfiguration symlink is available and points to the directory containing the currently active appdata. Only a single save or load operation is processed at a time. The sequence of calls which are made to perform a save or load operation adheres to the specification (cf. Appendix). When a participant does not respond to a request, the request is canceled and reported as problem. Processing continues. Problems are collected and reported to the user, start and end messages for save and load operations are written to the Logbook.","title":"Invariants"},{"location":"persistdata.html#from-copying-to-smart-loading","text":"Apps must update their appdata sub-directory contents during the load operation to reflect the data which has been loaded and is now active in the apps. A first basic implementation may be to just copy the directory contents from the \"configuration to load\" to the corresponding appdata sub-directory. The Solutions app provides a default implementation of this file copy functionality. To activate this functionality, use the copyOnLoad option in your app directory declarations (cf. section \"Specify your app directories\"). The following example shows how a set of copyOnLoad declarations would be applied for a given configuration: Example app directory declarations (pseudo code): a/b: copyOnLoad=false a/b/c: copyOnLoad=true a/b/c/h: copyOnLoad=false Directories in the configuration to load: a a/b a/b/c/d a/b/c/h a/b/e/f a/g Result showing which directories would be copied (and why): a : true ( default , as not declared ) b : false ( declared ) c : true ( declared ) d : true ( inherited from c ) h : false ( declared ) e : false ( inherited from b ) f : false ( inherited from e ) g : true ( inherited from a ) However, an app might improve the load functionality by evaluating the changes to be applied during load. The app may determine that state changes (e.g., stopping the PLC for loading) are actually not required depending on the kind of data to load. Some participants may even be able to skip a load operation completely if their part of the configuration has not changed. If you want to take control and be able to evaluate differences between the configuration files and the appdata files, declare your base directory or specific sub-directories you would like to handle yourself in the package manifest omit the copyOnLoad option (or set copyOnLoad to \"false\") Note: For compatibility reasons with previous ctrlX CORE releases, copyOnLoad is executed before the \"prepare\" phase. If you do not use copyOnLoad, you should persist your app data in the \"load\" phase as specified; see the \"Annotated load process\" in the Appendix for details","title":"From copying to smart loading"},{"location":"persistdata.html#appendix","text":"","title":"Appendix"},{"location":"persistdata.html#annotated-load-process","text":"","title":"Annotated load process"},{"location":"persistdata.html#example-loading-sequences","text":"","title":"Example loading sequences"},{"location":"persistdata.html#cancelled","text":"","title":"Cancelled"},{"location":"persistdata.html#succeeded","text":"","title":"Succeeded"},{"location":"persistdata.html#failed","text":"","title":"Failed"},{"location":"persistdata.html#problem-schema-definition","text":"Failure responses to command requests must adhere to the following schema: Problem.yaml Problem : type : object x-version : '1.0.0' description : > This document defines a \"problem detail\" as a way to carry machine-readable details of errors in a HTTP response to avoid the need to define new error response formats for HTTP APIs. required : - type - title properties : type : type : string format : uri description : | A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be \"about:blank\". default : 'about:blank' example : 'https://example.com/probs/out-of-credit' title : type : string description : | A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4). example : You do not have enough credit. status : type : integer format : int32 description : | The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. example : 403 detail : type : string description : | A human-readable explanation specific to this occurrence of the problem. example : Your current balance is 30, but that costs 50. instance : type : string description : | A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. example : /account/12345/msgs/abc code : type : string deprecated : true description : | An error code issued by the system that caused the original problem. This code can be used to track down the root cause of the error. example : F360001 mainDiagnosisCode : type : string description : | The main diagnosis code is issued by the system that caused the problem. This code can be used to track down the root cause and source of the error. It can be used to search in the documentation for a solution. It SHOULD NOT change from occurrence to occurrence of the same problem. example : 080F0100 detailedDiagnosisCode : type : string description : | The detailed diagnosis code issued by the system that caused the problem. This code can be used to track down the detailed cause and source of the error. It can be used to search in the documentation for a solution. The detailed diagnosis code gives additional information about the cause of the error. It SHOULD NOT change from occurrence to occurrence of the same problem. example : '00666001' dynamicDescription : type : string description : | A dynamic description gives detailed information about the occurrence of a problem. It can change between different occurrences of the same error. example : value = -4.5 severity : type : string description : ' Severity of a problem as defined RFC5424 of the Syslog standard, see https://tools.ietf.org/html/rfc5424' example : Error enum : - Emergency - Alert - Critical - Error - Warning - Notice - Informational - Debug links : type : array description : | Collection of links to fix the problem. E.g. links to online user manual, to an online community (using tags) or a developer chat (e.g. Slack). items : type : string format : uri example : https://stackoverflow.com/questions/tagged/boschrexroth+controlx+f360001 moreInfo : type : object additionalProperties : true example : trace : ExampleClass.cpp#452 Null pointer exception class : ExampleClass","title":"Problem schema definition"},{"location":"persistdata.html#app-private-files","text":"(Supported from XCR-V-0112) Apps may need to store files in their appdata directories which are only needed at runtime. These files (or directories) have to be ignored on loading and when saving the appdata to an archived configuration. An app can specify such files using the \"appPrivateFiles\" element in the configuration section of its manifest. The element value is an array of strings where each string represents a regular expression following the RE2 syntax (https://golang.org/s/re2syntax). The expressions describe paths and names of files to be considered as private and are checked case-insensitively. The following example shows the declaration of \"appPrivateFiles\" with 3 regular expressions and the declaration of the app's root directory: package-manifest.json \"configuration\" : { \"appPrivateFiles\" : [ \"^my-app/private/\" , \"^my-app/mixed/[^/]+\\\\.bak\" , \"^my-app/mixed/$\" ], \"appDirectories\" : [ { \"name\" : \"my-app\" , \"description\" : \"My app\" , \"icon\" : \"bosch-ic-components\" , \"copyOnLoad\" : true } ] } Apps should only specify private files in their own app directories. Therefore, it is a good practice to start each regular expression with \"^my-app/\" where my-app is a root app directory of the app. Hints for the regular expressions: The characters \"[]().\\^\\$|?*+{}\" have special meanings and must be escaped with \"\\\" to be used uninterpreted. \"^\" matches the start of the string, \"$\" matches the end of the string. To provide \"\\\\\" in the manifest file which is in JSON format, you have to double it because the backslash is an escape character in JSON too. Examples for regular expressions (with an app root directory of \"my-app\") Regular expression Meaning \"^my-app/private/\" defines the my-app/private directory and its content as private \" my-app/mixed/[ /]+..bak\" defines all files with extension .bak within the my-app/mixed directory as private \"^my-app/mixed/$\" defines the my-app/mixed directory itself as private so that it is not removed if empty","title":"App-private files"},{"location":"px.html","text":"Use Px as Local Proxy on a Windows Host \u00b6 This documentation is for Windows hosts only without direct internet access . Indroduction \u00b6 Host computers without direct internet access are using a proxy server to connect to the internet. In this case we have to provide the proxy service also for a SDK builder VM running on this host . We recommend to install and run px.exe as local proxy server on your Windows host. This local proxy forwards http and https requests to the configured remote proxy. Here some advantages of px.exe: Simple to install and configure Same port for http and https forwarding No need to store credential informations (user, password) in config file(s) because Px uses the encrypted Windows credentials. Preconfigured usage in the ctrlX AUTOMATION SDK QEMU VMs For more informations about Px see What is Px Installation of Px as Local Proxy Server \u00b6 Download Px.exe from https://github.com/genotrance/px - Px for Windows Latest Copy Px.exe to a separate folder Configure Px.exe px.exe --proxy= address_of_your_network_proxy : port --save Important Px.exe provides both http and https access via default port 3128 . If this port is not available on the host it can be changed in px.ini BUT: The alternative port has to be changed in the VM too - see Setup a QEMU VM and Setup a Virtual Box VM . Add Px to the Windows registry to run on startup: px.exe --install Enter this command for further usage of Px: px.exe --help Proxy Settings in the SDK Builder VM \u00b6 As mentioned a VM running on a host without direct internet access has to use a proxy server too. For the VM Px on the host is reachable via the URL http://10.0.2.2:3128 Note: 10.0.2.2 is the IP address of the host from the perspective of the VM. See also QEMU Virtual Machine Networking For your information only - do not change if not necessary: This URL is stored as so called \"Proxy Settings\" in the VM e.g. in following files: /etc/environment *1) /etc/wgetrc ~/.nuget/NuGet/NuGet.Config *1) Here these environment variables are defined: http_proxy=\"http://10.0.2.2:3128\" https_proxy=\"http://10.0.2.2:3128\" HTTP_PROXY=\"http://10.0.2.2:3128\" HTTPS_PROXY=\"http://10.0.2.2:3128\" no_proxy=localhost,127.0.0.1,.local Troubleshooting \u00b6 Check proxy function wget http://www.boschrexroth.com If no error occurs the internet access via the proxy server is working. In this case remove the downloaded file. rm index.html* Check the following points if there are problems with Px: SDK Builder VM: Are the proxy settings fitting to the px.ini file on the host? For more informations about the settings in px.in see px.ini on github Host PC: Is another proxy running e.g. cntlm? Host PC: Enable logging with parameter log = 1 in px.ini","title":"Px.exe as Proxy on a Windows Host"},{"location":"px.html#use-px-as-local-proxy-on-a-windows-host","text":"This documentation is for Windows hosts only without direct internet access .","title":"Use Px as Local Proxy on a Windows Host"},{"location":"px.html#indroduction","text":"Host computers without direct internet access are using a proxy server to connect to the internet. In this case we have to provide the proxy service also for a SDK builder VM running on this host . We recommend to install and run px.exe as local proxy server on your Windows host. This local proxy forwards http and https requests to the configured remote proxy. Here some advantages of px.exe: Simple to install and configure Same port for http and https forwarding No need to store credential informations (user, password) in config file(s) because Px uses the encrypted Windows credentials. Preconfigured usage in the ctrlX AUTOMATION SDK QEMU VMs For more informations about Px see What is Px","title":"Indroduction"},{"location":"px.html#installation-of-px-as-local-proxy-server","text":"Download Px.exe from https://github.com/genotrance/px - Px for Windows Latest Copy Px.exe to a separate folder Configure Px.exe px.exe --proxy= address_of_your_network_proxy : port --save Important Px.exe provides both http and https access via default port 3128 . If this port is not available on the host it can be changed in px.ini BUT: The alternative port has to be changed in the VM too - see Setup a QEMU VM and Setup a Virtual Box VM . Add Px to the Windows registry to run on startup: px.exe --install Enter this command for further usage of Px: px.exe --help","title":"Installation of Px as Local Proxy Server"},{"location":"px.html#proxy-settings-in-the-sdk-builder-vm","text":"As mentioned a VM running on a host without direct internet access has to use a proxy server too. For the VM Px on the host is reachable via the URL http://10.0.2.2:3128 Note: 10.0.2.2 is the IP address of the host from the perspective of the VM. See also QEMU Virtual Machine Networking For your information only - do not change if not necessary: This URL is stored as so called \"Proxy Settings\" in the VM e.g. in following files: /etc/environment *1) /etc/wgetrc ~/.nuget/NuGet/NuGet.Config *1) Here these environment variables are defined: http_proxy=\"http://10.0.2.2:3128\" https_proxy=\"http://10.0.2.2:3128\" HTTP_PROXY=\"http://10.0.2.2:3128\" HTTPS_PROXY=\"http://10.0.2.2:3128\" no_proxy=localhost,127.0.0.1,.local","title":"Proxy Settings in the SDK Builder VM"},{"location":"px.html#troubleshooting","text":"Check proxy function wget http://www.boschrexroth.com If no error occurs the internet access via the proxy server is working. In this case remove the downloaded file. rm index.html* Check the following points if there are problems with Px: SDK Builder VM: Are the proxy settings fitting to the px.ini file on the host? For more informations about the settings in px.in see px.ini on github Host PC: Is another proxy running e.g. cntlm? Host PC: Enable logging with parameter log = 1 in px.ini","title":"Troubleshooting"},{"location":"quick-start-guide.html","text":"With the help of this guide you will be able to build your first snap with one of the example projects of the ctrlX AUTOMATION SDK in just a few steps. Prerequisites \u00b6 Install ctrlX WORKS >= 1.14 with function 'App Build Environment' on your Windows host computer If your Windows host computer is behind a proxy server, install and run PX.exe . Building a Snap \u00b6 Building a snap from a SDK sample project can be done in a few steps: From ctrlX WORKS create and start a new App Build Environment (QEMU VM) instance. Wait until the VM is shutting down automatically after the initialization phase. Then restart your VM. For more information see ctrlX WORKS Feature App Build Environment . When ctrlX WORKS enables the SSH link click this link to start a SSH session. On password prompt enter boschrexroth Install the latest ctrlX AUTOMATION SDK from github From the home directory call this script: ./install-sdk.sh Change to project folder /home/boschrexroth/ctrlx-automation-sdk/samples-cpp/datalayer.register.node Build one or both snaps To build a snap for a ctrlX CORE virtual enter: ./build-snap-amd64.sh To build a snap for a ctrlX CORE enter: ./build-snap-arm64.sh From your Windows host copy the snaps to your local file system Start cmd.exe and enter this command: scp - P 10022 boschrexroth @localhost : ~/ ctrlx - automation - sdk / samples - cpp / datalayer . register . node /*.snap . Login into your ctrlX CORE and install the according snap Don't forget to set option 'Allow installation from unknown source' under Apps --> Settings Select Settings --> Data Layer and check the nodes under path sdk-cpp-registernode/ There should appear several nodes created by the snap. Important To setup a complete tool set to develop own applications (snaps) see following chapters: Visual Studio Code SSH Connection All sample projects","title":"Quick Start Guide"},{"location":"quick-start-guide.html#prerequisites","text":"Install ctrlX WORKS >= 1.14 with function 'App Build Environment' on your Windows host computer If your Windows host computer is behind a proxy server, install and run PX.exe .","title":"Prerequisites"},{"location":"quick-start-guide.html#building-a-snap","text":"Building a snap from a SDK sample project can be done in a few steps: From ctrlX WORKS create and start a new App Build Environment (QEMU VM) instance. Wait until the VM is shutting down automatically after the initialization phase. Then restart your VM. For more information see ctrlX WORKS Feature App Build Environment . When ctrlX WORKS enables the SSH link click this link to start a SSH session. On password prompt enter boschrexroth Install the latest ctrlX AUTOMATION SDK from github From the home directory call this script: ./install-sdk.sh Change to project folder /home/boschrexroth/ctrlx-automation-sdk/samples-cpp/datalayer.register.node Build one or both snaps To build a snap for a ctrlX CORE virtual enter: ./build-snap-amd64.sh To build a snap for a ctrlX CORE enter: ./build-snap-arm64.sh From your Windows host copy the snaps to your local file system Start cmd.exe and enter this command: scp - P 10022 boschrexroth @localhost : ~/ ctrlx - automation - sdk / samples - cpp / datalayer . register . node /*.snap . Login into your ctrlX CORE and install the according snap Don't forget to set option 'Allow installation from unknown source' under Apps --> Settings Select Settings --> Data Layer and check the nodes under path sdk-cpp-registernode/ There should appear several nodes created by the snap. Important To setup a complete tool set to develop own applications (snaps) see following chapters: Visual Studio Code SSH Connection All sample projects","title":"Building a Snap"},{"location":"references.html","text":"References \u00b6 Useful weblinks \u00b6 Snap concept and the Framework (good to know) \u00b6 snapcraft.io apache celix Decode Bearer token \u00b6 jwt.io Miscellaneous \u00b6 ctrlX Data Layer trusted platform module Logging API Description \u00b6 Api reference (doxygen generated) c/c++ c# python Bundle reference Diagnosis Trace Scheduler","title":"Overview"},{"location":"references.html#references","text":"","title":"References"},{"location":"references.html#useful-weblinks","text":"","title":"Useful weblinks"},{"location":"references.html#snap-concept-and-the-framework-good-to-know","text":"snapcraft.io apache celix","title":"Snap concept and the Framework (good to know)"},{"location":"references.html#decode-bearer-token","text":"jwt.io","title":"Decode Bearer token"},{"location":"references.html#miscellaneous","text":"ctrlX Data Layer trusted platform module Logging","title":"Miscellaneous"},{"location":"references.html#api-description","text":"Api reference (doxygen generated) c/c++ c# python Bundle reference Diagnosis Trace Scheduler","title":"API Description"},{"location":"remote-build.html","text":"From snapcraft version 3.9+ Canonical enables anyone to run a multi-architecture snap build process on remote servers using the Launchpad build farm : snapcraft remote - build -- build - on = arm64 , amd64 -- launchpad - accept - public - upload You can find a detailed documentation here: Remote build For support please consult the Snapcraft Forum . Important Using the snapcraft remote-build feature makes your projects public. So it is primarily useful for open sorce software projects.","title":"Using Snapcraft Remote Build from Canonical"},{"location":"s2sauth.html","text":"Service to Service (S2S) authentication provides an easy-to-use interface for applications to retrieve a JSON web token (JWT). By using this token, applications can access data from other resources. In order to integrate service-to-service authentication into your application follow the instructions below. Important Service-to-Service authentication is not available for apps which are installed from \"unkown sources\". Only apps which have been validated & digitally signed by Bosch Rexroth AG are permitted to use the interface. Add Content Plug to snapcraft.yaml \u00b6 To be able to retrieve a token, the app has to provide two content slots. The definition for those slots must be added to the snapcraft.yaml: slots : secure-assets : interface : content content : secure-assets target : $SNAP/secure-assets/${SNAPCRAFT_PROJECT_NAME} service-token : interface : content content : service-token source : write : - $SNAP_DATA/service-token/${SNAPCRAFT_PROJECT_NAME} Important The target of the secure-assets slot must point to a location in the read-only area of the application ($SNAP, see example above). The app validation will fail if this rule is violated. Define & Provide Permissions (secure-assets) \u00b6 The application must provide a file named ${SNAP_NAME}.scopes.json located in $SNAP/secure-assets/${SNAPCRAFT_PROJECT_NAME} which defines the permissions that are requested by the application. One example would be: { \"id\" : \"myapp\" \"required-permissions\" : [ \"logbook.diag.r\" , \"rexroth-deviceadmin.web.licensemanager.r\" ] } In this example, your app would request a token which provides access to the logbook (read-only) and the License Manager backend (read-only). Important The parameter id must match the id that is defined in the Package Manifest (refer to Package Manifest documentation for details) Retrieve and Use Authentication Token (service-token) \u00b6 During runtime, the token will be provided to the application as a file named <id>.token (in the example shown above, this would be myapp.token ) in the service-token folder ( $SNAP_DATA/service-token/${SNAPCRAFT_PROJECT_NAME} ). Important The content of the token file might not be up-to-date when the application is ready, especially after a (re-)start of the system. Using an outdated token will lead to an authentication failure. Therefore, the application must implement a logic which - if the authentication request has failed - parses the token file again and tries to re-authenticate. This must be repeated until the authentication succeeds.","title":"Service-to-Service Authentication"},{"location":"s2sauth.html#add-content-plug-to-snapcraftyaml","text":"To be able to retrieve a token, the app has to provide two content slots. The definition for those slots must be added to the snapcraft.yaml: slots : secure-assets : interface : content content : secure-assets target : $SNAP/secure-assets/${SNAPCRAFT_PROJECT_NAME} service-token : interface : content content : service-token source : write : - $SNAP_DATA/service-token/${SNAPCRAFT_PROJECT_NAME} Important The target of the secure-assets slot must point to a location in the read-only area of the application ($SNAP, see example above). The app validation will fail if this rule is violated.","title":"Add Content Plug to snapcraft.yaml"},{"location":"s2sauth.html#define-provide-permissions-secure-assets","text":"The application must provide a file named ${SNAP_NAME}.scopes.json located in $SNAP/secure-assets/${SNAPCRAFT_PROJECT_NAME} which defines the permissions that are requested by the application. One example would be: { \"id\" : \"myapp\" \"required-permissions\" : [ \"logbook.diag.r\" , \"rexroth-deviceadmin.web.licensemanager.r\" ] } In this example, your app would request a token which provides access to the logbook (read-only) and the License Manager backend (read-only). Important The parameter id must match the id that is defined in the Package Manifest (refer to Package Manifest documentation for details)","title":"Define &amp; Provide Permissions (secure-assets)"},{"location":"s2sauth.html#retrieve-and-use-authentication-token-service-token","text":"During runtime, the token will be provided to the application as a file named <id>.token (in the example shown above, this would be myapp.token ) in the service-token folder ( $SNAP_DATA/service-token/${SNAPCRAFT_PROJECT_NAME} ). Important The content of the token file might not be up-to-date when the application is ready, especially after a (re-)start of the system. Using an outdated token will lead to an authentication failure. Therefore, the application must implement a logic which - if the authentication request has failed - parses the token file again and tries to re-authenticate. This must be repeated until the authentication succeeds.","title":"Retrieve and Use Authentication Token (service-token)"},{"location":"samples.html","text":"Sample Projects \u00b6 Applications (snaps) for ctrlX CORE targets can be written in several programming language or even as shell scripts. For creating your own applications, the ctrlX AUTOMATION SDK offers sample projects that can be used directly or as templates. The sample projects are saved in sub folders according to their programming language or their type. Here an overview of the sample project types and their subfolders. Sample Project Type Description Link to Projects C/C++ Samples written in C/C++ samples-cpp/README.md Go Samples written in Go samples-go/README.md Python Samples written in Python samples-python/README.md .NET Samples written in .NET samples-net/README.md Node.js Samples written in Node.js samples-node/README.md Shell Sample shell script samples-sh/README.md Snap Sample package manifest samples-snap/README.md IEC 61131-3 Samples in IEC 61131-3 ST samples-iec61131/README.md Building Snaps \u00b6 Important All project folders are containing these scripts to build snaps: build-snap-amd64.sh : Build an amd64 snap for a ctrlX CORE virtual . build-snap-arm64.sh : Build an arm64 (aarch64) snap for a ctrlX CORE. You can call these scripts from the command line: ./build-snap-amd64.sh ./build-snap-arm64.sh or from Visual Studio Code: Select main menu item Terminal --> Run Build Task Select build snap amd64 for building a snap for a ctrlX CORE virtual Select build snap arm64 for building a snap for a ctrlX CORE. At the end of the build process the snap file should be available in the root folder of your project. Installing a Snap \u00b6 Right click the snap file in the Visual Studio Code EXPLORER and select 'Download'. Visual Studio Code stores it in your home directory on your host computer. For Windows 10 this is %USERPROFILE%, in Linux this is: ~/ Start a Web browser, login into your ctrlX CORE: Select Settings - Apps Switch to Service Mode Click Install from file Select the downloaded file Switch to Operation Mode","title":"Overview"},{"location":"samples.html#sample-projects","text":"Applications (snaps) for ctrlX CORE targets can be written in several programming language or even as shell scripts. For creating your own applications, the ctrlX AUTOMATION SDK offers sample projects that can be used directly or as templates. The sample projects are saved in sub folders according to their programming language or their type. Here an overview of the sample project types and their subfolders. Sample Project Type Description Link to Projects C/C++ Samples written in C/C++ samples-cpp/README.md Go Samples written in Go samples-go/README.md Python Samples written in Python samples-python/README.md .NET Samples written in .NET samples-net/README.md Node.js Samples written in Node.js samples-node/README.md Shell Sample shell script samples-sh/README.md Snap Sample package manifest samples-snap/README.md IEC 61131-3 Samples in IEC 61131-3 ST samples-iec61131/README.md","title":"Sample Projects"},{"location":"samples.html#building-snaps","text":"Important All project folders are containing these scripts to build snaps: build-snap-amd64.sh : Build an amd64 snap for a ctrlX CORE virtual . build-snap-arm64.sh : Build an arm64 (aarch64) snap for a ctrlX CORE. You can call these scripts from the command line: ./build-snap-amd64.sh ./build-snap-arm64.sh or from Visual Studio Code: Select main menu item Terminal --> Run Build Task Select build snap amd64 for building a snap for a ctrlX CORE virtual Select build snap arm64 for building a snap for a ctrlX CORE. At the end of the build process the snap file should be available in the root folder of your project.","title":"Building Snaps"},{"location":"samples.html#installing-a-snap","text":"Right click the snap file in the Visual Studio Code EXPLORER and select 'Download'. Visual Studio Code stores it in your home directory on your host computer. For Windows 10 this is %USERPROFILE%, in Linux this is: ~/ Start a Web browser, login into your ctrlX CORE: Select Settings - Apps Switch to Service Mode Click Install from file Select the downloaded file Switch to Operation Mode","title":"Installing a Snap"},{"location":"setup_overview.html","text":"To develop ctrlX CORE applications with the ctrlX AUTOMATION SDK we need a so called App Build Environment which is a Ubuntu 20.04 Linux operating system with a special set of software packages installed and certain settings. The chapter Quick Start Guide provides the fastest way to create an app with one of the SDKs sample projects. In ctrlX WORKS App Build Environment the recommended way creating and running an App Build Environment is described. If ctrlX WORKS cannot be used the chapter QEMU Virtual Machine shows how QEMU can be installed as standalone app and how a QEMU VM can be setup as App Build Environment. VirtualBox Virtual Machine describes how to setup such a VM to use it as App Build Environment. Native Ubuntu 20.04 shows how to setup a bare-metal machine to use it as App Build Environment.","title":"Setup Overview"},{"location":"setup_qemu_ctrlx_works.html","text":"If in the ctrlX WORKS setup the function 'ctrlX CORE App Build Environment' is enabled ctrlX WORKS allows to create App Build Environments. Internally these are QEMU Virtual Machines running Ubuntu server 20.04 LTS which are configured during first startup. From the ctrlX WORKS UI each environment can be started, stopped or deleted. Furthermore a SSH shell can be started to login. Apart from ctrlX WORKS and px.exe, no other software tools are required. Installation of the App Build Environment Function in ctrlX WORKS \u00b6 During the ctrlX WORKS setup select function 'ctrlX CORE App Build Environment'. Out of an already installed ctrlX WORKS you can start the setup wizard with Settings - Setup - Add or remove features. Handling of App Build Environments \u00b6 Select App Build Environments on the side bar of ctrlX WORKS. The list of installed App Build Environments will be shown. Create an App Build Environment \u00b6 Click the + icon in the right corner of the page. The dialog 'Add ctrlX CORE App Build Environment' will appear. Now the new instance can be configured. Name: Enter a unique name. Storage location: Enter/select a destination directory where the files are stored. Port forwarding: Here prot forwardings from the Windows host to the VM guest are defined. Per default for SSH the port 10022 of the Windows host is forwarded to port 22 of the guest VM. Do NOT change 22! You can change 10022 if you want to run several environments concurrently. Select 'Use HTTP and HTTPS proxy on localhost:3128' if your host is behind a proxy. In this case install and run px.exe Create a new Add Build Environment with OK or abort with Cancel Important The new environment has a default user acount boschrexroth:boschrexroth Start an App Build Environment \u00b6 Start a App Build Environment with the play > icon. On first start the Ubuntu image will be downloaded and the environment will be installed. This will take some time. During this state no login will be possible. When this process is complete the VM will shutdown. Click the play icon again to restart. When the environment is up ctrlX WORKS will show 'Online' in column State. Working with an App Build Environment \u00b6 You can open a SSH connection (secure shell) by clicking the according link in the column SSH of ctrlX WORKS 'App Build Environments' view. For the login a password is required, it is boschrexroth . We recommend to add your public key in the hosts id_rsa.pub file to the file authorized_keys in the VMs directory /home/boschrexroth/.ssh/. So password input on each login is obsolete. Therefor you can use the bat file ssh-keygen-copy-id.bat in the destination directory of the VM (see below). Please regard instructions in chapter Important Install Scripts . Stop an App Build Environment \u00b6 Click the Stop icon. If your public key id_rsa.pub is not contained in ~/.ssh/authorized_keys you will be asked for a password. If the login succeeded the poweroff command will be send - the environment will shut down safely. Important Do NOT stop the environment by clicking the close icon in the title bar of the console window! This can damage the file system of your environment. Change an App Build Environment \u00b6 If the environment has the State Offline a click of the Pencil icon opens the configuration page. Important Once created the parameters 'Storage location' and 'Use HTTP...' cannot be changed. Delete an App Build Environment \u00b6 If the environment is Offline you can delete it by clicking the Waste Bin icon. The whole folder will be deleted. Helper Functions \u00b6 The storage location folder on your host system for each environment also contains two helper bat files which can be useful: ssh-keygen-copy-id.bat Adds your public key id_rsa.pub to the ~/.ssh/authorized_keys file of the environment to avoid password input on each login. You will be asked for the SSHPORT, enter the host port (e.g. 10022) here. shrink-qcow2.bat The snapshot file of an environment can get very big. With this script you can shrink it. Important The environment must be stopped. The shrinking process can take a while - Do NOT abort it.","title":"ctrlX WORKS App Build Environment"},{"location":"setup_qemu_ctrlx_works.html#installation-of-the-app-build-environment-function-in-ctrlx-works","text":"During the ctrlX WORKS setup select function 'ctrlX CORE App Build Environment'. Out of an already installed ctrlX WORKS you can start the setup wizard with Settings - Setup - Add or remove features.","title":"Installation of the App Build Environment Function in ctrlX WORKS"},{"location":"setup_qemu_ctrlx_works.html#handling-of-app-build-environments","text":"Select App Build Environments on the side bar of ctrlX WORKS. The list of installed App Build Environments will be shown.","title":"Handling of App Build Environments"},{"location":"setup_qemu_ctrlx_works.html#create-an-app-build-environment","text":"Click the + icon in the right corner of the page. The dialog 'Add ctrlX CORE App Build Environment' will appear. Now the new instance can be configured. Name: Enter a unique name. Storage location: Enter/select a destination directory where the files are stored. Port forwarding: Here prot forwardings from the Windows host to the VM guest are defined. Per default for SSH the port 10022 of the Windows host is forwarded to port 22 of the guest VM. Do NOT change 22! You can change 10022 if you want to run several environments concurrently. Select 'Use HTTP and HTTPS proxy on localhost:3128' if your host is behind a proxy. In this case install and run px.exe Create a new Add Build Environment with OK or abort with Cancel Important The new environment has a default user acount boschrexroth:boschrexroth","title":"Create an App Build Environment"},{"location":"setup_qemu_ctrlx_works.html#start-an-app-build-environment","text":"Start a App Build Environment with the play > icon. On first start the Ubuntu image will be downloaded and the environment will be installed. This will take some time. During this state no login will be possible. When this process is complete the VM will shutdown. Click the play icon again to restart. When the environment is up ctrlX WORKS will show 'Online' in column State.","title":"Start an App Build Environment"},{"location":"setup_qemu_ctrlx_works.html#working-with-an-app-build-environment","text":"You can open a SSH connection (secure shell) by clicking the according link in the column SSH of ctrlX WORKS 'App Build Environments' view. For the login a password is required, it is boschrexroth . We recommend to add your public key in the hosts id_rsa.pub file to the file authorized_keys in the VMs directory /home/boschrexroth/.ssh/. So password input on each login is obsolete. Therefor you can use the bat file ssh-keygen-copy-id.bat in the destination directory of the VM (see below). Please regard instructions in chapter Important Install Scripts .","title":"Working with an App Build Environment"},{"location":"setup_qemu_ctrlx_works.html#stop-an-app-build-environment","text":"Click the Stop icon. If your public key id_rsa.pub is not contained in ~/.ssh/authorized_keys you will be asked for a password. If the login succeeded the poweroff command will be send - the environment will shut down safely. Important Do NOT stop the environment by clicking the close icon in the title bar of the console window! This can damage the file system of your environment.","title":"Stop an App Build Environment"},{"location":"setup_qemu_ctrlx_works.html#change-an-app-build-environment","text":"If the environment has the State Offline a click of the Pencil icon opens the configuration page. Important Once created the parameters 'Storage location' and 'Use HTTP...' cannot be changed.","title":"Change an App Build Environment"},{"location":"setup_qemu_ctrlx_works.html#delete-an-app-build-environment","text":"If the environment is Offline you can delete it by clicking the Waste Bin icon. The whole folder will be deleted.","title":"Delete an App Build Environment"},{"location":"setup_qemu_ctrlx_works.html#helper-functions","text":"The storage location folder on your host system for each environment also contains two helper bat files which can be useful: ssh-keygen-copy-id.bat Adds your public key id_rsa.pub to the ~/.ssh/authorized_keys file of the environment to avoid password input on each login. You will be asked for the SSHPORT, enter the host port (e.g. 10022) here. shrink-qcow2.bat The snapshot file of an environment can get very big. With this script you can shrink it. Important The environment must be stopped. The shrinking process can take a while - Do NOT abort it.","title":"Helper Functions"},{"location":"setup_qemu_ubuntu.html","text":"Important We recommend to use ctrlX WORKS setting up and operating an App Build Environment. This guide is only for use cases where ctrlX WORKS cannot be used. Creating and running an App Build Environment for the ctrlX AUTOMATION SDK is possible because the SDK archive contains all configuration and script files. This is the recommended constellation: The QEMU software should be run on an AMD64 based host computer with hardware acceleration. QEMU supports both Windows 10 and Linux host systems. For the QEMU virtual machine also AMD64 should be selected as CPU architecture. This combination provides best performance conditions. The installation of QEMU, further required tools and QEMU virtual machines is described in the next chapters. Preparations \u00b6 Download the archive ctrlX AUTOMATION SDK from github boschrexroth/ctrlx-automation-sdk/releases to your host computer and unpack at least the folder public/scripts/environment . This folder contains all necessary files and scripts for both Windows 10 and Linux hosts. Install QEMU \u00b6 Linux Host \u00b6 Change to the SDK folder public/scripts/environment and set x file permissions: $ chmod a+x *.sh Install QEMU on Linux Host \u00b6 Because the newest QEMU software is not provided as Debian package we have to download the source files, compile the project and install the binaries. This is done automatically by the script install-qemu-on-host.sh stored in the SDK folder public/scripts/environment/ . To install QEMU do following steps: Copy the script install-qemu-on-host.sh into a tempory folder on your Linux host computer. Change to the temporary folder and start these commands: $ chmod a+x install-qemu-on-host.sh $ sudo ./install-qemu-on-host.sh This procedure will take some time - at the end QEMU is installed. Install KVM on Linux Host \u00b6 We recommend to install KVM (Kernel-based Virtual Machine) on your host sytem. Change to the SDK folder public/scripts/environment and start ./install-kvm-on-host.sh See here for further informations: How to Install Kvm on Ubuntu 20.04 linux-kvm Windows 10 Host \u00b6 Install QEMU on Windows 10 Host \u00b6 Download and install the newest version of QEMU for Windows from https://qemu.weilnetz.de/w64/ . Important Add the installation path of your qemu software to the system environment variable %PATH%. See How do I set or change the PATH system variable? Install Windows Hypervisor Platform \u00b6 We recommend to install Windows Hypervisor Platform : Right click on the Windows button and select \u2018Apps and Features\u2019. Select Programs and Features on the right under related settings. Select Turn Windows Features on or off. Select Windows Hypervisor Platform - NOT Hyper-V. Close dialog with OK. This feature can also be installed via command line: Start cmd.exe as administrator (run as ...) Enter dism /online /Enable-Feature /FeatureName:HypervisorPlatform /All Hints: After enabling Windows Hypervisor Platform a system restart may be required. The feature Hyper-V is automatically disabled. You can disable the feature with: dism /online /Disable-Feature /FeatureName:HypervisorPlatform If you use Virtual Box also please enable the internal Hyper-V option for each virtual machine. If Windows Hypervisor Platform cannot be installed for any reason, we recommend using the Intel Hardware Accelerated Execution Manager (HAXM). The installation is described here Installing HAXM Install Px.exe as Local Proxy Server \u00b6 See Use PX.exe as Local Proxy on a Windows Host . Create an Instance of an AMD64 QEMU Virtual Machine \u00b6 A virtual machine should be installed and started within a separate folder on your host computer. Therefor SDK folder public/scripts/environment contains these scripts: create-new-vm-amd64-noproxy.bat, .sh : creates an AMD64 VM with direct internet access create-new-vm-amd64-proxy.bat, .sh : creates an AMD64 VM using a proxy server These scripts are expecting the destination folder of your new VM as argument. To create e.g. a new amd64 VM instance with proxy usage on a Windows host do following steps: Create a separate folder on your host computer D:\\qemuvm\\amd64-proxy-1 Start cmd.exe Change to the SDK folder public/scripts/environment Call create-new-vm-amd64-proxy.bat D:\\qemuvm\\amd64-proxy-1 All necessary files for this new VM are copied into the destination folder. Notice: The aarch64 .bat/.sh__ files are obsolete and should not be used. Running a QEMU Virtual Machine \u00b6 Start the QEMU Virtual Machine \u00b6 To start the QEMU VM instance change to its installation folder and run one of these script files: launch-amd64-noproxy.bat, .sh : If the VM has direct internet access launch-amd64-proxy.bat, .sh : If the VM has to use a proxy server on the host computer The VM is started as console application, you can see the trace output. We recommend to not use this console directly because a lot of shell functions are not supported. During first boot a lot of software will be installed - so please be patient. If this process is finished the VM will shutdown. Just run the launch script to restart the VM. Network Connection to your QEMU Virtual Machine \u00b6 From the point of view of your host computer, the VM does not have own network interface cards. Services running on the VM are available via port forwarding . This port forwarding is configured in the launch... script with one or more hostfwd= settings e.g.: -netdev user,id=eth0,hostfwd=tcp::10022-:22 Here port 10022 of the host is forwarded to port 22 (SSH) of the VM. If port 10022 is used on the host the VM will not start. In this case please enter a free host port number in the launch script e.g. 20022. For forwarding further ports e.g. 502 (Modbus) just extend this line e.g.: -netdev user,id=eth0,hostfwd=tcp::10022-:22,hostfwd=tcp::502-:502 Important From your host computer a SSH connection can be established using 127.0.0.1:10022 During the first connection with Visual Studio Code enter: ssh -p 10022 boschrexroth@127.0.0.1 password is boschrexroth Install the ctrlX AUTOMATION SDK and Additional Software After First Boot \u00b6 Start your VM, from your host start a SSH session and login with boschrexroth/boschrexroth . Please regard instructions in chapter Important Install Scripts . Shutdown \u00b6 It's very important to shutdown the QEMU VM properly. So initiate a shutdown e.g. with this command on your VM console: sudo poweroff QEMU Virtual Machine Networking \u00b6 The QEMU software represents a virtual network between the host operating system and the virtual machine. Important This virtual network is only seen by the virtual machine NOT by the host operating system. Furthermore QEMU provides a gateway, a DNS and an optional SMB server for its VM. Per default this virtual network has the subnet 10.0.2.0/24 and from the perspective of the QEMU VM these IP addresses are assigned: 10.0.2.15 IP address of the VM itself 10.0.2.2 Gateway and host operating system 10.0.2.3 DNS server 10.0.2.4 SMB server For deeper information visit QEMU Documentation/Networking Troubleshooting, Tips \u00b6 General \u00b6 Read error messages carefully, search in the internet for these messages and hints for troubleshooting. Performance \u00b6 Deactivate all other virtual machines on your host to avoid performance disadvantages. An emulated AARCH64 QEMU VM is slow - be patient. http/https Access \u00b6 Check the http/https access of your host to the internet - respectively to the Ubuntu sites e.g. with: wget -p http://ports.ubuntu.com/ubuntu-ports If failed check your DNS settings and server(s). Snap Store Status \u00b6 Check the Snap Store Status if snaps cannot be installed. WinSCP and Putty \u00b6 On your Windows host you can use WinSCP combined with PuTTy instead of the Windows ssh and scp.","title":"QEMU Virtual Machine"},{"location":"setup_qemu_ubuntu.html#preparations","text":"Download the archive ctrlX AUTOMATION SDK from github boschrexroth/ctrlx-automation-sdk/releases to your host computer and unpack at least the folder public/scripts/environment . This folder contains all necessary files and scripts for both Windows 10 and Linux hosts.","title":"Preparations"},{"location":"setup_qemu_ubuntu.html#install-qemu","text":"","title":"Install QEMU"},{"location":"setup_qemu_ubuntu.html#linux-host","text":"Change to the SDK folder public/scripts/environment and set x file permissions: $ chmod a+x *.sh","title":"Linux Host"},{"location":"setup_qemu_ubuntu.html#install-qemu-on-linux-host","text":"Because the newest QEMU software is not provided as Debian package we have to download the source files, compile the project and install the binaries. This is done automatically by the script install-qemu-on-host.sh stored in the SDK folder public/scripts/environment/ . To install QEMU do following steps: Copy the script install-qemu-on-host.sh into a tempory folder on your Linux host computer. Change to the temporary folder and start these commands: $ chmod a+x install-qemu-on-host.sh $ sudo ./install-qemu-on-host.sh This procedure will take some time - at the end QEMU is installed.","title":"Install QEMU on Linux Host"},{"location":"setup_qemu_ubuntu.html#install-kvm-on-linux-host","text":"We recommend to install KVM (Kernel-based Virtual Machine) on your host sytem. Change to the SDK folder public/scripts/environment and start ./install-kvm-on-host.sh See here for further informations: How to Install Kvm on Ubuntu 20.04 linux-kvm","title":"Install KVM on Linux Host"},{"location":"setup_qemu_ubuntu.html#windows-10-host","text":"","title":"Windows 10 Host"},{"location":"setup_qemu_ubuntu.html#install-qemu-on-windows-10-host","text":"Download and install the newest version of QEMU for Windows from https://qemu.weilnetz.de/w64/ . Important Add the installation path of your qemu software to the system environment variable %PATH%. See How do I set or change the PATH system variable?","title":"Install QEMU on Windows 10 Host"},{"location":"setup_qemu_ubuntu.html#install-windows-hypervisor-platform","text":"We recommend to install Windows Hypervisor Platform : Right click on the Windows button and select \u2018Apps and Features\u2019. Select Programs and Features on the right under related settings. Select Turn Windows Features on or off. Select Windows Hypervisor Platform - NOT Hyper-V. Close dialog with OK. This feature can also be installed via command line: Start cmd.exe as administrator (run as ...) Enter dism /online /Enable-Feature /FeatureName:HypervisorPlatform /All Hints: After enabling Windows Hypervisor Platform a system restart may be required. The feature Hyper-V is automatically disabled. You can disable the feature with: dism /online /Disable-Feature /FeatureName:HypervisorPlatform If you use Virtual Box also please enable the internal Hyper-V option for each virtual machine. If Windows Hypervisor Platform cannot be installed for any reason, we recommend using the Intel Hardware Accelerated Execution Manager (HAXM). The installation is described here Installing HAXM","title":"Install Windows Hypervisor Platform"},{"location":"setup_qemu_ubuntu.html#install-pxexe-as-local-proxy-server","text":"See Use PX.exe as Local Proxy on a Windows Host .","title":"Install Px.exe as Local Proxy Server"},{"location":"setup_qemu_ubuntu.html#create-an-instance-of-an-amd64-qemu-virtual-machine","text":"A virtual machine should be installed and started within a separate folder on your host computer. Therefor SDK folder public/scripts/environment contains these scripts: create-new-vm-amd64-noproxy.bat, .sh : creates an AMD64 VM with direct internet access create-new-vm-amd64-proxy.bat, .sh : creates an AMD64 VM using a proxy server These scripts are expecting the destination folder of your new VM as argument. To create e.g. a new amd64 VM instance with proxy usage on a Windows host do following steps: Create a separate folder on your host computer D:\\qemuvm\\amd64-proxy-1 Start cmd.exe Change to the SDK folder public/scripts/environment Call create-new-vm-amd64-proxy.bat D:\\qemuvm\\amd64-proxy-1 All necessary files for this new VM are copied into the destination folder. Notice: The aarch64 .bat/.sh__ files are obsolete and should not be used.","title":"Create an Instance of an AMD64 QEMU Virtual Machine"},{"location":"setup_qemu_ubuntu.html#running-a-qemu-virtual-machine","text":"","title":"Running a QEMU Virtual Machine"},{"location":"setup_qemu_ubuntu.html#start-the-qemu-virtual-machine","text":"To start the QEMU VM instance change to its installation folder and run one of these script files: launch-amd64-noproxy.bat, .sh : If the VM has direct internet access launch-amd64-proxy.bat, .sh : If the VM has to use a proxy server on the host computer The VM is started as console application, you can see the trace output. We recommend to not use this console directly because a lot of shell functions are not supported. During first boot a lot of software will be installed - so please be patient. If this process is finished the VM will shutdown. Just run the launch script to restart the VM.","title":"Start the QEMU Virtual Machine"},{"location":"setup_qemu_ubuntu.html#network-connection-to-your-qemu-virtual-machine","text":"From the point of view of your host computer, the VM does not have own network interface cards. Services running on the VM are available via port forwarding . This port forwarding is configured in the launch... script with one or more hostfwd= settings e.g.: -netdev user,id=eth0,hostfwd=tcp::10022-:22 Here port 10022 of the host is forwarded to port 22 (SSH) of the VM. If port 10022 is used on the host the VM will not start. In this case please enter a free host port number in the launch script e.g. 20022. For forwarding further ports e.g. 502 (Modbus) just extend this line e.g.: -netdev user,id=eth0,hostfwd=tcp::10022-:22,hostfwd=tcp::502-:502 Important From your host computer a SSH connection can be established using 127.0.0.1:10022 During the first connection with Visual Studio Code enter: ssh -p 10022 boschrexroth@127.0.0.1 password is boschrexroth","title":"Network Connection to your QEMU Virtual Machine"},{"location":"setup_qemu_ubuntu.html#install-the-ctrlx-automation-sdk-and-additional-software-after-first-boot","text":"Start your VM, from your host start a SSH session and login with boschrexroth/boschrexroth . Please regard instructions in chapter Important Install Scripts .","title":"Install the ctrlX AUTOMATION SDK and Additional Software After First Boot"},{"location":"setup_qemu_ubuntu.html#shutdown","text":"It's very important to shutdown the QEMU VM properly. So initiate a shutdown e.g. with this command on your VM console: sudo poweroff","title":"Shutdown"},{"location":"setup_qemu_ubuntu.html#qemu-virtual-machine-networking","text":"The QEMU software represents a virtual network between the host operating system and the virtual machine. Important This virtual network is only seen by the virtual machine NOT by the host operating system. Furthermore QEMU provides a gateway, a DNS and an optional SMB server for its VM. Per default this virtual network has the subnet 10.0.2.0/24 and from the perspective of the QEMU VM these IP addresses are assigned: 10.0.2.15 IP address of the VM itself 10.0.2.2 Gateway and host operating system 10.0.2.3 DNS server 10.0.2.4 SMB server For deeper information visit QEMU Documentation/Networking","title":"QEMU Virtual Machine Networking"},{"location":"setup_qemu_ubuntu.html#troubleshooting-tips","text":"","title":"Troubleshooting, Tips"},{"location":"setup_qemu_ubuntu.html#general","text":"Read error messages carefully, search in the internet for these messages and hints for troubleshooting.","title":"General"},{"location":"setup_qemu_ubuntu.html#performance","text":"Deactivate all other virtual machines on your host to avoid performance disadvantages. An emulated AARCH64 QEMU VM is slow - be patient.","title":"Performance"},{"location":"setup_qemu_ubuntu.html#httphttps-access","text":"Check the http/https access of your host to the internet - respectively to the Ubuntu sites e.g. with: wget -p http://ports.ubuntu.com/ubuntu-ports If failed check your DNS settings and server(s).","title":"http/https Access"},{"location":"setup_qemu_ubuntu.html#snap-store-status","text":"Check the Snap Store Status if snaps cannot be installed.","title":"Snap Store Status"},{"location":"setup_qemu_ubuntu.html#winscp-and-putty","text":"On your Windows host you can use WinSCP combined with PuTTy instead of the Windows ssh and scp.","title":"WinSCP and Putty"},{"location":"setup_ubuntu.html","text":"You can use a bare-metal machine with an Ubuntu Desktop or Ubuntu Server operating system to develop apps with the ctrlX AUTOMATION SDK. The installation of the required packages, the SDK itself and some of the programming language installation scripts is equal to the procedure for a VirtualBox Virtual Machine. You can find the informations in VirtualBox Virtual Machine from chapter 'Setup Standard Packages' to the end of the document.","title":"Native Ubuntu 20.04"},{"location":"setup_windows_virtualbox_ubuntu.html","text":"This guide shows how to use an Ubuntu Desktop running in a virtual machine using the VirtualBox on a Windows 10 host system as a development environment to develop ctrlX AUTOMATION apps. Prerequisites \u00b6 Can only be installed on AMD64/Intel64 host computer systems. You need to have admin rights on your host to be able to install the software. Install VirtualBox \u00b6 The software can be downloaded from here: https://www.virtualbox.org/. Setup Virtual Machine and install Ubuntu Desktop 20.04 LTS \u00b6 Download an iso-image from https://old-releases.ubuntu.com/releases/focal/ Create a virtual machine, select these settings: min 8 GB Ram min. 15 GB Disk, VDI Type all processors insert Ubuntu *.iso into virtual CD Drive Map free internet connection via network settings (Adapter 1, Bridged Adapter) Map real/virtual control via network settings (Adapter 2, Bridged Adapter) Start machine and follow installation instructions. Install Virtual Box GuestAdditions. Configure IP Address to connect to your control. Running the Virtual Machine \u00b6 Start a SSH session and login into your virtual machine. Setup Corporate Proxy (Optional) \u00b6 If you are in a corporate environment, which uses a http/https-Proxy, then you may want to set the proxy configuration to be able to download software from within your VM. For this, you need to run a proxy on your Windows environment and redirect the distribution to this proxy running on localhost. If you are directly connected to a router or the internet, then this step can be skipped. A recommended proxy program to be used on your Windows host system is https://github.com/genotrance/px . To set the environment variable in the distribution use: sudo nano /etc/environment Add the following variables: http_proxy=\"http://10.0.2.2:3128\" https_proxy=\"http://10.0.2.2:3128\" HTTP_PROXY=\"http://10.0.2.2:3128\" HTTPS_PROXY=\"http://10.0.2.2:3128\" You need to set this configuration also for wget . sudo nano /etc/wgetrc Search for the http proxy settings and make sure you configure: https_proxy = http://10.0.2.2:3128/ http_proxy = http://10.0.2.2:3128/ use_proxy = on You might want to update your distribution and install essential packages for development. sudo apt update sudo apt upgrade Setup Standard Packages \u00b6 Packages in QEMU based VMs created by ctrlX WORKS are installed automatically. In the configuration file cloud-config-amd64 these packages are listed under the section packages: You can copy the list and create an install command, e.g. packages: - ssh - zip - unzip ... sudo apt-get install -y ssh zip unzip ... Important Install ALL listed packages. Dependencies for Crossbuild (Multiarch) \u00b6 Multiarch lets you install library packages from multiple architectures on the some machine. In our case we use the architectures amd64 and arm64. The according commands are also available in cloud-config-amd64 . Therefor copy the commands under section runcmd: subtitle '# https://wiki.ubuntu.com/MultiarchSpec' and '# Qualify architecture' sudo dpkg --add-architecture arm64 ... Important Run ALL listed commands. Furthermore run: sudo apt-get -y update sudo apt-get -y upgrade sudo apt-get -y install libsystemd-dev:arm64 sudo apt-get -y install libsystemd-dev:amd64 sudo apt-get -y install libssl-dev:amd64 sudo apt-get -y install libssl-dev:arm64 sudo apt-get -y install libzmq3-dev:amd64 sudo apt-get -y install libzmq3-dev:arm64 Important Install Scripts \u00b6 In chapter Important Install Scripts all install scripts of a QEMU VM created by ctrlX WORKS are explained. These scripts can be copied from the file cloud-config-amd64 . Open this file with a web browser by clicking the link, copy the according lines into new script files on your VM, set the x permission and run them. Each script file in cloud-config-amd64 is identified with a comment e.g. # install-sdk.sh, skip the line - content: and copy all lines until # Create in /tmp ... Important Running install-sdk.sh is mandatory.","title":"VirtualBox Virtual Machine"},{"location":"setup_windows_virtualbox_ubuntu.html#prerequisites","text":"Can only be installed on AMD64/Intel64 host computer systems. You need to have admin rights on your host to be able to install the software.","title":"Prerequisites"},{"location":"setup_windows_virtualbox_ubuntu.html#install-virtualbox","text":"The software can be downloaded from here: https://www.virtualbox.org/.","title":"Install VirtualBox"},{"location":"setup_windows_virtualbox_ubuntu.html#setup-virtual-machine-and-install-ubuntu-desktop-2004-lts","text":"Download an iso-image from https://old-releases.ubuntu.com/releases/focal/ Create a virtual machine, select these settings: min 8 GB Ram min. 15 GB Disk, VDI Type all processors insert Ubuntu *.iso into virtual CD Drive Map free internet connection via network settings (Adapter 1, Bridged Adapter) Map real/virtual control via network settings (Adapter 2, Bridged Adapter) Start machine and follow installation instructions. Install Virtual Box GuestAdditions. Configure IP Address to connect to your control.","title":"Setup Virtual Machine and install Ubuntu Desktop 20.04 LTS"},{"location":"setup_windows_virtualbox_ubuntu.html#running-the-virtual-machine","text":"Start a SSH session and login into your virtual machine.","title":"Running the Virtual Machine"},{"location":"setup_windows_virtualbox_ubuntu.html#setup-corporate-proxy-optional","text":"If you are in a corporate environment, which uses a http/https-Proxy, then you may want to set the proxy configuration to be able to download software from within your VM. For this, you need to run a proxy on your Windows environment and redirect the distribution to this proxy running on localhost. If you are directly connected to a router or the internet, then this step can be skipped. A recommended proxy program to be used on your Windows host system is https://github.com/genotrance/px . To set the environment variable in the distribution use: sudo nano /etc/environment Add the following variables: http_proxy=\"http://10.0.2.2:3128\" https_proxy=\"http://10.0.2.2:3128\" HTTP_PROXY=\"http://10.0.2.2:3128\" HTTPS_PROXY=\"http://10.0.2.2:3128\" You need to set this configuration also for wget . sudo nano /etc/wgetrc Search for the http proxy settings and make sure you configure: https_proxy = http://10.0.2.2:3128/ http_proxy = http://10.0.2.2:3128/ use_proxy = on You might want to update your distribution and install essential packages for development. sudo apt update sudo apt upgrade","title":"Setup Corporate Proxy (Optional)"},{"location":"setup_windows_virtualbox_ubuntu.html#setup-standard-packages","text":"Packages in QEMU based VMs created by ctrlX WORKS are installed automatically. In the configuration file cloud-config-amd64 these packages are listed under the section packages: You can copy the list and create an install command, e.g. packages: - ssh - zip - unzip ... sudo apt-get install -y ssh zip unzip ... Important Install ALL listed packages.","title":"Setup Standard Packages"},{"location":"setup_windows_virtualbox_ubuntu.html#dependencies-for-crossbuild-multiarch","text":"Multiarch lets you install library packages from multiple architectures on the some machine. In our case we use the architectures amd64 and arm64. The according commands are also available in cloud-config-amd64 . Therefor copy the commands under section runcmd: subtitle '# https://wiki.ubuntu.com/MultiarchSpec' and '# Qualify architecture' sudo dpkg --add-architecture arm64 ... Important Run ALL listed commands. Furthermore run: sudo apt-get -y update sudo apt-get -y upgrade sudo apt-get -y install libsystemd-dev:arm64 sudo apt-get -y install libsystemd-dev:amd64 sudo apt-get -y install libssl-dev:amd64 sudo apt-get -y install libssl-dev:arm64 sudo apt-get -y install libzmq3-dev:amd64 sudo apt-get -y install libzmq3-dev:arm64","title":"Dependencies for Crossbuild (Multiarch)"},{"location":"setup_windows_virtualbox_ubuntu.html#important-install-scripts","text":"In chapter Important Install Scripts all install scripts of a QEMU VM created by ctrlX WORKS are explained. These scripts can be copied from the file cloud-config-amd64 . Open this file with a web browser by clicking the link, copy the according lines into new script files on your VM, set the x permission and run them. Each script file in cloud-config-amd64 is identified with a comment e.g. # install-sdk.sh, skip the line - content: and copy all lines until # Create in /tmp ... Important Running install-sdk.sh is mandatory.","title":"Important Install Scripts"},{"location":"ssh_connection.html","text":"Using SSH to Connect to a Virtual Machine \u00b6 Overview \u00b6 Regardless of whether you want to connect to a VM or a real machine, \"Secure Shell\" (SSH) is used. The SSH address of a virtual machine running with default port forwarding is localhost:10022 Here port 10022 of the host is forwarded to port 22 of the virtual machine (guest)). The address of real machine is IP:22 e.g. 192.168.1.1:22 The most important SSH tools are available for Windows and Linux: ssh is secure shell scp is secure copy Public Key Authentication \u00b6 Instead of user/password authentication, we recommend public key authentication . Here you have a privat key and a public key (text) file. The public key file is copied to the computer you want to connect to, the private key is secret. SSH tools are using you private key during a SSH connection instead of user/password. Creating a key pair and copy it to the remote computer is described here: What is SSH Public Key authentication? Port Specification for ssh and scp \u00b6 Port 22 is the default port for a SSH connection. To communicate with a VM running with port forwarding you have to specify the port number e.g. scp -p 10022 ... scp - P 10022 ... ssh-copy-id -p 10022 ... Important scp expects it's option P in uppercase! Git Bash for Windows 10 Hosts \u00b6 Because ssh-copy-id isn't available under Windows you can install Git for Windows which provides Git Bash . From a git bash session you can call ssh-copy-id as shown above.","title":"SSH Connection"},{"location":"ssh_connection.html#using-ssh-to-connect-to-a-virtual-machine","text":"","title":"Using SSH to Connect to a Virtual Machine"},{"location":"ssh_connection.html#overview","text":"Regardless of whether you want to connect to a VM or a real machine, \"Secure Shell\" (SSH) is used. The SSH address of a virtual machine running with default port forwarding is localhost:10022 Here port 10022 of the host is forwarded to port 22 of the virtual machine (guest)). The address of real machine is IP:22 e.g. 192.168.1.1:22 The most important SSH tools are available for Windows and Linux: ssh is secure shell scp is secure copy","title":"Overview"},{"location":"ssh_connection.html#public-key-authentication","text":"Instead of user/password authentication, we recommend public key authentication . Here you have a privat key and a public key (text) file. The public key file is copied to the computer you want to connect to, the private key is secret. SSH tools are using you private key during a SSH connection instead of user/password. Creating a key pair and copy it to the remote computer is described here: What is SSH Public Key authentication?","title":"Public Key Authentication"},{"location":"ssh_connection.html#port-specification-for-ssh-and-scp","text":"Port 22 is the default port for a SSH connection. To communicate with a VM running with port forwarding you have to specify the port number e.g. scp -p 10022 ... scp - P 10022 ... ssh-copy-id -p 10022 ... Important scp expects it's option P in uppercase!","title":"Port Specification for ssh and scp"},{"location":"ssh_connection.html#git-bash-for-windows-10-hosts","text":"Because ssh-copy-id isn't available under Windows you can install Git for Windows which provides Git Bash . From a git bash session you can call ssh-copy-id as shown above.","title":"Git Bash for Windows 10 Hosts"},{"location":"tpm2.html","text":"TPM2 \u00b6 Introduction \u00b6 The ctrlX CORE devices provide the capability to securely generate and store keys with a hardware security module, specifically a Trusted Platform Module 2.0 (TPM2). This TPM can be used additionally to Certificate Management described in Getting Started - Package Manifest . Connecting apps to the TPM2 \u00b6 The app.deviceadmin provides a socket interface, which allows to use the TPM2. Behind the scenes, there is a \"Access Broker/Ressource Manager\" working, managing concurrent sessions accessing the TPM2. Following steps are necessary to connect to TPM2 socket: Adapt your snapcraft.yaml Needed plugs tpm2-socket: Provides your snap with the tpm2.sock file. (Optional) system-configuration: Provides a file with environment variables for configuring your TSS, called \"envvars\". Provide your app with the plugs Use the TPM inside your application Compile the TSS as you need Source the envvars Use the TSS as usual ... More details on the Trusted Software Stack (TSS) below. Example snapcraft.yaml \u00b6 plugs : tpm2-socket : interface : content content : tpm2-socket target : $SNAP_DATA/tpm2-socket system-configuration : interface : content content : system-configuration target : $SNAP_DATA/system-configuration apps : example-app : [ ... ] plugs : [ tpm2-socket , system-configuration , network ] See also the sample in samples-sh/tpm2.consumer Integration with Certificate Manager \u00b6 If you provide the package-certificate slots, and use the appropriate directory structure, TPM2 usage perfectly integrates into Certificate Manager. Using the TPM2 inside software \u00b6 After having everything in place, the usage of the TPM is straightforward. Instead of connecting to /dev/tpmrm0 , use $SNAP_DATA/tpm2-socket/tpm2.sock . envvars provides you with everything needed, for example: export TPM2TOOLS_TCTI = \"cmd:nc -U $SNAP_DATA /tpm2-socket/tpm2.sock\" Storage Root Key (SRK) \u00b6 The SRK of the TPM is permanently stored at 0x81000001 provided by TPM2_SRK_PARENT environment variable. NOTE Although the SRK is stored in NVRAM of TPM, it cannot be guaranteed to be always present. It must be tolerable by your application, that the SRK was replaced by another key, or even is totally absent. Following two examples or snippets, how to generate the SRK with the correct Primary-Key-Template. echo \"0000000: 0001\" | xxd -r - unique.dat dd if = /dev/zero bs = 1 count = 256 >> unique.dat tpm2_createprimary \\ --hierarchy = owner \\ --key-algorithm = rsa2048:aes128cfb \\ --hash-algorithm = sha256 \\ --key-context = prim.ctx \\ -a 'restricted|decrypt|fixedtpm|fixedparent|sensitivedataorigin|userwithauth|noda' \\ --unique-data = unique.dat In Golang, use following template: import \"github.com/google/go-tpm/tpm2\" var DefaultSrkTemplate = tpm2 . Public { Type : tpm2 . AlgRSA , NameAlg : tpm2 . AlgSHA256 , Attributes : tpm2 . FlagFixedTPM | tpm2 . FlagFixedParent | tpm2 . FlagSensitiveDataOrigin | tpm2 . FlagUserWithAuth | tpm2 . FlagNoDA | tpm2 . FlagRestricted | tpm2 . FlagDecrypt , AuthPolicy : nil , RSAParameters : & tpm2 . RSAParams { Symmetric : & tpm2 . SymScheme { Alg : tpm2 . AlgAES , KeyBits : 128 , Mode : tpm2 . AlgCFB , }, Sign : nil , KeyBits : 2048 , ExponentRaw : 0 , ModulusRaw : make ([] byte , 256 ), }, } For further details for golang, please see the Golang example . Trusted Software Stack \u00b6 You will need some of the following parts of the TSS inside your snap: tpm2-tss https://github.com/tpm2-software/tpm2-tss tpm2-tools https://github.com/tpm2-software/tpm2-tools tpm2-tss-engine https://github.com/tpm2-software/tpm2-tss-engine tpm2-openssl https://github.com/tpm2-software/tpm2-openssl More information and more tools: https://tpm2-software.github.io/ https://github.com/tpm2-software Usage with OpenSSL \u00b6 tpm2-tss-engine as an example, setting first the environment variables: export LD_LIBRARY_PATH = $LD_LIBRARY_PATH : $SNAP /usr/lib/x86_64-linux-gnu/engines-1.1 export OPENSSL_ENGINES = $SNAP /usr/lib/x86_64-linux-gnu/engines-1.1 You can then use OpenSSL option -engine tpm2tss together with files generated by tpm2tss-genkey . Existing keys from tpm2-tools or the Certificate Manager can be converted: tpm2tss-genkey -P $TPM2_SRK_PARENT -u key.pub -r key.priv key.tpm2tss Other languages \u00b6 Useful projects: Golang - https://github.com/google/go-tpm - https://github.com/google/go-tpm-tools - https://github.com/salrashid123/signer Attention If using go-tpm, you need to implement your own functions for opening, reading and writing the TPM socket, as the integrated functions close and reopen the socket with every read/write sequence. See: https://github.com/google/go-tpm/blob/master/tpmutil/run_other.go Python - https://github.com/tpm2-software/tpm2-pytss","title":"TPM2"},{"location":"tpm2.html#tpm2","text":"","title":"TPM2"},{"location":"tpm2.html#introduction","text":"The ctrlX CORE devices provide the capability to securely generate and store keys with a hardware security module, specifically a Trusted Platform Module 2.0 (TPM2). This TPM can be used additionally to Certificate Management described in Getting Started - Package Manifest .","title":"Introduction"},{"location":"tpm2.html#connecting-apps-to-the-tpm2","text":"The app.deviceadmin provides a socket interface, which allows to use the TPM2. Behind the scenes, there is a \"Access Broker/Ressource Manager\" working, managing concurrent sessions accessing the TPM2. Following steps are necessary to connect to TPM2 socket: Adapt your snapcraft.yaml Needed plugs tpm2-socket: Provides your snap with the tpm2.sock file. (Optional) system-configuration: Provides a file with environment variables for configuring your TSS, called \"envvars\". Provide your app with the plugs Use the TPM inside your application Compile the TSS as you need Source the envvars Use the TSS as usual ... More details on the Trusted Software Stack (TSS) below.","title":"Connecting apps to the TPM2"},{"location":"tpm2.html#example-snapcraftyaml","text":"plugs : tpm2-socket : interface : content content : tpm2-socket target : $SNAP_DATA/tpm2-socket system-configuration : interface : content content : system-configuration target : $SNAP_DATA/system-configuration apps : example-app : [ ... ] plugs : [ tpm2-socket , system-configuration , network ] See also the sample in samples-sh/tpm2.consumer","title":"Example snapcraft.yaml"},{"location":"tpm2.html#integration-with-certificate-manager","text":"If you provide the package-certificate slots, and use the appropriate directory structure, TPM2 usage perfectly integrates into Certificate Manager.","title":"Integration with Certificate Manager"},{"location":"tpm2.html#using-the-tpm2-inside-software","text":"After having everything in place, the usage of the TPM is straightforward. Instead of connecting to /dev/tpmrm0 , use $SNAP_DATA/tpm2-socket/tpm2.sock . envvars provides you with everything needed, for example: export TPM2TOOLS_TCTI = \"cmd:nc -U $SNAP_DATA /tpm2-socket/tpm2.sock\"","title":"Using the TPM2 inside software"},{"location":"tpm2.html#storage-root-key-srk","text":"The SRK of the TPM is permanently stored at 0x81000001 provided by TPM2_SRK_PARENT environment variable. NOTE Although the SRK is stored in NVRAM of TPM, it cannot be guaranteed to be always present. It must be tolerable by your application, that the SRK was replaced by another key, or even is totally absent. Following two examples or snippets, how to generate the SRK with the correct Primary-Key-Template. echo \"0000000: 0001\" | xxd -r - unique.dat dd if = /dev/zero bs = 1 count = 256 >> unique.dat tpm2_createprimary \\ --hierarchy = owner \\ --key-algorithm = rsa2048:aes128cfb \\ --hash-algorithm = sha256 \\ --key-context = prim.ctx \\ -a 'restricted|decrypt|fixedtpm|fixedparent|sensitivedataorigin|userwithauth|noda' \\ --unique-data = unique.dat In Golang, use following template: import \"github.com/google/go-tpm/tpm2\" var DefaultSrkTemplate = tpm2 . Public { Type : tpm2 . AlgRSA , NameAlg : tpm2 . AlgSHA256 , Attributes : tpm2 . FlagFixedTPM | tpm2 . FlagFixedParent | tpm2 . FlagSensitiveDataOrigin | tpm2 . FlagUserWithAuth | tpm2 . FlagNoDA | tpm2 . FlagRestricted | tpm2 . FlagDecrypt , AuthPolicy : nil , RSAParameters : & tpm2 . RSAParams { Symmetric : & tpm2 . SymScheme { Alg : tpm2 . AlgAES , KeyBits : 128 , Mode : tpm2 . AlgCFB , }, Sign : nil , KeyBits : 2048 , ExponentRaw : 0 , ModulusRaw : make ([] byte , 256 ), }, } For further details for golang, please see the Golang example .","title":"Storage Root Key (SRK)"},{"location":"tpm2.html#trusted-software-stack","text":"You will need some of the following parts of the TSS inside your snap: tpm2-tss https://github.com/tpm2-software/tpm2-tss tpm2-tools https://github.com/tpm2-software/tpm2-tools tpm2-tss-engine https://github.com/tpm2-software/tpm2-tss-engine tpm2-openssl https://github.com/tpm2-software/tpm2-openssl More information and more tools: https://tpm2-software.github.io/ https://github.com/tpm2-software","title":"Trusted Software Stack"},{"location":"tpm2.html#usage-with-openssl","text":"tpm2-tss-engine as an example, setting first the environment variables: export LD_LIBRARY_PATH = $LD_LIBRARY_PATH : $SNAP /usr/lib/x86_64-linux-gnu/engines-1.1 export OPENSSL_ENGINES = $SNAP /usr/lib/x86_64-linux-gnu/engines-1.1 You can then use OpenSSL option -engine tpm2tss together with files generated by tpm2tss-genkey . Existing keys from tpm2-tools or the Certificate Manager can be converted: tpm2tss-genkey -P $TPM2_SRK_PARENT -u key.pub -r key.priv key.tpm2tss","title":"Usage with OpenSSL"},{"location":"tpm2.html#other-languages","text":"Useful projects: Golang - https://github.com/google/go-tpm - https://github.com/google/go-tpm-tools - https://github.com/salrashid123/signer Attention If using go-tpm, you need to implement your own functions for opening, reading and writing the TPM socket, as the integrated functions close and reopen the socket with every read/write sequence. See: https://github.com/google/go-tpm/blob/master/tpmutil/run_other.go Python - https://github.com/tpm2-software/tpm2-pytss","title":"Other languages"},{"location":"vscode.html","text":"Setup Visual Studio Code to work with the ctrlX AUTOMATION SDK \u00b6 As Integrated Development Environment (IDE) we recommend to use Visual Studio Code. So-called \"extensions\" expand the functionality of this IDE, so that you have all the functions available that are required for the development of ctrlX applications. This chapter describes how to install Visual Studio Code and required extensions. Install Visual Studio Code \u00b6 The installation of Visual Studio Code is described here https://code.visualstudio.com . Important Visual Studio Code is installed on your workstation computer. Install Visual Studio Code Extensions \u00b6 Visual Studio Code is a framework with a lot of plugins - so called extensions. A set of extensions has to be installed to work with the ctrlX AUTOMATION SDK. How to install extensions is described here https://code.visualstudio.com/docs/editor/extension-marketplace Important An extension can be installed LOCAL (=on your workstation computer) and/or REMOTE (=on your remote virtual/real machine). Extensions for Remote Connections \u00b6 If your workstation computer and your App Build Environment is NOT the same, you have to install the 'Remote SSH' extension to establish remote connections (SSH). This extension has to be installed LOCAL . Extensions to Work with the SDK Development Environment \u00b6 In order to work with the sample projects of the SDK you will need to install additional extensions into your build environment . This can be done easily from within Visual Studio Code as soon as you open a project folder. Which extension you need depends from the kind of project you are working with. Visual Studio Code scans the files in the folder and makes proposals. Important If your build environment is not your workstation computer select the \"Install in ...\" option. Here's an example: Install in SSH","title":"Visual Studio Code"},{"location":"vscode.html#setup-visual-studio-code-to-work-with-the-ctrlx-automation-sdk","text":"As Integrated Development Environment (IDE) we recommend to use Visual Studio Code. So-called \"extensions\" expand the functionality of this IDE, so that you have all the functions available that are required for the development of ctrlX applications. This chapter describes how to install Visual Studio Code and required extensions.","title":"Setup Visual Studio Code to work with the ctrlX AUTOMATION SDK"},{"location":"vscode.html#install-visual-studio-code","text":"The installation of Visual Studio Code is described here https://code.visualstudio.com . Important Visual Studio Code is installed on your workstation computer.","title":"Install Visual Studio Code"},{"location":"vscode.html#install-visual-studio-code-extensions","text":"Visual Studio Code is a framework with a lot of plugins - so called extensions. A set of extensions has to be installed to work with the ctrlX AUTOMATION SDK. How to install extensions is described here https://code.visualstudio.com/docs/editor/extension-marketplace Important An extension can be installed LOCAL (=on your workstation computer) and/or REMOTE (=on your remote virtual/real machine).","title":"Install Visual Studio Code Extensions"},{"location":"vscode.html#extensions-for-remote-connections","text":"If your workstation computer and your App Build Environment is NOT the same, you have to install the 'Remote SSH' extension to establish remote connections (SSH). This extension has to be installed LOCAL .","title":"Extensions for Remote Connections"},{"location":"vscode.html#extensions-to-work-with-the-sdk-development-environment","text":"In order to work with the sample projects of the SDK you will need to install additional extensions into your build environment . This can be done easily from within Visual Studio Code as soon as you open a project folder. Which extension you need depends from the kind of project you are working with. Visual Studio Code scans the files in the folder and makes proposals. Important If your build environment is not your workstation computer select the \"Install in ...\" option. Here's an example: Install in SSH","title":"Extensions to Work with the SDK Development Environment"},{"location":"working-with-app-builder-envs.html","text":"This document describes how to work with App Builder Environments (QEMU based VMs). Best Practice working with App Builder Environments \u00b6 We recommend to use App Builder Environments (QEMU VMs) as follows: Create a new App Builder Environment with ctrlX WORKS and start it (the newest version of Ubuntu 20.04 LTS is automatically downloaded). After first boot login and install only necessary additional software components using the install scripts in /home/boschrexroth/e.g.: install-sdk.sh, install-deb.sh and install-go.sh We recommend to work with the free and open source distributed version control system git : Create a repository for your project and clone it into your App Buiulder Environment. Create a new branch for your working package. Do your work within this branch, commit and push your changes as often as it makes sense. If your work is done and all changes are pushed remove your App Builder Environment. Working in such a manner ensures that you are always working with the latest software components and avoids problems with the file size of your App Builder Environment. Furthermore creating backups is superfluous. Create a Backup of your App Builder Environment \u00b6 The file system of an App Builder Environment is loaded from two files. The first one is the Ubuntu cloud image file ubuntu-20.04-server-cloudimg-amd64.img originally downloaded from which has a file size of about 600MB. This file is static - no changes are made during runtime or shutdown of your VM. So there is no need to handle it. The second one is the so called snapshot file ubuntu-20.04-server-cloudimg-amd64-snapshot-proxy.qcow2 . This file can be very big (30 GB and more). All changes are stored into the snapshot files. Our backup procedure handles this file. Important Shutdown your App Builder Environment before you backup the qcow2 file. Prerequisites: The tool qemu-ing is installed by ctrlX WORKS. We assume that ctrlX WORKS is installed in \"c:\\Program Files\\Rexroth\\ctrlX WORKS\\\". If not use your specific installation path to call qemu-ing. Open the storage location of your App Builder Environment. Rename the actual qcow2 file: ren ubuntu-20.04-server-cloudimg-amd64-snapshot-noproxy.qcow2 ubuntu-20.04-server-cloudimg-amd64-snapshot-noproxy.qcow2.bak Convert the bak file to the new qcow2 file: \"c:\\Program Files\\Rexroth\\ctrlX WORKS\\qemu\\qemu-img.exe\" convert ubuntu-20.04-server-cloudimg-amd64-snapshot-noproxy.qcow2.bak -O qcow2 ubuntu-20.04-server-cloudimg-amd64-snapshot-proxy.qcow2 Be patient this process takes some times. The convert process also removes unused blocks - so the new qcow2 file should be smaller than the bak file. Start the App Builder Environment to test the new qcow2 file.","title":"Working with App Builder Environments (QEMU VMs)"},{"location":"working-with-app-builder-envs.html#best-practice-working-with-app-builder-environments","text":"We recommend to use App Builder Environments (QEMU VMs) as follows: Create a new App Builder Environment with ctrlX WORKS and start it (the newest version of Ubuntu 20.04 LTS is automatically downloaded). After first boot login and install only necessary additional software components using the install scripts in /home/boschrexroth/e.g.: install-sdk.sh, install-deb.sh and install-go.sh We recommend to work with the free and open source distributed version control system git : Create a repository for your project and clone it into your App Buiulder Environment. Create a new branch for your working package. Do your work within this branch, commit and push your changes as often as it makes sense. If your work is done and all changes are pushed remove your App Builder Environment. Working in such a manner ensures that you are always working with the latest software components and avoids problems with the file size of your App Builder Environment. Furthermore creating backups is superfluous.","title":"Best Practice working with App Builder Environments"},{"location":"working-with-app-builder-envs.html#create-a-backup-of-your-app-builder-environment","text":"The file system of an App Builder Environment is loaded from two files. The first one is the Ubuntu cloud image file ubuntu-20.04-server-cloudimg-amd64.img originally downloaded from which has a file size of about 600MB. This file is static - no changes are made during runtime or shutdown of your VM. So there is no need to handle it. The second one is the so called snapshot file ubuntu-20.04-server-cloudimg-amd64-snapshot-proxy.qcow2 . This file can be very big (30 GB and more). All changes are stored into the snapshot files. Our backup procedure handles this file. Important Shutdown your App Builder Environment before you backup the qcow2 file. Prerequisites: The tool qemu-ing is installed by ctrlX WORKS. We assume that ctrlX WORKS is installed in \"c:\\Program Files\\Rexroth\\ctrlX WORKS\\\". If not use your specific installation path to call qemu-ing. Open the storage location of your App Builder Environment. Rename the actual qcow2 file: ren ubuntu-20.04-server-cloudimg-amd64-snapshot-noproxy.qcow2 ubuntu-20.04-server-cloudimg-amd64-snapshot-noproxy.qcow2.bak Convert the bak file to the new qcow2 file: \"c:\\Program Files\\Rexroth\\ctrlX WORKS\\qemu\\qemu-img.exe\" convert ubuntu-20.04-server-cloudimg-amd64-snapshot-noproxy.qcow2.bak -O qcow2 ubuntu-20.04-server-cloudimg-amd64-snapshot-proxy.qcow2 Be patient this process takes some times. The convert process also removes unused blocks - so the new qcow2 file should be smaller than the bak file. Start the App Builder Environment to test the new qcow2 file.","title":"Create a Backup of your App Builder Environment"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html","text":"How to use, create, add and change diagnostics for the diagnosis system \u00b6 This documentation is intended for Bosch developers of ctrlX CORE and in many parts also for OEMs, partners and customers. @copyright (C) 2019-20xx Bosch Rexroth AG The reproduction, distribution and utilization of this file as well as the communication of its contents to others without express authorization is prohibited. Offenders will be held liable for the payment of damages. All rights reserved in the event of the grant of a patent, utility model or design. Introduction \u00b6 Some definitions \u00b6 For the structure (definition of the individual bits) of the main and detailed diagnostic numbers, please see https://inside-docupedia.bosch.com/confluence/display/EDCA/DIA_Control_Diagnosenummer or the officially provided documentation of the diagnosis system https://docs.automation.boschrexroth.com/welcome/. * Main diagnostic number: * Must always be unambiguous. * Whole number = 0 is reserved and cannot be used as a valid number. * Valid source types (bits 24-29): 08-10 and 30-37, all others are invalid. * Valid diagnostic classes in combination with priorities (bits 11-19): A0, E0, F0, F2, F6, F8, F9, all others are invalid. * Disappeared bit (bit 20) is handled by diagnosis system -> always use 0. * Detailed diagnostic number: * May be ambiguous. * Whole number = 0 is reserved and cannot be used as a valid number. * The combination of main and detailed diagnostics must again be unambiguous. Prepare a component the first time for the usage of diagnostic numbers \u00b6 Get diagnostics bundle interfaces \u00b6 Add component \"common.log.diagnosis\" to your component. Handle JSON File for un-/registration of diagnostics \u00b6 The file contains all main and detailed diagnostic numbers and texts for the default language (which will also always appear in journald). Create a JSON file for the diagnostics you want to use: For Bosch developers: For Bosch projects/components it is mandatory to use English texts for the default language. Use the export mechanism of the common database. Details see https://inside-docupedia.bosch.com/confluence/x/dY4ucw. It is necessary to provide the exported JSON file within your bundle. Therefore adapt your bundle CMakeLists.txt: @code celix_bundle_files(${BUNDLEX_NAME} ${DIAGNOSTICS_FILES_DEPENDENCY_DIR}/public/src/common_log_diagnosis_diagnostics_en-US.json DESTINATION \"resources/diagnostics\" ) @endcode The path to the JSON file which is needed for un-/registration of the diagnostics is composed of the bundle path (gotten from Celix) and your chosen file location in your provided bundle and your chosen file name, e.g. matching the above definition: @code std::string pathToJsonFile = m_bundlePath + \"/resources/diagnostics/\" + \" _diagnostics_en-US.json\"; @endcode For OEMs, partners and customers: It is recommended to use English texts for the default language. The common.log.diagnosis component provides a file (\"public/src/diagnosis_templates/TEMPLATE.diagnostics.en-US.json\") which can be used as a template for your diagnostics. The key \"product\" is optional. Recommendation for file location in your component: ./private/src/impl/resources/diagnostics/ It is necessary to provide the JSON file within your bundle. Therefore adapt your bundle CMakeLists.txt: @code celix_bundle_files(${BUNDLEX_NAME} ${CMAKE_SOURCE_DIR}/private/src/impl/resources DESTINATION \"\" ) @endcode Hints: Keep in mind: special characters in your json text strings (like backslash or double quotes) have to be escaped by an additional backslash in front of the special character. The language identifier has to be part of the file name, e.g. \\<NAME>.en-US.json. Definitions see https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes. Recommendation for file name: \\<your_component_name> diagnostics \\<language>.json, e.g. \"your_component.diagnostics.en-US.json\". The path to the JSON file which is needed for un-/registration of the diagnostics is composed of the bundle path (gotten from Celix) and your chosen file location in your provided bundle and your chosen file name, e.g. matching the above definition: @code std::string pathToJsonFile = m_bundlePath + \"/resources/diagnostics/\" + \" .diagnostics.en-US.json\"; @endcode Handle declaration of diagnostics in C++ header file \u00b6 For sending logs to the diagnosis system, it is necessary to use the main and detailed diagnostic numbers. Therefore, it is recommended to create a header file with the declaration of symbolic constants of all your numbers in it. For Bosch developers: use the header file of the export mechanism of the common database. Details see https://inside-docupedia.bosch.com/confluence/x/dY4ucw. For OEMs, partners and customers: the common.log.diagnosis component provides a file (\"public/src/diagnosis_templates/TEMPLATE.diagnostics.h\") which can be used as a template for your diagnostics. For Bosch developers of ctrlX CORE \u00b6 General steps when adding/changing a diagnostics \u00b6 In general, when adding/changing a diagnostics the following steps have always to be done. 1. Insert a new diagnostic in the common database * see https://inside-docupedia.bosch.com/confluence/x/u7_yZg 2. Use the export mechanism of the database to get the json file for your component * https://inside-docupedia.bosch.com/confluence/x/dY4ucw 3. Add/edit the related diagnostics documentation * see https://inside-docupedia.bosch.com/confluence/x/br8jSg For OEMs, partners and customers \u00b6 ToDo Deprecated interfaces IRegistration and IRegistration2 \u00b6 Prepare a component the first time for the usage of diagnosis numbers \u00b6 Add the component \"common.log.diagnosis\" in the cdf.xml of your component and do a \"reset dependencies\". Depending if main and/or detailed diagnosis are needed, copy the related .cpp/.h files to the folder \"public/src/diagnosis\" of your component. Change 'TEMPLATE' to the name of the repository/component in small letters : in the file names in the cpp-file(s): the name of the included header file e.g. common_mycomponent_main_diag.h Set CMAKE include path for dependency to \"common.log.diagnosis/public/include\" (recommendation: set include path in file private/src/lib/CMakeLists.txt). Set CMAKE include path for dependency to \"public/src/diagnosis\" of your component (recommendation: set include path in file private/src/lib/CMakeLists.txt). Add in CMAKE .cpp files to source files (section SOURCE_FILES) with full path (recommendation: add in private/src/lib/CMakeLists.txt). Include one/both header file(s) in the c/cpp-file where diagnosis numbers are used (e.g. #include \"common_mycomponent_main_diag.h\"). If not done before, continue as usual e.g. with adding the diagnosis library to your component/project and the diagnosis functions to your code. General steps when adding/changing a diagnosis \u00b6 In general, when adding/changing a diagnosis the following steps have always to be done. Think about the diagnosis text and do the review therefor see https://inside-docupedia.bosch.com/confluence/x/cB_GPQ Insert a new diagnosis in the common database see https://inside-docupedia.bosch.com/confluence/x/FlmwQg Use the information of the database and add/change them in the related header file(s) Add a new diagnosis (if diagnoses ARE NOT AVAILABLE in the header file(s)) Add a new diagnosis (if diagnoses ARE AVAILABLE in the header file(s)) Change an existing diagnosis Add/edit the related diagnosis documentation see https://inside-docupedia.bosch.com/confluence/display/TDKB/ctrlX-Diagnosen Add a new diagnosis (if diagnoses ARE NOT AVAILABLE in the header file(s)) \u00b6 Add a new main diagnosis \u00b6 See section General steps when adding/changing a diagnosis . Changes in ..._main_diag.h/.cpp: General: all replaces to be done including \\<>. Replace \\<NAMESPACE> with the full namespace of your component (e.g. \"common::mycomponent\") and correct the namespaces in header file manually (has to be separated by brackets instead of \"::\" ). Replace \\<MAIN_DIAG_1_CODE> with the full 8 digit hexadecimal number of the main diagnosis code (e.g. \"080F2345\"). Replace \\<MAIN_DIAG_1_IDENTIFIER> with a text associated with the diagnosis in capital letters (e.g. \"SCRIPT_PROCESS\" so at the end the constant should look like this: \"MAIN_DIAG_SCRIPT_PROCESS\"). Replace \\<MAIN_DIAG_1_TEXT_ENGLISH> with the English description of the main diagnosis. Replace \\<MAIN_DIAG_1_VERSION> with the version of the main diagnosis (without \"\"). Use or delete the templates for a second diagnosis (see \\<MAIN_DIAG_2...>) and sort it by diagnosis number! Add a new detailed diagnosis \u00b6 See section General steps when adding/changing a diagnosis . Changes in ..._detailed_diag.h/.cpp: General: all replaces to be done including \\<>. Replace \\<NAMESPACE> with the full namespace of your component (e.g. \"common::mycomponent\") and correct the namespaces in header file manually (has to be seperated by brackets instead of \"::\" ). Replace \\<DETAILED_DIAG_1_CODE> with the full 8 digit hexadecimal number of the detailed diagnosis code with the sub system id \"C\" for ctrlX CORE (e.g. 0C0D0001) Replace \\<DETAILED_DIAG_1_IDENTIFIER> with a text associated with the diagnosis in capital letters (e.g. \"PROCESS_CREATE\" so at the end the constant should look like this: \"DETAILED_DIAG_PROCESS_CREATE\"). Replace \\<DETAILED_DIAG_1_TEXT_ENGLISH> with the English description of the detailed diagnosis. Replace \\<DETAILED_DIAG_1_VERSION> with the version of the detailed diagnosis (without \"\"). Replace \\<DETAILED_DIAG_1_RELATED_MAIN_DIAGS> with all related main diagnoses separated by \";\" as 8 digit values (see \\<MAIN_DIAG_1_CODE>) in one line (e.g. \"080F2345;080F2468,\"). Use or delete the templates for a second diagnosis (see \\<DETAILED_DIAG_2...>) and sort it by diagnosis number! Add a new diagnosis (if diagnoses ARE AVAILABLE in the header file(s)) \u00b6 Add a new main or detailed diagnosis \u00b6 See section General steps when adding/changing a diagnosis . General: add the new diagnosis sorted by diagnosis number! Copy and paste the following lines from the related diagnosis template files \"TEMPLATE_main_diag.h\" or \"TEMPLATE_detailed_diag.h\". Note: e.g. use the \"mark\"-functionality in Notepad++. main diagnosis: all lines including \"MAIN_DIAG_1\" (including related lines like \"{\" of the struct). detailed diagnosis: all lines including \"DETAILED_DIAG_1\" (including related lines like \"{\" of the struct). Continue replacing the keywords as described in section Add a new diagnosis (if diagnosis ARE NOT AVAILABLE in the header file(s)) . Change an existing diagnosis \u00b6 See section General steps when adding/changing a diagnosis . Change a main diagnosis \u00b6 ToDo Change a detailed diagnosis \u00b6 ToDo","title":"Readme"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#publicdocu","text":"This documentation is intended for Bosch developers of ctrlX CORE and in many parts also for OEMs, partners and customers. @copyright (C) 2019-20xx Bosch Rexroth AG The reproduction, distribution and utilization of this file as well as the communication of its contents to others without express authorization is prohibited. Offenders will be held liable for the payment of damages. All rights reserved in the event of the grant of a patent, utility model or design.","title":"How to use, create, add and change diagnostics for the diagnosis system"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#introduction","text":"","title":"Introduction"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#some-definitions","text":"For the structure (definition of the individual bits) of the main and detailed diagnostic numbers, please see https://inside-docupedia.bosch.com/confluence/display/EDCA/DIA_Control_Diagnosenummer or the officially provided documentation of the diagnosis system https://docs.automation.boschrexroth.com/welcome/. * Main diagnostic number: * Must always be unambiguous. * Whole number = 0 is reserved and cannot be used as a valid number. * Valid source types (bits 24-29): 08-10 and 30-37, all others are invalid. * Valid diagnostic classes in combination with priorities (bits 11-19): A0, E0, F0, F2, F6, F8, F9, all others are invalid. * Disappeared bit (bit 20) is handled by diagnosis system -> always use 0. * Detailed diagnostic number: * May be ambiguous. * Whole number = 0 is reserved and cannot be used as a valid number. * The combination of main and detailed diagnostics must again be unambiguous.","title":"Some definitions"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#prepare-a-component-the-first-time-for-the-usage-of-diagnostic-numbers","text":"","title":"Prepare a component the first time for the usage of diagnostic numbers"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#get-diagnostics-bundle-interfaces","text":"Add component \"common.log.diagnosis\" to your component.","title":"Get diagnostics bundle interfaces"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#handle-json-file-for-un-registration-of-diagnostics","text":"The file contains all main and detailed diagnostic numbers and texts for the default language (which will also always appear in journald). Create a JSON file for the diagnostics you want to use: For Bosch developers: For Bosch projects/components it is mandatory to use English texts for the default language. Use the export mechanism of the common database. Details see https://inside-docupedia.bosch.com/confluence/x/dY4ucw. It is necessary to provide the exported JSON file within your bundle. Therefore adapt your bundle CMakeLists.txt: @code celix_bundle_files(${BUNDLEX_NAME} ${DIAGNOSTICS_FILES_DEPENDENCY_DIR}/public/src/common_log_diagnosis_diagnostics_en-US.json DESTINATION \"resources/diagnostics\" ) @endcode The path to the JSON file which is needed for un-/registration of the diagnostics is composed of the bundle path (gotten from Celix) and your chosen file location in your provided bundle and your chosen file name, e.g. matching the above definition: @code std::string pathToJsonFile = m_bundlePath + \"/resources/diagnostics/\" + \" _diagnostics_en-US.json\"; @endcode For OEMs, partners and customers: It is recommended to use English texts for the default language. The common.log.diagnosis component provides a file (\"public/src/diagnosis_templates/TEMPLATE.diagnostics.en-US.json\") which can be used as a template for your diagnostics. The key \"product\" is optional. Recommendation for file location in your component: ./private/src/impl/resources/diagnostics/ It is necessary to provide the JSON file within your bundle. Therefore adapt your bundle CMakeLists.txt: @code celix_bundle_files(${BUNDLEX_NAME} ${CMAKE_SOURCE_DIR}/private/src/impl/resources DESTINATION \"\" ) @endcode Hints: Keep in mind: special characters in your json text strings (like backslash or double quotes) have to be escaped by an additional backslash in front of the special character. The language identifier has to be part of the file name, e.g. \\<NAME>.en-US.json. Definitions see https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes. Recommendation for file name: \\<your_component_name> diagnostics \\<language>.json, e.g. \"your_component.diagnostics.en-US.json\". The path to the JSON file which is needed for un-/registration of the diagnostics is composed of the bundle path (gotten from Celix) and your chosen file location in your provided bundle and your chosen file name, e.g. matching the above definition: @code std::string pathToJsonFile = m_bundlePath + \"/resources/diagnostics/\" + \" .diagnostics.en-US.json\"; @endcode","title":"Handle JSON File for un-/registration of diagnostics"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#handle-declaration-of-diagnostics-in-c-header-file","text":"For sending logs to the diagnosis system, it is necessary to use the main and detailed diagnostic numbers. Therefore, it is recommended to create a header file with the declaration of symbolic constants of all your numbers in it. For Bosch developers: use the header file of the export mechanism of the common database. Details see https://inside-docupedia.bosch.com/confluence/x/dY4ucw. For OEMs, partners and customers: the common.log.diagnosis component provides a file (\"public/src/diagnosis_templates/TEMPLATE.diagnostics.h\") which can be used as a template for your diagnostics.","title":"Handle declaration of diagnostics in C++ header file"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#for-bosch-developers-of-ctrlx-core","text":"","title":"For Bosch developers of ctrlX CORE"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#general-steps-when-addingchanging-a-diagnostics","text":"In general, when adding/changing a diagnostics the following steps have always to be done. 1. Insert a new diagnostic in the common database * see https://inside-docupedia.bosch.com/confluence/x/u7_yZg 2. Use the export mechanism of the database to get the json file for your component * https://inside-docupedia.bosch.com/confluence/x/dY4ucw 3. Add/edit the related diagnostics documentation * see https://inside-docupedia.bosch.com/confluence/x/br8jSg","title":"General steps when adding/changing a diagnostics"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#for-oems-partners-and-customers","text":"ToDo","title":"For OEMs, partners and customers"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#deprecated-interfaces-iregistration-and-iregistration2","text":"","title":"Deprecated interfaces IRegistration and IRegistration2"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#prepare-a-component-the-first-time-for-the-usage-of-diagnosis-numbers","text":"Add the component \"common.log.diagnosis\" in the cdf.xml of your component and do a \"reset dependencies\". Depending if main and/or detailed diagnosis are needed, copy the related .cpp/.h files to the folder \"public/src/diagnosis\" of your component. Change 'TEMPLATE' to the name of the repository/component in small letters : in the file names in the cpp-file(s): the name of the included header file e.g. common_mycomponent_main_diag.h Set CMAKE include path for dependency to \"common.log.diagnosis/public/include\" (recommendation: set include path in file private/src/lib/CMakeLists.txt). Set CMAKE include path for dependency to \"public/src/diagnosis\" of your component (recommendation: set include path in file private/src/lib/CMakeLists.txt). Add in CMAKE .cpp files to source files (section SOURCE_FILES) with full path (recommendation: add in private/src/lib/CMakeLists.txt). Include one/both header file(s) in the c/cpp-file where diagnosis numbers are used (e.g. #include \"common_mycomponent_main_diag.h\"). If not done before, continue as usual e.g. with adding the diagnosis library to your component/project and the diagnosis functions to your code.","title":"Prepare a component the first time for the usage of diagnosis numbers"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#general-steps-when-addingchanging-a-diagnosis","text":"In general, when adding/changing a diagnosis the following steps have always to be done. Think about the diagnosis text and do the review therefor see https://inside-docupedia.bosch.com/confluence/x/cB_GPQ Insert a new diagnosis in the common database see https://inside-docupedia.bosch.com/confluence/x/FlmwQg Use the information of the database and add/change them in the related header file(s) Add a new diagnosis (if diagnoses ARE NOT AVAILABLE in the header file(s)) Add a new diagnosis (if diagnoses ARE AVAILABLE in the header file(s)) Change an existing diagnosis Add/edit the related diagnosis documentation see https://inside-docupedia.bosch.com/confluence/display/TDKB/ctrlX-Diagnosen","title":"General steps when adding/changing a diagnosis"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#add-a-new-diagnosis-if-diagnoses-are-not-available-in-the-header-files","text":"","title":"Add a new diagnosis (if diagnoses ARE NOT AVAILABLE in the header file(s))"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#add-a-new-main-diagnosis","text":"See section General steps when adding/changing a diagnosis . Changes in ..._main_diag.h/.cpp: General: all replaces to be done including \\<>. Replace \\<NAMESPACE> with the full namespace of your component (e.g. \"common::mycomponent\") and correct the namespaces in header file manually (has to be separated by brackets instead of \"::\" ). Replace \\<MAIN_DIAG_1_CODE> with the full 8 digit hexadecimal number of the main diagnosis code (e.g. \"080F2345\"). Replace \\<MAIN_DIAG_1_IDENTIFIER> with a text associated with the diagnosis in capital letters (e.g. \"SCRIPT_PROCESS\" so at the end the constant should look like this: \"MAIN_DIAG_SCRIPT_PROCESS\"). Replace \\<MAIN_DIAG_1_TEXT_ENGLISH> with the English description of the main diagnosis. Replace \\<MAIN_DIAG_1_VERSION> with the version of the main diagnosis (without \"\"). Use or delete the templates for a second diagnosis (see \\<MAIN_DIAG_2...>) and sort it by diagnosis number!","title":"Add a new main diagnosis"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#add-a-new-detailed-diagnosis","text":"See section General steps when adding/changing a diagnosis . Changes in ..._detailed_diag.h/.cpp: General: all replaces to be done including \\<>. Replace \\<NAMESPACE> with the full namespace of your component (e.g. \"common::mycomponent\") and correct the namespaces in header file manually (has to be seperated by brackets instead of \"::\" ). Replace \\<DETAILED_DIAG_1_CODE> with the full 8 digit hexadecimal number of the detailed diagnosis code with the sub system id \"C\" for ctrlX CORE (e.g. 0C0D0001) Replace \\<DETAILED_DIAG_1_IDENTIFIER> with a text associated with the diagnosis in capital letters (e.g. \"PROCESS_CREATE\" so at the end the constant should look like this: \"DETAILED_DIAG_PROCESS_CREATE\"). Replace \\<DETAILED_DIAG_1_TEXT_ENGLISH> with the English description of the detailed diagnosis. Replace \\<DETAILED_DIAG_1_VERSION> with the version of the detailed diagnosis (without \"\"). Replace \\<DETAILED_DIAG_1_RELATED_MAIN_DIAGS> with all related main diagnoses separated by \";\" as 8 digit values (see \\<MAIN_DIAG_1_CODE>) in one line (e.g. \"080F2345;080F2468,\"). Use or delete the templates for a second diagnosis (see \\<DETAILED_DIAG_2...>) and sort it by diagnosis number!","title":"Add a new detailed diagnosis"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#add-a-new-diagnosis-if-diagnoses-are-available-in-the-header-files","text":"","title":"Add a new diagnosis (if diagnoses ARE AVAILABLE in the header file(s))"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#add-a-new-main-or-detailed-diagnosis","text":"See section General steps when adding/changing a diagnosis . General: add the new diagnosis sorted by diagnosis number! Copy and paste the following lines from the related diagnosis template files \"TEMPLATE_main_diag.h\" or \"TEMPLATE_detailed_diag.h\". Note: e.g. use the \"mark\"-functionality in Notepad++. main diagnosis: all lines including \"MAIN_DIAG_1\" (including related lines like \"{\" of the struct). detailed diagnosis: all lines including \"DETAILED_DIAG_1\" (including related lines like \"{\" of the struct). Continue replacing the keywords as described in section Add a new diagnosis (if diagnosis ARE NOT AVAILABLE in the header file(s)) .","title":"Add a new main or detailed diagnosis"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#change-an-existing-diagnosis","text":"See section General steps when adding/changing a diagnosis .","title":"Change an existing diagnosis"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#change-a-main-diagnosis","text":"ToDo","title":"Change a main diagnosis"},{"location":"common.log.diagnosis/diagnosis_templates/readme.html#change-a-detailed-diagnosis","text":"ToDo","title":"Change a detailed diagnosis"},{"location":"samples-cpp/index.html","text":"Prerequisites \u00b6 ctrlX AUTOMATION SDK build environment ctrlX AUTOMATION SDK version ctrlX CORE virtual or ctrlX CORE Visual Studio Code installed on your host computer Find out the supported samples \u00b6 Hello World recommendation -> start with this example Hello PLC ctrlX Data Layer Client ctrlX Data Layer Client Subscription ctrlX Data Layer RegisterNode Diagnostics Logbook ctrlX Data Layer Diagnosis ctrlX Data Layer EtherCAT I/O's ctrlX Data Layer Realtime ctrlX Data Layer Provider All Data Types Getting Started \u00b6 Launch Visual Studio Code as your IDE If the IDE is started remote connect via Remote Explorer extension to your builder environment (SSH target) Ensure that Visual Studio Code extensions \"C/C++ Extension Pack\" and \"CMake Tools\" are installed in your SSH target. Open the folder of the desired cpp sample under samples-cpp/ Build a Snap \u00b6 See Samples Overview Create an Executable for Debugging \u00b6 Select the CMake symbol in the sidebar, click '...' at the top of the explorer window and select 'Clean Reconfigure All Projects'. Then make these settings in the status bar (blue area) : CMake (Current build variant): Select 'Debug' Active kit: Select 'GCC ... x86...' Select 'x64...' as build target Click Build and observe the progress in the output window - the build process should finish without errors (exit code 0). Now the executable for debugging is available in the subdirectory: generated/ ubuntu20-gcc-x64/Debug/ To start debugging select 'Run and Debug' in the side bar, select 'x64...' as launch configuration an press F5 (or green start button). The executable will be started and the debugger will set automatically a breakpoint at the beginning of the main() function. Troubleshooting \u00b6 All automatically created files are located in subfolders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process. Support \u00b6 If you've found an error in these sample, please file an issue If you've any questions visit the ctrlX AUTOMATION Community Official Documentation \u00b6 https://docs.automation.boschrexroth.com/","title":"Samples C/C++"},{"location":"samples-cpp/index.html#prerequisites","text":"ctrlX AUTOMATION SDK build environment ctrlX AUTOMATION SDK version ctrlX CORE virtual or ctrlX CORE Visual Studio Code installed on your host computer","title":"Prerequisites"},{"location":"samples-cpp/index.html#find-out-the-supported-samples","text":"Hello World recommendation -> start with this example Hello PLC ctrlX Data Layer Client ctrlX Data Layer Client Subscription ctrlX Data Layer RegisterNode Diagnostics Logbook ctrlX Data Layer Diagnosis ctrlX Data Layer EtherCAT I/O's ctrlX Data Layer Realtime ctrlX Data Layer Provider All Data Types","title":"Find out the supported samples"},{"location":"samples-cpp/index.html#getting-started","text":"Launch Visual Studio Code as your IDE If the IDE is started remote connect via Remote Explorer extension to your builder environment (SSH target) Ensure that Visual Studio Code extensions \"C/C++ Extension Pack\" and \"CMake Tools\" are installed in your SSH target. Open the folder of the desired cpp sample under samples-cpp/","title":"Getting Started"},{"location":"samples-cpp/index.html#build-a-snap","text":"See Samples Overview","title":"Build a Snap"},{"location":"samples-cpp/index.html#create-an-executable-for-debugging","text":"Select the CMake symbol in the sidebar, click '...' at the top of the explorer window and select 'Clean Reconfigure All Projects'. Then make these settings in the status bar (blue area) : CMake (Current build variant): Select 'Debug' Active kit: Select 'GCC ... x86...' Select 'x64...' as build target Click Build and observe the progress in the output window - the build process should finish without errors (exit code 0). Now the executable for debugging is available in the subdirectory: generated/ ubuntu20-gcc-x64/Debug/ To start debugging select 'Run and Debug' in the side bar, select 'x64...' as launch configuration an press F5 (or green start button). The executable will be started and the debugger will set automatically a breakpoint at the beginning of the main() function.","title":"Create an Executable for Debugging"},{"location":"samples-cpp/index.html#troubleshooting","text":"All automatically created files are located in subfolders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process.","title":"Troubleshooting"},{"location":"samples-cpp/index.html#support","text":"If you've found an error in these sample, please file an issue If you've any questions visit the ctrlX AUTOMATION Community","title":"Support"},{"location":"samples-cpp/index.html#official-documentation","text":"https://docs.automation.boschrexroth.com/","title":"Official Documentation"},{"location":"samples-cpp/datalayer.client/index.html","text":"README datalayer.client \u00b6 Introduction \u00b6 The sample app datalayer.client performs Data Layer operations in cpp. Prerequisites \u00b6 The sample requires that the app datalayer.provider.all-data is running in the SDK build environment or as snap on the crlX CORE. Function Description \u00b6 The app reads demonstrates how values of existing nodes of the ctrlX Data Layer can be accessed. Implementation Description \u00b6 ctrlx_datalayer_helper.h Cpontains helper methods for creating ctrlX Datalayer Client and/or Provider instances. datalayerclient.cpp und datalayerclient.h are defining a class which manages the Data Layer client access: Starting/stopping the Data Layer access Access of Data Layer nodes of different data type Callback methods for Data Layer access In main.cpp an endless loop is running: An instance of the class DataLayerClient is created The instance is called to do Data Layer access The instance is deleted Sleep some time Build and Install the Snap \u00b6 Build and install the snap like described here . Test the Snap \u00b6 Open a SSH connection to your ctrlX CORE Check trace output: sudo snap logs -f sdk-cpp-client License \u00b6 MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README datalayer.client"},{"location":"samples-cpp/datalayer.client/index.html#readme-datalayerclient","text":"","title":"README datalayer.client"},{"location":"samples-cpp/datalayer.client/index.html#introduction","text":"The sample app datalayer.client performs Data Layer operations in cpp.","title":"Introduction"},{"location":"samples-cpp/datalayer.client/index.html#prerequisites","text":"The sample requires that the app datalayer.provider.all-data is running in the SDK build environment or as snap on the crlX CORE.","title":"Prerequisites"},{"location":"samples-cpp/datalayer.client/index.html#function-description","text":"The app reads demonstrates how values of existing nodes of the ctrlX Data Layer can be accessed.","title":"Function Description"},{"location":"samples-cpp/datalayer.client/index.html#implementation-description","text":"ctrlx_datalayer_helper.h Cpontains helper methods for creating ctrlX Datalayer Client and/or Provider instances. datalayerclient.cpp und datalayerclient.h are defining a class which manages the Data Layer client access: Starting/stopping the Data Layer access Access of Data Layer nodes of different data type Callback methods for Data Layer access In main.cpp an endless loop is running: An instance of the class DataLayerClient is created The instance is called to do Data Layer access The instance is deleted Sleep some time","title":"Implementation Description"},{"location":"samples-cpp/datalayer.client/index.html#build-and-install-the-snap","text":"Build and install the snap like described here .","title":"Build and Install the Snap"},{"location":"samples-cpp/datalayer.client/index.html#test-the-snap","text":"Open a SSH connection to your ctrlX CORE Check trace output: sudo snap logs -f sdk-cpp-client","title":"Test the Snap"},{"location":"samples-cpp/datalayer.client/index.html#license","text":"MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/datalayer.client.sub/index.html","text":"README datalayer.client.sub \u00b6 This sample app demonstrates how Data Layer nodes are subscribed in single and multi mode. Functional Description \u00b6 The sample app subscribes to two different Data Layer nodes: - framework/metrics/system/cpu-utilisation-percent - framework/metrics/system/memavailable-mb If a value changes the app writes it to the terminal and also the size, type, address and timestamp. Implementation Description \u00b6 ctrlx_datalayer_helper.h contains helper functions the create ctrlX Data Layer provider and/or client instances. In datalayerclientsub.cpp the class DataLayerClientSub is implemented. Here all activities for the Data Layer access are handled. In main.cpp the main function first creates an instance of DataLayerClientSub and then runs an endless loop. If an error occurs the application is exited. Running as a snap in the ctrlX CORE it will be restarted by snapd because of the restart-condition: always entry in snap/snapcraft.yaml. Build and Install the Snap \u00b6 Build and install the snap like described here . Test the Snap \u00b6 Open a SSH connection to your ctrlX CORE Check trace output: sudo snap logs -f sdk-cpp-sub License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README datalayer.client.sub"},{"location":"samples-cpp/datalayer.client.sub/index.html#readme-datalayerclientsub","text":"This sample app demonstrates how Data Layer nodes are subscribed in single and multi mode.","title":"README datalayer.client.sub"},{"location":"samples-cpp/datalayer.client.sub/index.html#functional-description","text":"The sample app subscribes to two different Data Layer nodes: - framework/metrics/system/cpu-utilisation-percent - framework/metrics/system/memavailable-mb If a value changes the app writes it to the terminal and also the size, type, address and timestamp.","title":"Functional Description"},{"location":"samples-cpp/datalayer.client.sub/index.html#implementation-description","text":"ctrlx_datalayer_helper.h contains helper functions the create ctrlX Data Layer provider and/or client instances. In datalayerclientsub.cpp the class DataLayerClientSub is implemented. Here all activities for the Data Layer access are handled. In main.cpp the main function first creates an instance of DataLayerClientSub and then runs an endless loop. If an error occurs the application is exited. Running as a snap in the ctrlX CORE it will be restarted by snapd because of the restart-condition: always entry in snap/snapcraft.yaml.","title":"Implementation Description"},{"location":"samples-cpp/datalayer.client.sub/index.html#build-and-install-the-snap","text":"Build and install the snap like described here .","title":"Build and Install the Snap"},{"location":"samples-cpp/datalayer.client.sub/index.html#test-the-snap","text":"Open a SSH connection to your ctrlX CORE Check trace output: sudo snap logs -f sdk-cpp-sub","title":"Test the Snap"},{"location":"samples-cpp/datalayer.client.sub/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/datalayer.diagnosis/index.html","text":"ctrlX Data Layer Diagnosis \u00b6 This sample app uses some Data Layer addresses to handle with diagnostics. Introduction \u00b6 It demonstrates how to * register and unregister diagnostics * subscribe to specific diagnostic events * set and reset diagnostic logs * confirm diagnostic errors * get the highest priority pending log * get the actual pending list of errors and warnings * get diagnostic texts from diagnostic numbers Prerequisites \u00b6 Installed app rexroth-automationcore Build and Install the Snap \u00b6 Build and install the snap like described here . Test the Snap \u00b6 Open the web interface of your ctrlX CORE Check output in the web interface License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Diagnosis"},{"location":"samples-cpp/datalayer.diagnosis/index.html#ctrlx-data-layer-diagnosis","text":"This sample app uses some Data Layer addresses to handle with diagnostics.","title":"ctrlX Data Layer Diagnosis"},{"location":"samples-cpp/datalayer.diagnosis/index.html#introduction","text":"It demonstrates how to * register and unregister diagnostics * subscribe to specific diagnostic events * set and reset diagnostic logs * confirm diagnostic errors * get the highest priority pending log * get the actual pending list of errors and warnings * get diagnostic texts from diagnostic numbers","title":"Introduction"},{"location":"samples-cpp/datalayer.diagnosis/index.html#prerequisites","text":"Installed app rexroth-automationcore","title":"Prerequisites"},{"location":"samples-cpp/datalayer.diagnosis/index.html#build-and-install-the-snap","text":"Build and install the snap like described here .","title":"Build and Install the Snap"},{"location":"samples-cpp/datalayer.diagnosis/index.html#test-the-snap","text":"Open the web interface of your ctrlX CORE Check output in the web interface","title":"Test the Snap"},{"location":"samples-cpp/datalayer.diagnosis/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/datalayer.ecat.io/index.html","text":"README datalayer.client \u00b6 The sample app datalayer.ecat.io toggles some Fieldbus I/O's. Introduction \u00b6 It demonstrate how it is possible to read inputs and write outputs. It starts to toggle the outputs while the first channel of the input is set to true. Prerequisites \u00b6 ctrlX EtherCAT Master App ctrlX I/O Engineering S20-EC-BK S20-DI-16 S20-DO-16 Build and Install the Snap \u00b6 Build and install the snap like described here . Test the Snap \u00b6 Open the web interface of your ctrlX CORE Check output in the web interface License \u00b6 MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README datalayer.client"},{"location":"samples-cpp/datalayer.ecat.io/index.html#readme-datalayerclient","text":"The sample app datalayer.ecat.io toggles some Fieldbus I/O's.","title":"README datalayer.client"},{"location":"samples-cpp/datalayer.ecat.io/index.html#introduction","text":"It demonstrate how it is possible to read inputs and write outputs. It starts to toggle the outputs while the first channel of the input is set to true.","title":"Introduction"},{"location":"samples-cpp/datalayer.ecat.io/index.html#prerequisites","text":"ctrlX EtherCAT Master App ctrlX I/O Engineering S20-EC-BK S20-DI-16 S20-DO-16","title":"Prerequisites"},{"location":"samples-cpp/datalayer.ecat.io/index.html#build-and-install-the-snap","text":"Build and install the snap like described here .","title":"Build and Install the Snap"},{"location":"samples-cpp/datalayer.ecat.io/index.html#test-the-snap","text":"Open the web interface of your ctrlX CORE Check output in the web interface","title":"Test the Snap"},{"location":"samples-cpp/datalayer.ecat.io/index.html#license","text":"MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/datalayer.provider.all-data/index.html","text":"AllDataProvider App \u00b6 This cpp sample app is a Data Layer Provider which can be used in two wayes: As a sample how in cpp variables of different data types can be involved into Data Layer Variants. As a test Data Layer Provider during development of a Data Layer Client. These client apps can be written in one of the SDK supported languages or can be Node-RED or REST API applications. Introduction \u00b6 The AllDataProvider creates two Data Layer branches: all-data/dynamic and all-data/static . The branches are providing sub nodes for most of the Data Layer Variant types. The static branch and its nodes cannot be changed by Data Layer Client interactions. It can be used to read data and to test the min and max data values within the own application. The dynamic branch however is changeable. Nodes can be written or even deleted by clients. Furthermore new nodes or whole sub branches can be created. Implementation \u00b6 main.cpp \u00b6 The main function establishes the Data Layer connection. If the app is running within a snap on the ctrlX a IPC connection is used automatically. This connection doesn't need user credentials. For a debugging session or in remote mode a tcp connection which need user credentials and an address is used. Therefore in the code user, password and address are predefined with default values. Important: Do NOT use this default values! * Add a separate user/password for this app in your ctrlX and change values in the code. * Check the IP address of your ctrlX and change the value in the code if it is different. Hint: Use 127.0.0.1 as address if you are working with a ctrlX CORE virtual connected with Port Forwarding. DataContainer Class \u00b6 DataContainer is a simple data container class representing the data and error state of a node seen in the dynamic and/or static branch. ProviderNodeAllData Class \u00b6 ProviderNodeAllData is a IProviderNode implementation and provides a Data Layer sub branch. The sub branch can be static or dynamic. Static means that the values of the nodes and the structure of he branch cannot be changed by Data Layer clients. In a dynamic branch everything can be changed. All nodes of such a sub branch are 'virtual' because the node behind is always the same ProviderNodeAllData instance. Therefore it registers itself with a wildcard address (e.g. all-data/dynamic/**) at the Data Layer. The 'seen' nodes are DataContainer instances managed in a list and accessed by the on... callback functions of the ProviderNodeAllData class. Build and Install the Snap \u00b6 Build and install the snap like described here . Test the Snap \u00b6 Open the web interface of your ctrlX CORE Check output in the web interface License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"AllDataProvider App"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#alldataprovider-app","text":"This cpp sample app is a Data Layer Provider which can be used in two wayes: As a sample how in cpp variables of different data types can be involved into Data Layer Variants. As a test Data Layer Provider during development of a Data Layer Client. These client apps can be written in one of the SDK supported languages or can be Node-RED or REST API applications.","title":"AllDataProvider App"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#introduction","text":"The AllDataProvider creates two Data Layer branches: all-data/dynamic and all-data/static . The branches are providing sub nodes for most of the Data Layer Variant types. The static branch and its nodes cannot be changed by Data Layer Client interactions. It can be used to read data and to test the min and max data values within the own application. The dynamic branch however is changeable. Nodes can be written or even deleted by clients. Furthermore new nodes or whole sub branches can be created.","title":"Introduction"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#implementation","text":"","title":"Implementation"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#maincpp","text":"The main function establishes the Data Layer connection. If the app is running within a snap on the ctrlX a IPC connection is used automatically. This connection doesn't need user credentials. For a debugging session or in remote mode a tcp connection which need user credentials and an address is used. Therefore in the code user, password and address are predefined with default values. Important: Do NOT use this default values! * Add a separate user/password for this app in your ctrlX and change values in the code. * Check the IP address of your ctrlX and change the value in the code if it is different. Hint: Use 127.0.0.1 as address if you are working with a ctrlX CORE virtual connected with Port Forwarding.","title":"main.cpp"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#datacontainer-class","text":"DataContainer is a simple data container class representing the data and error state of a node seen in the dynamic and/or static branch.","title":"DataContainer Class"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#providernodealldata-class","text":"ProviderNodeAllData is a IProviderNode implementation and provides a Data Layer sub branch. The sub branch can be static or dynamic. Static means that the values of the nodes and the structure of he branch cannot be changed by Data Layer clients. In a dynamic branch everything can be changed. All nodes of such a sub branch are 'virtual' because the node behind is always the same ProviderNodeAllData instance. Therefore it registers itself with a wildcard address (e.g. all-data/dynamic/**) at the Data Layer. The 'seen' nodes are DataContainer instances managed in a list and accessed by the on... callback functions of the ProviderNodeAllData class.","title":"ProviderNodeAllData Class"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#build-and-install-the-snap","text":"Build and install the snap like described here .","title":"Build and Install the Snap"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#test-the-snap","text":"Open the web interface of your ctrlX CORE Check output in the web interface","title":"Test the Snap"},{"location":"samples-cpp/datalayer.provider.all-data/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/datalayer.realtime/index.html","text":"README datalayer.realtime \u00b6 The sample app datalayer.realtime shows the realtime access via the ctrlX Data Layer. Introduction \u00b6 It demonstrates how you can provide some realtime data (memory owner) and work with these data (memory user). The memory owner creates some input and output memory and defines the layout of the memory map. The memory user can read input and write output . When the user has written outputs once, the owner will start copying from output to input. Build and Install the Snap \u00b6 Build and install the snap like described here . Test the Snap \u00b6 Open the web interface of your ctrlX CORE Check output in the web interface License \u00b6 MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README datalayer.realtime"},{"location":"samples-cpp/datalayer.realtime/index.html#readme-datalayerrealtime","text":"The sample app datalayer.realtime shows the realtime access via the ctrlX Data Layer.","title":"README datalayer.realtime"},{"location":"samples-cpp/datalayer.realtime/index.html#introduction","text":"It demonstrates how you can provide some realtime data (memory owner) and work with these data (memory user). The memory owner creates some input and output memory and defines the layout of the memory map. The memory user can read input and write output . When the user has written outputs once, the owner will start copying from output to input.","title":"Introduction"},{"location":"samples-cpp/datalayer.realtime/index.html#build-and-install-the-snap","text":"Build and install the snap like described here .","title":"Build and Install the Snap"},{"location":"samples-cpp/datalayer.realtime/index.html#test-the-snap","text":"Open the web interface of your ctrlX CORE Check output in the web interface","title":"Test the Snap"},{"location":"samples-cpp/datalayer.realtime/index.html#license","text":"MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/datalayer.register.node/index.html","text":"README datalayer.register.node \u00b6 Introduction \u00b6 The sample app datalayer.register.node creates a new Data Layer folder ' sdk-cpp-registernode ' with nodes of different datatypes. Functional Description \u00b6 It demonstrates how you can create Data Layer nodes with different data types. These nodes can be accessed by a Data Layer client app e.g. ctrlX-Node-RED. The metadata of the nodes are provides by a metadata database. Implementation Description \u00b6 All actions are implemented in main.cpp: Start Data Layer system Connect as Data Layer provider Register a flatbuffers schema Register metadata database Register several Data Layer nodes Endless loop where the Data Layer connection is observed Shutdown if the Data Layer connection is broken Important If the app is running as snap on a ctrlX CORE it will be restarted if it has exited on error. Build and Install the Snap \u00b6 Build and install the snap like described here . Test the Snap \u00b6 Open the web interface of your ctrlX CORE Check output in the web interface License \u00b6 MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README datalayer.register.node"},{"location":"samples-cpp/datalayer.register.node/index.html#readme-datalayerregisternode","text":"","title":"README datalayer.register.node"},{"location":"samples-cpp/datalayer.register.node/index.html#introduction","text":"The sample app datalayer.register.node creates a new Data Layer folder ' sdk-cpp-registernode ' with nodes of different datatypes.","title":"Introduction"},{"location":"samples-cpp/datalayer.register.node/index.html#functional-description","text":"It demonstrates how you can create Data Layer nodes with different data types. These nodes can be accessed by a Data Layer client app e.g. ctrlX-Node-RED. The metadata of the nodes are provides by a metadata database.","title":"Functional Description"},{"location":"samples-cpp/datalayer.register.node/index.html#implementation-description","text":"All actions are implemented in main.cpp: Start Data Layer system Connect as Data Layer provider Register a flatbuffers schema Register metadata database Register several Data Layer nodes Endless loop where the Data Layer connection is observed Shutdown if the Data Layer connection is broken Important If the app is running as snap on a ctrlX CORE it will be restarted if it has exited on error.","title":"Implementation Description"},{"location":"samples-cpp/datalayer.register.node/index.html#build-and-install-the-snap","text":"Build and install the snap like described here .","title":"Build and Install the Snap"},{"location":"samples-cpp/datalayer.register.node/index.html#test-the-snap","text":"Open the web interface of your ctrlX CORE Check output in the web interface","title":"Test the Snap"},{"location":"samples-cpp/datalayer.register.node/index.html#license","text":"MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/diagnostics.logbook/index.html","text":"README \u00b6 The sample App diaglogbook demonstates how messages are sent to journald and the CtrlX Diagnostics Logbook. The using of Linux Kernel Log Levels \u00b6 We recommend to use Linux log levels to define the severity of a log message. There are eight log levels defined by the Linux kernel: EMERGENCY The system is unusable (and will be shut down) ALERT There is a severe error, action must be taken immediately CRITICAL There is a critical error ERROR A job was aborted in case of an error WARNING There is an abnormal condition but the actual job can be finished NOTICE There is a normal but significant condition INFO A messages informs about an internal state DEBUG Message shows details regarding program flow or results Be carefull with level EMERGENCY: Messages with this level are sent to all consoles! Build and Install the Snap \u00b6 Build and install the snap like described here . Test the Snap \u00b6 Open the web interface of your ctrlX CORE Check the output of the diagnosis logbook License \u00b6 MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README"},{"location":"samples-cpp/diagnostics.logbook/index.html#readme","text":"The sample App diaglogbook demonstates how messages are sent to journald and the CtrlX Diagnostics Logbook.","title":"README"},{"location":"samples-cpp/diagnostics.logbook/index.html#the-using-of-linux-kernel-log-levels","text":"We recommend to use Linux log levels to define the severity of a log message. There are eight log levels defined by the Linux kernel: EMERGENCY The system is unusable (and will be shut down) ALERT There is a severe error, action must be taken immediately CRITICAL There is a critical error ERROR A job was aborted in case of an error WARNING There is an abnormal condition but the actual job can be finished NOTICE There is a normal but significant condition INFO A messages informs about an internal state DEBUG Message shows details regarding program flow or results Be carefull with level EMERGENCY: Messages with this level are sent to all consoles!","title":"The using of Linux Kernel  Log Levels"},{"location":"samples-cpp/diagnostics.logbook/index.html#build-and-install-the-snap","text":"Build and install the snap like described here .","title":"Build and Install the Snap"},{"location":"samples-cpp/diagnostics.logbook/index.html#test-the-snap","text":"Open the web interface of your ctrlX CORE Check the output of the diagnosis logbook","title":"Test the Snap"},{"location":"samples-cpp/diagnostics.logbook/index.html#license","text":"MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/hello.plc/index.html","text":"README hello.plc \u00b6 Introduction \u00b6 The sample project hello.plc shows the write access to some ctrlX PLC variables as a Data Layer client on ctrlX CORE or ctrlX CORE virtual . Prerequisites \u00b6 Running ctrlX CORE with app Rexroth PLC installed. From ctrlX WORKS start ctrlX PLC Engineering : Open, compile, download and start the PLC project hello.plc.project of the subfolder plc_application With a web browser login into your ctrlX CORE and check the Datalayer folder plc/app/hello_plc_application/sym/PLC_PRG. Here all PLC variables should appear. Function Description \u00b6 When the app has been started, all variables from the PLC program \"PLC_PRG\" that are present in the PLC symbol configuration will be read out. Then the following is executed once: the value \"HelloDeveloper\" is written to each variable of type STRING. the value \"1337\" is written to each variable of type INT16 (ctrlX-Plc: INT). the value \"0.815f\" is written in each variable of type FLOAT32 (ctrlX-Plc: REAL). All variables with another data type are ignored. Build and Install the Snap \u00b6 Build and install the snap like described here . Test the Snap \u00b6 Open the web interface of your ctrlX CORE Login with ctrlX PLC Engineering and watch the values of the variables. Variables in the PLC program \"PLC_PRG\" that are available in the PLC symbol configuration should have the following values: STRING variables should have the value \"HelloDeveloper\". INTEGER variables should have the value \"1337\" REAL variables should have the value \"0.815f\" Screenshots \u00b6 Declare some plc variables symbolconfiguration PLC_PRG selected Status of the plc-variables before the snap runs Status of the plc-variables after the snap runs Output in diagnosis logbook License \u00b6 MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README hello.plc"},{"location":"samples-cpp/hello.plc/index.html#readme-helloplc","text":"","title":"README hello.plc"},{"location":"samples-cpp/hello.plc/index.html#introduction","text":"The sample project hello.plc shows the write access to some ctrlX PLC variables as a Data Layer client on ctrlX CORE or ctrlX CORE virtual .","title":"Introduction"},{"location":"samples-cpp/hello.plc/index.html#prerequisites","text":"Running ctrlX CORE with app Rexroth PLC installed. From ctrlX WORKS start ctrlX PLC Engineering : Open, compile, download and start the PLC project hello.plc.project of the subfolder plc_application With a web browser login into your ctrlX CORE and check the Datalayer folder plc/app/hello_plc_application/sym/PLC_PRG. Here all PLC variables should appear.","title":"Prerequisites"},{"location":"samples-cpp/hello.plc/index.html#function-description","text":"When the app has been started, all variables from the PLC program \"PLC_PRG\" that are present in the PLC symbol configuration will be read out. Then the following is executed once: the value \"HelloDeveloper\" is written to each variable of type STRING. the value \"1337\" is written to each variable of type INT16 (ctrlX-Plc: INT). the value \"0.815f\" is written in each variable of type FLOAT32 (ctrlX-Plc: REAL). All variables with another data type are ignored.","title":"Function Description"},{"location":"samples-cpp/hello.plc/index.html#build-and-install-the-snap","text":"Build and install the snap like described here .","title":"Build and Install the Snap"},{"location":"samples-cpp/hello.plc/index.html#test-the-snap","text":"Open the web interface of your ctrlX CORE Login with ctrlX PLC Engineering and watch the values of the variables. Variables in the PLC program \"PLC_PRG\" that are available in the PLC symbol configuration should have the following values: STRING variables should have the value \"HelloDeveloper\". INTEGER variables should have the value \"1337\" REAL variables should have the value \"0.815f\"","title":"Test the Snap"},{"location":"samples-cpp/hello.plc/index.html#screenshots","text":"Declare some plc variables symbolconfiguration PLC_PRG selected Status of the plc-variables before the snap runs Status of the plc-variables after the snap runs Output in diagnosis logbook","title":"Screenshots"},{"location":"samples-cpp/hello.plc/index.html#license","text":"MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-cpp/hello.world/index.html","text":"README hello.world \u00b6 The sample hello.world print out \"Hello World\" on CtrlX CORE. Introduction \u00b6 This sample demonstrates how you can build your first C/C++ snap. The project hello.world provides a simple application example to print out \"Hello World\" in ctrlX CORE devices: ctrlX CORE or ctrlX CORE virtual . Troubleshooting \u00b6 All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process. Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Community License \u00b6 MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README hello.world"},{"location":"samples-cpp/hello.world/index.html#readme-helloworld","text":"The sample hello.world print out \"Hello World\" on CtrlX CORE.","title":"README hello.world"},{"location":"samples-cpp/hello.world/index.html#introduction","text":"This sample demonstrates how you can build your first C/C++ snap. The project hello.world provides a simple application example to print out \"Hello World\" in ctrlX CORE devices: ctrlX CORE or ctrlX CORE virtual .","title":"Introduction"},{"location":"samples-cpp/hello.world/index.html#troubleshooting","text":"All automatically created files are located in folders build and generated . If there are unclear messages during the build process, it might help to delete the folders build and generated and restart the build process.","title":"Troubleshooting"},{"location":"samples-cpp/hello.world/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Community","title":"Support"},{"location":"samples-cpp/hello.world/index.html#license","text":"MIT License Copyright (c) 2020-2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-go/index.html","text":"Find out the supported samples \u00b6 Hello Webserver Load/Save Application Data ctrlX Data Layer Client ctrlX Data Layer Provider Usage of TPM2 Build a Snap \u00b6 See Samples Overview","title":"Samples Go"},{"location":"samples-go/index.html#find-out-the-supported-samples","text":"Hello Webserver Load/Save Application Data ctrlX Data Layer Client ctrlX Data Layer Provider Usage of TPM2","title":"Find out the supported samples"},{"location":"samples-go/index.html#build-a-snap","text":"See Samples Overview","title":"Build a Snap"},{"location":"samples-go/appdata/index.html","text":"README Go appdata \u00b6 Introduction \u00b6 This sample shows how to load and save data according to the ctrlx storage concept. Getting Started \u00b6 Launch Visual Studio Code. Click on the Remote Explorer from the menu. Connect via SSH to your Ubuntu development environment. In the menu item File - Open Folder select the folder samples-go/ appdata . Build a Snap \u00b6 Select main menu item Termninal - Run Build Task select the architecture of your ctrlX CORE: amd64 for ctrlX CORE virtual arm64 for ctrlX CORE A snap file will be build. Install the Snap \u00b6 Right click the snap file in the File explorer window and select download. The file will be downloaded into a destination directory on your host computer. Login into your ctrlX, from the home page click Install an app . Switch to Service Mode Select Install from file and select the snap file on your host computer. When installation is finished switch to Operation Mode. Test the Snap \u00b6 From the ctrlX home page Cclick Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.sdk-go-appdata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs -f sdk-go-appdata.app Provide FOSS Info \u00b6 If your programcode contains additional open source software, the FOSS Info (Free and Open Source Software) must be filled in order to publish your App to the ctrlX Store. 1. Navigate to the folder configs/package-assets in the root path of your snap project 2. Open the file app.'snap-name'.fossinfo.json 3. Add license information of the used open source software with the following json-structure: { \"name\": \"\", \"version\": \"\", \"homepage\": \"\", \"usage\": \"\", \"integrationMechanism\": \"\", \"copyright\": { \"text\": \"\" }, \"licenses\": [ { \"name\": \"\", \"spdx\": \"\", \"text\": \"\" } ] } Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README Go appdata"},{"location":"samples-go/appdata/index.html#readme-go-appdata","text":"","title":"README Go appdata"},{"location":"samples-go/appdata/index.html#introduction","text":"This sample shows how to load and save data according to the ctrlx storage concept.","title":"Introduction"},{"location":"samples-go/appdata/index.html#getting-started","text":"Launch Visual Studio Code. Click on the Remote Explorer from the menu. Connect via SSH to your Ubuntu development environment. In the menu item File - Open Folder select the folder samples-go/ appdata .","title":"Getting Started"},{"location":"samples-go/appdata/index.html#build-a-snap","text":"Select main menu item Termninal - Run Build Task select the architecture of your ctrlX CORE: amd64 for ctrlX CORE virtual arm64 for ctrlX CORE A snap file will be build.","title":"Build a Snap"},{"location":"samples-go/appdata/index.html#install-the-snap","text":"Right click the snap file in the File explorer window and select download. The file will be downloaded into a destination directory on your host computer. Login into your ctrlX, from the home page click Install an app . Switch to Service Mode Select Install from file and select the snap file on your host computer. When installation is finished switch to Operation Mode.","title":"Install the Snap"},{"location":"samples-go/appdata/index.html#test-the-snap","text":"From the ctrlX home page Cclick Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.sdk-go-appdata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs -f sdk-go-appdata.app","title":"Test the Snap"},{"location":"samples-go/appdata/index.html#provide-foss-info","text":"If your programcode contains additional open source software, the FOSS Info (Free and Open Source Software) must be filled in order to publish your App to the ctrlX Store. 1. Navigate to the folder configs/package-assets in the root path of your snap project 2. Open the file app.'snap-name'.fossinfo.json 3. Add license information of the used open source software with the following json-structure: { \"name\": \"\", \"version\": \"\", \"homepage\": \"\", \"usage\": \"\", \"integrationMechanism\": \"\", \"copyright\": { \"text\": \"\" }, \"licenses\": [ { \"name\": \"\", \"spdx\": \"\", \"text\": \"\" } ] }","title":"Provide FOSS Info"},{"location":"samples-go/appdata/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-go/appdata/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-go/appdata/index.html#support","text":"","title":"Support"},{"location":"samples-go/appdata/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-go/appdata/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-go/appdata/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-go/appdata/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-go/appdata/assets/index.html","text":"/assets \u00b6 Other assets to go along with your repository (images, logos, etc).","title":"`/assets`"},{"location":"samples-go/appdata/assets/index.html#assets","text":"Other assets to go along with your repository (images, logos, etc).","title":"/assets"},{"location":"samples-go/appdata/cmd/index.html","text":"/cmd \u00b6 Main applications for this project. The directory name for each application should match the name of the executable you want to have (e.g., /cmd/myapp ). Don't put a lot of code in the application directory. If you think the code can be imported and used in other projects, then it should live in the /pkg directory. If the code is not reusable or if you don't want others to reuse it, put that code in the /internal directory. You'll be surprised what others will do, so be explicit about your intentions! It's common to have a small main function that imports and invokes the code from the /internal and /pkg directories and nothing else. Examples: https://github.com/heptio/ark/tree/master/cmd (just a really small main function with everything else in packages) https://github.com/moby/moby/tree/master/cmd https://github.com/prometheus/prometheus/tree/master/cmd https://github.com/influxdata/influxdb/tree/master/cmd https://github.com/kubernetes/kubernetes/tree/master/cmd https://github.com/satellity/satellity/tree/master/cmd/satellity https://github.com/dapr/dapr/tree/master/cmd","title":"`/cmd`"},{"location":"samples-go/appdata/cmd/index.html#cmd","text":"Main applications for this project. The directory name for each application should match the name of the executable you want to have (e.g., /cmd/myapp ). Don't put a lot of code in the application directory. If you think the code can be imported and used in other projects, then it should live in the /pkg directory. If the code is not reusable or if you don't want others to reuse it, put that code in the /internal directory. You'll be surprised what others will do, so be explicit about your intentions! It's common to have a small main function that imports and invokes the code from the /internal and /pkg directories and nothing else. Examples: https://github.com/heptio/ark/tree/master/cmd (just a really small main function with everything else in packages) https://github.com/moby/moby/tree/master/cmd https://github.com/prometheus/prometheus/tree/master/cmd https://github.com/influxdata/influxdb/tree/master/cmd https://github.com/kubernetes/kubernetes/tree/master/cmd https://github.com/satellity/satellity/tree/master/cmd/satellity https://github.com/dapr/dapr/tree/master/cmd","title":"/cmd"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html","text":"jwt-go \u00b6 A go (or 'golang' for search engine friendliness) implementation of JSON Web Tokens . IMPORT PATH CHANGE: Starting from v3.2.1 , the import path has changed from github.com/dgrijalva/jwt-go to github.com/golang-jwt/jwt . After the original author of the library suggested migrating the maintenance of jwt-go , a dedicated team of open source maintainers decided to clone the existing library into this repository. See dgrijalva/jwt-go#462 for a detailed discussion on this topic. Future releases will be using the github.com/golang-jwt/jwt import path and continue the existing versioning scheme of v3.x.x+incompatible . Backwards-compatible patches and fixes will be done on the v3 release branch, where as new build-breaking features will be developed in a v4 release, possibly including a SIV-style import path. SECURITY NOTICE: Some older versions of Go have a security issue in the crypto/elliptic. Recommendation is to upgrade to at least 1.15 See issue dgrijalva/jwt-go#216 for more detail. SECURITY NOTICE: It's important that you validate the alg presented is what you expect . This library attempts to make it easy to do the right thing by requiring key types match the expected alg, but you should take the extra step to verify it in your usage. See the examples provided. Supported Go versions \u00b6 Our support of Go versions is aligned with Go's version release policy . So we will support a major version of Go until there are two newer major releases. We no longer support building jwt-go with unsupported Go versions, as these contain security vulnerabilities which will not be fixed. What the heck is a JWT? \u00b6 JWT.io has a great introduction to JSON Web Tokens. In short, it's a signed JSON object that does something useful (for example, authentication). It's commonly used for Bearer tokens in Oauth 2. A token is made of three parts, separated by . 's. The first two parts are JSON objects, that have been base64url encoded. The last part is the signature, encoded the same way. The first part is called the header. It contains the necessary information for verifying the last part, the signature. For example, which encryption method was used for signing and what key was used. The part in the middle is the interesting bit. It's called the Claims and contains the actual stuff you care about. Refer to RFC 7519 for information about reserved keys and the proper way to add your own. What's in the box? \u00b6 This library supports the parsing and verification as well as the generation and signing of JWTs. Current supported signing algorithms are HMAC SHA, RSA, RSA-PSS, and ECDSA, though hooks are present for adding your own. Examples \u00b6 See the project documentation for examples of usage: Simple example of parsing and validating a token Simple example of building and signing a token Directory of Examples Extensions \u00b6 This library publishes all the necessary components for adding your own signing methods. Simply implement the SigningMethod interface and register a factory method using RegisterSigningMethod . Here's an example of an extension that integrates with multiple Google Cloud Platform signing tools (AppEngine, IAM API, Cloud KMS): https://github.com/someone1/gcp-jwt-go Compliance \u00b6 This library was last reviewed to comply with RTF 7519 dated May 2015 with a few notable differences: In order to protect against accidental use of Unsecured JWTs , tokens using alg=none will only be accepted if the constant jwt.UnsafeAllowNoneSignatureType is provided as the key. Project Status & Versioning \u00b6 This library is considered production ready. Feedback and feature requests are appreciated. The API should be considered stable. There should be very few backwards-incompatible changes outside of major version updates (and only with good reason). This project uses Semantic Versioning 2.0.0 . Accepted pull requests will land on main . Periodically, versions will be tagged from main . You can find all the releases on the project releases page . While we try to make it obvious when we make breaking changes, there isn't a great mechanism for pushing announcements out to users. You may want to use this alternative package include: gopkg.in/golang-jwt/jwt.v3 . It will do the right thing WRT semantic versioning. BREAKING CHANGES: * * Version 3.0.0 includes a lot of changes from the 2.x line, including a few that break the API. We've tried to break as few things as possible, so there should just be a few type signature changes. A full list of breaking changes is available in VERSION_HISTORY.md . See MIGRATION_GUIDE.md for more information on updating your code. Usage Tips \u00b6 Signing vs Encryption \u00b6 A token is simply a JSON object that is signed by its author. this tells you exactly two things about the data: The author of the token was in the possession of the signing secret The data has not been modified since it was signed It's important to know that JWT does not provide encryption, which means anyone who has access to the token can read its contents. If you need to protect (encrypt) the data, there is a companion spec, JWE , that provides this functionality. JWE is currently outside the scope of this library. Choosing a Signing Method \u00b6 There are several signing methods available, and you should probably take the time to learn about the various options before choosing one. The principal design decision is most likely going to be symmetric vs asymmetric. Symmetric signing methods, such as HSA, use only a single secret. This is probably the simplest signing method to use since any []byte can be used as a valid secret. They are also slightly computationally faster to use, though this rarely is enough to matter. Symmetric signing methods work the best when both producers and consumers of tokens are trusted, or even the same system. Since the same secret is used to both sign and validate tokens, you can't easily distribute the key for validation. Asymmetric signing methods, such as RSA, use different keys for signing and verifying tokens. This makes it possible to produce tokens with a private key, and allow any consumer to access the public key for verification. Signing Methods and Key Types \u00b6 Each signing method expects a different object type for its signing keys. See the package documentation for details. Here are the most common ones: The HMAC signing method ( HS256 , HS384 , HS512 ) expect []byte values for signing and validation The RSA signing method ( RS256 , RS384 , RS512 ) expect *rsa.PrivateKey for signing and *rsa.PublicKey for validation The ECDSA signing method ( ES256 , ES384 , ES512 ) expect *ecdsa.PrivateKey for signing and *ecdsa.PublicKey for validation JWT and OAuth \u00b6 It's worth mentioning that OAuth and JWT are not the same thing. A JWT token is simply a signed JSON object. It can be used anywhere such a thing is useful. There is some confusion, though, as JWT is the most common type of bearer token used in OAuth2 authentication. Without going too far down the rabbit hole, here's a description of the interaction of these technologies: OAuth is a protocol for allowing an identity provider to be separate from the service a user is logging in to. For example, whenever you use Facebook to log into a different service (Yelp, Spotify, etc), you are using OAuth. OAuth defines several options for passing around authentication data. One popular method is called a \"bearer token\". A bearer token is simply a string that should only be held by an authenticated user. Thus, simply presenting this token proves your identity. You can probably derive from here why a JWT might make a good bearer token. Because bearer tokens are used for authentication, it's important they're kept secret. This is why transactions that use bearer tokens typically happen over SSL. Troubleshooting \u00b6 This library uses descriptive error messages whenever possible. If you are not getting the expected result, have a look at the errors. The most common place people get stuck is providing the correct type of key to the parser. See the above section on signing methods and key types. More \u00b6 Documentation can be found on pkg.go.dev . The command line utility included in this project (cmd/jwt) provides a straightforward example of token creation and parsing as well as a useful tool for debugging your own integration. You'll also find several implementation examples in the documentation.","title":"jwt-go"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#jwt-go","text":"A go (or 'golang' for search engine friendliness) implementation of JSON Web Tokens . IMPORT PATH CHANGE: Starting from v3.2.1 , the import path has changed from github.com/dgrijalva/jwt-go to github.com/golang-jwt/jwt . After the original author of the library suggested migrating the maintenance of jwt-go , a dedicated team of open source maintainers decided to clone the existing library into this repository. See dgrijalva/jwt-go#462 for a detailed discussion on this topic. Future releases will be using the github.com/golang-jwt/jwt import path and continue the existing versioning scheme of v3.x.x+incompatible . Backwards-compatible patches and fixes will be done on the v3 release branch, where as new build-breaking features will be developed in a v4 release, possibly including a SIV-style import path. SECURITY NOTICE: Some older versions of Go have a security issue in the crypto/elliptic. Recommendation is to upgrade to at least 1.15 See issue dgrijalva/jwt-go#216 for more detail. SECURITY NOTICE: It's important that you validate the alg presented is what you expect . This library attempts to make it easy to do the right thing by requiring key types match the expected alg, but you should take the extra step to verify it in your usage. See the examples provided.","title":"jwt-go"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#supported-go-versions","text":"Our support of Go versions is aligned with Go's version release policy . So we will support a major version of Go until there are two newer major releases. We no longer support building jwt-go with unsupported Go versions, as these contain security vulnerabilities which will not be fixed.","title":"Supported Go versions"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#what-the-heck-is-a-jwt","text":"JWT.io has a great introduction to JSON Web Tokens. In short, it's a signed JSON object that does something useful (for example, authentication). It's commonly used for Bearer tokens in Oauth 2. A token is made of three parts, separated by . 's. The first two parts are JSON objects, that have been base64url encoded. The last part is the signature, encoded the same way. The first part is called the header. It contains the necessary information for verifying the last part, the signature. For example, which encryption method was used for signing and what key was used. The part in the middle is the interesting bit. It's called the Claims and contains the actual stuff you care about. Refer to RFC 7519 for information about reserved keys and the proper way to add your own.","title":"What the heck is a JWT?"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#whats-in-the-box","text":"This library supports the parsing and verification as well as the generation and signing of JWTs. Current supported signing algorithms are HMAC SHA, RSA, RSA-PSS, and ECDSA, though hooks are present for adding your own.","title":"What's in the box?"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#examples","text":"See the project documentation for examples of usage: Simple example of parsing and validating a token Simple example of building and signing a token Directory of Examples","title":"Examples"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#extensions","text":"This library publishes all the necessary components for adding your own signing methods. Simply implement the SigningMethod interface and register a factory method using RegisterSigningMethod . Here's an example of an extension that integrates with multiple Google Cloud Platform signing tools (AppEngine, IAM API, Cloud KMS): https://github.com/someone1/gcp-jwt-go","title":"Extensions"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#compliance","text":"This library was last reviewed to comply with RTF 7519 dated May 2015 with a few notable differences: In order to protect against accidental use of Unsecured JWTs , tokens using alg=none will only be accepted if the constant jwt.UnsafeAllowNoneSignatureType is provided as the key.","title":"Compliance"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#project-status-versioning","text":"This library is considered production ready. Feedback and feature requests are appreciated. The API should be considered stable. There should be very few backwards-incompatible changes outside of major version updates (and only with good reason). This project uses Semantic Versioning 2.0.0 . Accepted pull requests will land on main . Periodically, versions will be tagged from main . You can find all the releases on the project releases page . While we try to make it obvious when we make breaking changes, there isn't a great mechanism for pushing announcements out to users. You may want to use this alternative package include: gopkg.in/golang-jwt/jwt.v3 . It will do the right thing WRT semantic versioning. BREAKING CHANGES: * * Version 3.0.0 includes a lot of changes from the 2.x line, including a few that break the API. We've tried to break as few things as possible, so there should just be a few type signature changes. A full list of breaking changes is available in VERSION_HISTORY.md . See MIGRATION_GUIDE.md for more information on updating your code.","title":"Project Status &amp; Versioning"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#usage-tips","text":"","title":"Usage Tips"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#signing-vs-encryption","text":"A token is simply a JSON object that is signed by its author. this tells you exactly two things about the data: The author of the token was in the possession of the signing secret The data has not been modified since it was signed It's important to know that JWT does not provide encryption, which means anyone who has access to the token can read its contents. If you need to protect (encrypt) the data, there is a companion spec, JWE , that provides this functionality. JWE is currently outside the scope of this library.","title":"Signing vs Encryption"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#choosing-a-signing-method","text":"There are several signing methods available, and you should probably take the time to learn about the various options before choosing one. The principal design decision is most likely going to be symmetric vs asymmetric. Symmetric signing methods, such as HSA, use only a single secret. This is probably the simplest signing method to use since any []byte can be used as a valid secret. They are also slightly computationally faster to use, though this rarely is enough to matter. Symmetric signing methods work the best when both producers and consumers of tokens are trusted, or even the same system. Since the same secret is used to both sign and validate tokens, you can't easily distribute the key for validation. Asymmetric signing methods, such as RSA, use different keys for signing and verifying tokens. This makes it possible to produce tokens with a private key, and allow any consumer to access the public key for verification.","title":"Choosing a Signing Method"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#signing-methods-and-key-types","text":"Each signing method expects a different object type for its signing keys. See the package documentation for details. Here are the most common ones: The HMAC signing method ( HS256 , HS384 , HS512 ) expect []byte values for signing and validation The RSA signing method ( RS256 , RS384 , RS512 ) expect *rsa.PrivateKey for signing and *rsa.PublicKey for validation The ECDSA signing method ( ES256 , ES384 , ES512 ) expect *ecdsa.PrivateKey for signing and *ecdsa.PublicKey for validation","title":"Signing Methods and Key Types"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#jwt-and-oauth","text":"It's worth mentioning that OAuth and JWT are not the same thing. A JWT token is simply a signed JSON object. It can be used anywhere such a thing is useful. There is some confusion, though, as JWT is the most common type of bearer token used in OAuth2 authentication. Without going too far down the rabbit hole, here's a description of the interaction of these technologies: OAuth is a protocol for allowing an identity provider to be separate from the service a user is logging in to. For example, whenever you use Facebook to log into a different service (Yelp, Spotify, etc), you are using OAuth. OAuth defines several options for passing around authentication data. One popular method is called a \"bearer token\". A bearer token is simply a string that should only be held by an authenticated user. Thus, simply presenting this token proves your identity. You can probably derive from here why a JWT might make a good bearer token. Because bearer tokens are used for authentication, it's important they're kept secret. This is why transactions that use bearer tokens typically happen over SSL.","title":"JWT and OAuth"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#troubleshooting","text":"This library uses descriptive error messages whenever possible. If you are not getting the expected result, have a look at the errors. The most common place people get stuck is providing the correct type of key to the parser. See the above section on signing methods and key types.","title":"Troubleshooting"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/index.html#more","text":"Documentation can be found on pkg.go.dev . The command line utility included in this project (cmd/jwt) provides a straightforward example of token creation and parsing as well as a useful tool for debugging your own integration. You'll also find several implementation examples in the documentation.","title":"More"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/MIGRATION_GUIDE.html","text":"Migration Guide (v3.2.1) \u00b6 Starting from v3.2.1 , the import path has changed from github.com/dgrijalva/jwt-go to github.com/golang-jwt/jwt . Future releases will be using the github.com/golang-jwt/jwt import path and continue the existing versioning scheme of v3.x.x+incompatible . Backwards-compatible patches and fixes will be done on the v3 release branch, where as new build-breaking features will be developed in a v4 release, possibly including a SIV-style import path. go.mod replacement \u00b6 In a first step, the easiest way is to use go mod edit to issue a replacement. go mod edit -replace github.com/dgrijalva/jwt-go=github.com/golang-jwt/jwt@v3.2.1+incompatible go mod tidy This will still keep the old import path in your code but replace it with the new package and also introduce a new indirect dependency to github.com/golang-jwt/jwt . Try to compile your project; it should still work. Cleanup \u00b6 If your code still consistently builds, you can replace all occurences of github.com/dgrijalva/jwt-go with github.com/golang-jwt/jwt , either manually or by using tools such as sed . Finally, the replace directive in the go.mod file can be removed. Older releases (before v3.2.0) \u00b6 The original migration guide for older releases can be found at https://github.com/dgrijalva/jwt-go/blob/master/MIGRATION_GUIDE.md.","title":"MIGRATION GUIDE"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/MIGRATION_GUIDE.html#migration-guide-v321","text":"Starting from v3.2.1 , the import path has changed from github.com/dgrijalva/jwt-go to github.com/golang-jwt/jwt . Future releases will be using the github.com/golang-jwt/jwt import path and continue the existing versioning scheme of v3.x.x+incompatible . Backwards-compatible patches and fixes will be done on the v3 release branch, where as new build-breaking features will be developed in a v4 release, possibly including a SIV-style import path.","title":"Migration Guide (v3.2.1)"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/MIGRATION_GUIDE.html#gomod-replacement","text":"In a first step, the easiest way is to use go mod edit to issue a replacement. go mod edit -replace github.com/dgrijalva/jwt-go=github.com/golang-jwt/jwt@v3.2.1+incompatible go mod tidy This will still keep the old import path in your code but replace it with the new package and also introduce a new indirect dependency to github.com/golang-jwt/jwt . Try to compile your project; it should still work.","title":"go.mod replacement"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/MIGRATION_GUIDE.html#cleanup","text":"If your code still consistently builds, you can replace all occurences of github.com/dgrijalva/jwt-go with github.com/golang-jwt/jwt , either manually or by using tools such as sed . Finally, the replace directive in the go.mod file can be removed.","title":"Cleanup"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/MIGRATION_GUIDE.html#older-releases-before-v320","text":"The original migration guide for older releases can be found at https://github.com/dgrijalva/jwt-go/blob/master/MIGRATION_GUIDE.md.","title":"Older releases (before v3.2.0)"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html","text":"jwt-go Version History \u00b6 3.2.2 \u00b6 Starting from this release, we are adopting the policy to support the most 2 recent versions of Go currently available. By the time of this release, this is Go 1.15 and 1.16 ( #28 ). Fixed a potential issue that could occur when the verification of exp , iat or nbf was not required and contained invalid contents, i.e. non-numeric/date. Thanks for @thaJeztah for making us aware of that and @giorgos-f3 for originally reporting it to the formtech fork ( #40 ). Added support for EdDSA / ED25519 ( #36 ). Optimized allocations ( #33 ). 3.2.1 \u00b6 Import Path Change : See MIGRATION_GUIDE.md for tips on updating your code Changed the import path from github.com/dgrijalva/jwt-go to github.com/golang-jwt/jwt Fixed type confusing issue between string and []string in VerifyAudience ( #12 ). This fixes CVE-2020-26160 3.2.0 \u00b6 Added method ParseUnverified to allow users to split up the tasks of parsing and validation HMAC signing method returns ErrInvalidKeyType instead of ErrInvalidKey where appropriate Added options to request.ParseFromRequest , which allows for an arbitrary list of modifiers to parsing behavior. Initial set include WithClaims and WithParser . Existing usage of this function will continue to work as before. Deprecated ParseFromRequestWithClaims to simplify API in the future. 3.1.0 \u00b6 Improvements to jwt command line tool Added SkipClaimsValidation option to Parser Documentation updates 3.0.0 \u00b6 Compatibility Breaking Changes : See MIGRATION_GUIDE.md for tips on updating your code Dropped support for []byte keys when using RSA signing methods. This convenience feature could contribute to security vulnerabilities involving mismatched key types with signing methods. ParseFromRequest has been moved to request subpackage and usage has changed The Claims property on Token is now type Claims instead of map[string]interface{} . The default value is type MapClaims , which is an alias to map[string]interface{} . This makes it possible to use a custom type when decoding claims. Other Additions and Changes Added Claims interface type to allow users to decode the claims into a custom type Added ParseWithClaims , which takes a third argument of type Claims . Use this function instead of Parse if you have a custom type you'd like to decode into. Dramatically improved the functionality and flexibility of ParseFromRequest , which is now in the request subpackage Added ParseFromRequestWithClaims which is the FromRequest equivalent of ParseWithClaims Added new interface type Extractor , which is used for extracting JWT strings from http requests. Used with ParseFromRequest and ParseFromRequestWithClaims . Added several new, more specific, validation errors to error type bitmask Moved examples from README to executable example files Signing method registry is now thread safe Added new property to ValidationError , which contains the raw error returned by calls made by parse/verify (such as those returned by keyfunc or json parser) 2.7.0 \u00b6 This will likely be the last backwards compatible release before 3.0.0, excluding essential bug fixes. Added new option -show to the jwt command that will just output the decoded token without verifying Error text for expired tokens includes how long it's been expired Fixed incorrect error returned from ParseRSAPublicKeyFromPEM Documentation updates 2.6.0 \u00b6 Exposed inner error within ValidationError Fixed validation errors when using UseJSONNumber flag Added several unit tests 2.5.0 \u00b6 Added support for signing method none. You shouldn't use this. The API tries to make this clear. Updated/fixed some documentation Added more helpful error message when trying to parse tokens that begin with BEARER 2.4.0 \u00b6 Added new type, Parser, to allow for configuration of various parsing parameters You can now specify a list of valid signing methods. Anything outside this set will be rejected. You can now opt to use the json.Number type instead of float64 when parsing token JSON Added support for Travis CI Fixed some bugs with ECDSA parsing 2.3.0 \u00b6 Added support for ECDSA signing methods Added support for RSA PSS signing methods (requires go v1.4) 2.2.0 \u00b6 Gracefully handle a nil Keyfunc being passed to Parse . Result will now be the parsed token and an error, instead of a panic. 2.1.0 \u00b6 Backwards compatible API change that was missed in 2.0.0. The SignedString method on Token now takes interface{} instead of []byte 2.0.0 \u00b6 There were two major reasons for breaking backwards compatibility with this update. The first was a refactor required to expand the width of the RSA and HMAC-SHA signing implementations. There will likely be no required code changes to support this change. The second update, while unfortunately requiring a small change in integration, is required to open up this library to other signing methods. Not all keys used for all signing methods have a single standard on-disk representation. Requiring []byte as the type for all keys proved too limiting. Additionally, this implementation allows for pre-parsed tokens to be reused, which might matter in an application that parses a high volume of tokens with a small set of keys. Backwards compatibilty has been maintained for passing []byte to the RSA signing methods, but they will also accept *rsa.PublicKey and *rsa.PrivateKey . It is likely the only integration change required here will be to change func(t *jwt.Token) ([]byte, error) to func(t *jwt.Token) (interface{}, error) when calling Parse . Compatibility Breaking Changes SigningMethodHS256 is now *SigningMethodHMAC instead of type struct SigningMethodRS256 is now *SigningMethodRSA instead of type struct KeyFunc now returns interface{} instead of []byte SigningMethod.Sign now takes interface{} instead of []byte for the key SigningMethod.Verify now takes interface{} instead of []byte for the key Renamed type SigningMethodHS256 to SigningMethodHMAC . Specific sizes are now just instances of this type. Added public package global SigningMethodHS256 Added public package global SigningMethodHS384 Added public package global SigningMethodHS512 Renamed type SigningMethodRS256 to SigningMethodRSA . Specific sizes are now just instances of this type. Added public package global SigningMethodRS256 Added public package global SigningMethodRS384 Added public package global SigningMethodRS512 Moved sample private key for HMAC tests from an inline value to a file on disk. Value is unchanged. Refactored the RSA implementation to be easier to read Exposed helper methods ParseRSAPrivateKeyFromPEM and ParseRSAPublicKeyFromPEM 1.0.2 \u00b6 Fixed bug in parsing public keys from certificates Added more tests around the parsing of keys for RS256 Code refactoring in RS256 implementation. No functional changes 1.0.1 \u00b6 Fixed panic if RS256 signing method was passed an invalid key 1.0.0 \u00b6 First versioned release API stabilized Supports creating, signing, parsing, and validating JWT tokens Supports RS256 and HS256 signing methods","title":"VERSION HISTORY"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#jwt-go-version-history","text":"","title":"jwt-go Version History"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#322","text":"Starting from this release, we are adopting the policy to support the most 2 recent versions of Go currently available. By the time of this release, this is Go 1.15 and 1.16 ( #28 ). Fixed a potential issue that could occur when the verification of exp , iat or nbf was not required and contained invalid contents, i.e. non-numeric/date. Thanks for @thaJeztah for making us aware of that and @giorgos-f3 for originally reporting it to the formtech fork ( #40 ). Added support for EdDSA / ED25519 ( #36 ). Optimized allocations ( #33 ).","title":"3.2.2"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#321","text":"Import Path Change : See MIGRATION_GUIDE.md for tips on updating your code Changed the import path from github.com/dgrijalva/jwt-go to github.com/golang-jwt/jwt Fixed type confusing issue between string and []string in VerifyAudience ( #12 ). This fixes CVE-2020-26160","title":"3.2.1"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#320","text":"Added method ParseUnverified to allow users to split up the tasks of parsing and validation HMAC signing method returns ErrInvalidKeyType instead of ErrInvalidKey where appropriate Added options to request.ParseFromRequest , which allows for an arbitrary list of modifiers to parsing behavior. Initial set include WithClaims and WithParser . Existing usage of this function will continue to work as before. Deprecated ParseFromRequestWithClaims to simplify API in the future.","title":"3.2.0"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#310","text":"Improvements to jwt command line tool Added SkipClaimsValidation option to Parser Documentation updates","title":"3.1.0"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#300","text":"Compatibility Breaking Changes : See MIGRATION_GUIDE.md for tips on updating your code Dropped support for []byte keys when using RSA signing methods. This convenience feature could contribute to security vulnerabilities involving mismatched key types with signing methods. ParseFromRequest has been moved to request subpackage and usage has changed The Claims property on Token is now type Claims instead of map[string]interface{} . The default value is type MapClaims , which is an alias to map[string]interface{} . This makes it possible to use a custom type when decoding claims. Other Additions and Changes Added Claims interface type to allow users to decode the claims into a custom type Added ParseWithClaims , which takes a third argument of type Claims . Use this function instead of Parse if you have a custom type you'd like to decode into. Dramatically improved the functionality and flexibility of ParseFromRequest , which is now in the request subpackage Added ParseFromRequestWithClaims which is the FromRequest equivalent of ParseWithClaims Added new interface type Extractor , which is used for extracting JWT strings from http requests. Used with ParseFromRequest and ParseFromRequestWithClaims . Added several new, more specific, validation errors to error type bitmask Moved examples from README to executable example files Signing method registry is now thread safe Added new property to ValidationError , which contains the raw error returned by calls made by parse/verify (such as those returned by keyfunc or json parser)","title":"3.0.0"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#270","text":"This will likely be the last backwards compatible release before 3.0.0, excluding essential bug fixes. Added new option -show to the jwt command that will just output the decoded token without verifying Error text for expired tokens includes how long it's been expired Fixed incorrect error returned from ParseRSAPublicKeyFromPEM Documentation updates","title":"2.7.0"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#260","text":"Exposed inner error within ValidationError Fixed validation errors when using UseJSONNumber flag Added several unit tests","title":"2.6.0"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#250","text":"Added support for signing method none. You shouldn't use this. The API tries to make this clear. Updated/fixed some documentation Added more helpful error message when trying to parse tokens that begin with BEARER","title":"2.5.0"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#240","text":"Added new type, Parser, to allow for configuration of various parsing parameters You can now specify a list of valid signing methods. Anything outside this set will be rejected. You can now opt to use the json.Number type instead of float64 when parsing token JSON Added support for Travis CI Fixed some bugs with ECDSA parsing","title":"2.4.0"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#230","text":"Added support for ECDSA signing methods Added support for RSA PSS signing methods (requires go v1.4)","title":"2.3.0"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#220","text":"Gracefully handle a nil Keyfunc being passed to Parse . Result will now be the parsed token and an error, instead of a panic.","title":"2.2.0"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#210","text":"Backwards compatible API change that was missed in 2.0.0. The SignedString method on Token now takes interface{} instead of []byte","title":"2.1.0"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#200","text":"There were two major reasons for breaking backwards compatibility with this update. The first was a refactor required to expand the width of the RSA and HMAC-SHA signing implementations. There will likely be no required code changes to support this change. The second update, while unfortunately requiring a small change in integration, is required to open up this library to other signing methods. Not all keys used for all signing methods have a single standard on-disk representation. Requiring []byte as the type for all keys proved too limiting. Additionally, this implementation allows for pre-parsed tokens to be reused, which might matter in an application that parses a high volume of tokens with a small set of keys. Backwards compatibilty has been maintained for passing []byte to the RSA signing methods, but they will also accept *rsa.PublicKey and *rsa.PrivateKey . It is likely the only integration change required here will be to change func(t *jwt.Token) ([]byte, error) to func(t *jwt.Token) (interface{}, error) when calling Parse . Compatibility Breaking Changes SigningMethodHS256 is now *SigningMethodHMAC instead of type struct SigningMethodRS256 is now *SigningMethodRSA instead of type struct KeyFunc now returns interface{} instead of []byte SigningMethod.Sign now takes interface{} instead of []byte for the key SigningMethod.Verify now takes interface{} instead of []byte for the key Renamed type SigningMethodHS256 to SigningMethodHMAC . Specific sizes are now just instances of this type. Added public package global SigningMethodHS256 Added public package global SigningMethodHS384 Added public package global SigningMethodHS512 Renamed type SigningMethodRS256 to SigningMethodRSA . Specific sizes are now just instances of this type. Added public package global SigningMethodRS256 Added public package global SigningMethodRS384 Added public package global SigningMethodRS512 Moved sample private key for HMAC tests from an inline value to a file on disk. Value is unchanged. Refactored the RSA implementation to be easier to read Exposed helper methods ParseRSAPrivateKeyFromPEM and ParseRSAPublicKeyFromPEM","title":"2.0.0"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#102","text":"Fixed bug in parsing public keys from certificates Added more tests around the parsing of keys for RS256 Code refactoring in RS256 implementation. No functional changes","title":"1.0.2"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#101","text":"Fixed panic if RS256 signing method was passed an invalid key","title":"1.0.1"},{"location":"samples-go/appdata/vendor/github.com/golang-jwt/jwt/VERSION_HISTORY.html#100","text":"First versioned release API stabilized Supports creating, signing, parsing, and validating JWT tokens Supports RS256 and HS256 signing methods","title":"1.0.0"},{"location":"samples-go/datalayer.client/index.html","text":"Example ctrlX Data Layer Client \u00b6 Introduction \u00b6 The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console. Function Description \u00b6 The app connects to the ctrlX Data Layer using either port 8443 or 443. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop. If the Data Layer connection breaks the app will exit. After 10s it will be automatically restarted by snapd. Prerequisites \u00b6 See the description on ctrlX Data Layer client and provider library for golang Visual Studio Code \u00b6 To use Golang within Visual Studio Code, we recommend using the Go for Visual Studio Code extension. The corresponding documentation can also be found under this link. Open this project folder directly, then the go build environment is set correctly. Building \u00b6 Dependency updates with go mod tidy Build the executable with go build ./cmd/... Build the snap with snapcraft --destructive-mode License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Example ctrlX Data Layer Client"},{"location":"samples-go/datalayer.client/index.html#example-ctrlx-data-layer-client","text":"","title":"Example ctrlX Data Layer Client"},{"location":"samples-go/datalayer.client/index.html#introduction","text":"The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console.","title":"Introduction"},{"location":"samples-go/datalayer.client/index.html#function-description","text":"The app connects to the ctrlX Data Layer using either port 8443 or 443. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop. If the Data Layer connection breaks the app will exit. After 10s it will be automatically restarted by snapd.","title":"Function Description"},{"location":"samples-go/datalayer.client/index.html#prerequisites","text":"See the description on ctrlX Data Layer client and provider library for golang","title":"Prerequisites"},{"location":"samples-go/datalayer.client/index.html#visual-studio-code","text":"To use Golang within Visual Studio Code, we recommend using the Go for Visual Studio Code extension. The corresponding documentation can also be found under this link. Open this project folder directly, then the go build environment is set correctly.","title":"Visual Studio Code"},{"location":"samples-go/datalayer.client/index.html#building","text":"Dependency updates with go mod tidy Build the executable with go build ./cmd/... Build the snap with snapcraft --destructive-mode","title":"Building"},{"location":"samples-go/datalayer.client/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-go/datalayer.provider/index.html","text":"Example ctrlX Data Layer Provider \u00b6 Introduction \u00b6 The app demonstrates how a Data Layer connecion is established and a string and flatbuffers node are provided. Function Description \u00b6 The app connects to the ctrlX Data Layer and provides a string and flatbuffers node . If the Data Layer connection breaks the app will exit. After 10s it will be automatically restarted by snapd. Prerequisites \u00b6 see the description on ctrlX Data Layer client and provider library for golang Visual Studio Code \u00b6 To use Go within Visual Studio Code, we recommend using the Go for Visual Studio Code extension. The corresponding documentation can also be found under this link. Open this project folder directly, then the go build environment is set correctly. Compile Flatbuffers Schema \u00b6 This app uses a flatbuffer defined in the schema file sampleSchema.fbs. From this schema file we have to create a binary file which is registered on the ctrlX and a golang structure to create and access the defined flatbuffer data. These tasks can be done with the command line tool flatc. This tool is provided by this SDK under /bin/oss.flatbuffers/..insert OS version here../release/ Do following steps - OS version here is 'ubuntu20-gcc-x64': chmod +x ../../bin/oss.flatbuffers/ubuntu20-gcc-x64/release/flatc Create a binary flatbuffers file: ../../bin/oss.flatbuffers/ubuntu20-gcc-x64/release/flatc -o bfbs/ -b --schema fbs/sampleSchema.fbs Generate the Go code: ../../bin/oss.flatbuffers/ubuntu20-gcc-x64/release/flatc --go fbs/sampleSchema.fbs The generated code is stored in sample/schema/InertialValue.go Building \u00b6 Dependency updates with go mod tidy Build the executable with go build ./cmd/... Build the snap with snapcraft --destructive-mode License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Example ctrlX Data Layer Provider"},{"location":"samples-go/datalayer.provider/index.html#example-ctrlx-data-layer-provider","text":"","title":"Example ctrlX Data Layer Provider"},{"location":"samples-go/datalayer.provider/index.html#introduction","text":"The app demonstrates how a Data Layer connecion is established and a string and flatbuffers node are provided.","title":"Introduction"},{"location":"samples-go/datalayer.provider/index.html#function-description","text":"The app connects to the ctrlX Data Layer and provides a string and flatbuffers node . If the Data Layer connection breaks the app will exit. After 10s it will be automatically restarted by snapd.","title":"Function Description"},{"location":"samples-go/datalayer.provider/index.html#prerequisites","text":"see the description on ctrlX Data Layer client and provider library for golang","title":"Prerequisites"},{"location":"samples-go/datalayer.provider/index.html#visual-studio-code","text":"To use Go within Visual Studio Code, we recommend using the Go for Visual Studio Code extension. The corresponding documentation can also be found under this link. Open this project folder directly, then the go build environment is set correctly.","title":"Visual Studio Code"},{"location":"samples-go/datalayer.provider/index.html#compile-flatbuffers-schema","text":"This app uses a flatbuffer defined in the schema file sampleSchema.fbs. From this schema file we have to create a binary file which is registered on the ctrlX and a golang structure to create and access the defined flatbuffer data. These tasks can be done with the command line tool flatc. This tool is provided by this SDK under /bin/oss.flatbuffers/..insert OS version here../release/ Do following steps - OS version here is 'ubuntu20-gcc-x64': chmod +x ../../bin/oss.flatbuffers/ubuntu20-gcc-x64/release/flatc Create a binary flatbuffers file: ../../bin/oss.flatbuffers/ubuntu20-gcc-x64/release/flatc -o bfbs/ -b --schema fbs/sampleSchema.fbs Generate the Go code: ../../bin/oss.flatbuffers/ubuntu20-gcc-x64/release/flatc --go fbs/sampleSchema.fbs The generated code is stored in sample/schema/InertialValue.go","title":"Compile Flatbuffers Schema"},{"location":"samples-go/datalayer.provider/index.html#building","text":"Dependency updates with go mod tidy Build the executable with go build ./cmd/... Build the snap with snapcraft --destructive-mode","title":"Building"},{"location":"samples-go/datalayer.provider/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-go/hello.webserver/index.html","text":"Example hello.webserver \u00b6 The sample hello-webserver contains simple webserver. Indroduction \u00b6 Pre-requisites \u00b6 Recommended: ctrlX WORKS App Build Environment (QEMU Virtual Machine) - see Setup ctrlX CORE virtual or ctrlX CORE Getting Started \u00b6 Launch Visual Studio Code Open the sample directory samples-go/hello-webserver Build and install the snap as described in Setup section Check output in the web interface Detailed Informations \u00b6 For the best webserver integration take a look at package-manifest Screenshots \u00b6 Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Community License \u00b6 MIT License Copyright (c) 2020 - 2021, Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Example hello.webserver"},{"location":"samples-go/hello.webserver/index.html#example-hellowebserver","text":"The sample hello-webserver contains simple webserver.","title":"Example hello.webserver"},{"location":"samples-go/hello.webserver/index.html#indroduction","text":"","title":"Indroduction"},{"location":"samples-go/hello.webserver/index.html#pre-requisites","text":"Recommended: ctrlX WORKS App Build Environment (QEMU Virtual Machine) - see Setup ctrlX CORE virtual or ctrlX CORE","title":"Pre-requisites"},{"location":"samples-go/hello.webserver/index.html#getting-started","text":"Launch Visual Studio Code Open the sample directory samples-go/hello-webserver Build and install the snap as described in Setup section Check output in the web interface","title":"Getting Started"},{"location":"samples-go/hello.webserver/index.html#detailed-informations","text":"For the best webserver integration take a look at package-manifest","title":"Detailed Informations"},{"location":"samples-go/hello.webserver/index.html#screenshots","text":"","title":"Screenshots"},{"location":"samples-go/hello.webserver/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Community","title":"Support"},{"location":"samples-go/hello.webserver/index.html#license","text":"MIT License Copyright (c) 2020 - 2021, Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-go/tpm2.srk/index.html","text":"README tpm2.srk \u00b6 The sample app tpm2.srk shows the basic usage of a TPM2 in Golang with go-tpm and go-tpm-tools. Also see \"TPM2\" . Introduction \u00b6 It demonstrates how you can use the TPM2.0 of the ctrlX CORE or the emulated TPM2.0 on the ctrlX CORE virtual inside a Golang application. Getting Started \u00b6 cd samples-go/tpm2.srk go build ./cmd/tpm2 export TPM2_SOCKET = \"<path to socket>\" ./tpm2 create ./tpm2 load Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Community License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README tpm2.srk"},{"location":"samples-go/tpm2.srk/index.html#readme-tpm2srk","text":"The sample app tpm2.srk shows the basic usage of a TPM2 in Golang with go-tpm and go-tpm-tools. Also see \"TPM2\" .","title":"README tpm2.srk"},{"location":"samples-go/tpm2.srk/index.html#introduction","text":"It demonstrates how you can use the TPM2.0 of the ctrlX CORE or the emulated TPM2.0 on the ctrlX CORE virtual inside a Golang application.","title":"Introduction"},{"location":"samples-go/tpm2.srk/index.html#getting-started","text":"cd samples-go/tpm2.srk go build ./cmd/tpm2 export TPM2_SOCKET = \"<path to socket>\" ./tpm2 create ./tpm2 load","title":"Getting Started"},{"location":"samples-go/tpm2.srk/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Community","title":"Support"},{"location":"samples-go/tpm2.srk/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-iec61131/index.html","text":"This directory contains IEC 61131-3 code samples running in the PLC runtime environment of a ctrlX CORE. Prerequisites \u00b6 ctrlX AUTOMATION SDK build environment ctrlX AUTOMATION SDK version ctrlX CORE virtual or ctrlX CORE ctrlX WORKS with ctrlX PLC Engineering installed Find out the supported samples \u00b6 fbs-read-write Read, change and write Flatbuffer variable Support \u00b6 If you've found an error in these sample, please file an issue If you've any questions visit the ctrlX AUTOMATION Community Official Documentation \u00b6 https://docs.automation.boschrexroth.com/","title":"Samples IEC 61131-3"},{"location":"samples-iec61131/index.html#prerequisites","text":"ctrlX AUTOMATION SDK build environment ctrlX AUTOMATION SDK version ctrlX CORE virtual or ctrlX CORE ctrlX WORKS with ctrlX PLC Engineering installed","title":"Prerequisites"},{"location":"samples-iec61131/index.html#find-out-the-supported-samples","text":"fbs-read-write Read, change and write Flatbuffer variable","title":"Find out the supported samples"},{"location":"samples-iec61131/index.html#support","text":"If you've found an error in these sample, please file an issue If you've any questions visit the ctrlX AUTOMATION Community","title":"Support"},{"location":"samples-iec61131/index.html#official-documentation","text":"https://docs.automation.boschrexroth.com/","title":"Official Documentation"},{"location":"samples-iec61131/fbs-read-write/index.html","text":"Using Flatbuffers in IEC 61131-3 ST Code \u00b6 Using Flatbuffers in IEC 61131-3 Code is described here . Files \u00b6 This folder contains files to be used in the described workflow: start.bat - Starts the command line tool fbs2plc.exe provided with all necessary parameters. ctrlXVirtual.export - Contains a ready to compile PLC program. License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Using Flatbuffers in IEC 61131-3 ST Code"},{"location":"samples-iec61131/fbs-read-write/index.html#using-flatbuffers-in-iec-61131-3-st-code","text":"Using Flatbuffers in IEC 61131-3 Code is described here .","title":"Using Flatbuffers in IEC 61131-3 ST Code"},{"location":"samples-iec61131/fbs-read-write/index.html#files","text":"This folder contains files to be used in the described workflow: start.bat - Starts the command line tool fbs2plc.exe provided with all necessary parameters. ctrlXVirtual.export - Contains a ready to compile PLC program.","title":"Files"},{"location":"samples-iec61131/fbs-read-write/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/index.html","text":"Find out the supported samples \u00b6 Hello World Application Data ctrlX Data Layer Client ctrlX Data Layer Client: Browser ctrlX Data Layer Provider ctrlX Data Layer Provider: MQTT 5 Publish / Subscribe / Mirror ctrlX Data Layer Provider: All Data Types ctrlX Data Layer Provider: Managing Virtual Nodes Diagnostics Logbook Hello ASP.NET Build a Snap \u00b6 See Samples Overview","title":"Samples .NET"},{"location":"samples-net/index.html#find-out-the-supported-samples","text":"Hello World Application Data ctrlX Data Layer Client ctrlX Data Layer Client: Browser ctrlX Data Layer Provider ctrlX Data Layer Provider: MQTT 5 Publish / Subscribe / Mirror ctrlX Data Layer Provider: All Data Types ctrlX Data Layer Provider: Managing Virtual Nodes Diagnostics Logbook Hello ASP.NET","title":"Find out the supported samples"},{"location":"samples-net/index.html#build-a-snap","text":"See Samples Overview","title":"Build a Snap"},{"location":"samples-net/appdata/index.html","text":"README .NET appdata \u00b6 This .NET sample shows how to persist application data in ctrlX environment using an HTTP Listener. Please read the available HOW-TO persist your app data documention for details. Introduction \u00b6 The sample shows how to load and save data according to ctrlx storage concept. Description \u00b6 Use the ctrlX App Data storage for your application data persistence. Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory appdata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-appdata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-appdata.app -f | more Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET appdata"},{"location":"samples-net/appdata/index.html#readme-net-appdata","text":"This .NET sample shows how to persist application data in ctrlX environment using an HTTP Listener. Please read the available HOW-TO persist your app data documention for details.","title":"README .NET appdata"},{"location":"samples-net/appdata/index.html#introduction","text":"The sample shows how to load and save data according to ctrlx storage concept.","title":"Introduction"},{"location":"samples-net/appdata/index.html#description","text":"Use the ctrlX App Data storage for your application data persistence.","title":"Description"},{"location":"samples-net/appdata/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/appdata/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory appdata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-appdata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-appdata.app -f | more","title":"Getting Started"},{"location":"samples-net/appdata/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/appdata/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/appdata/index.html#support","text":"","title":"Support"},{"location":"samples-net/appdata/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/appdata/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/appdata/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/appdata/index.html#license","text":"MIT License Copyright (c) 2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.client/index.html","text":"README .NET datalayer.client \u00b6 This .NET sample reads values from ctrlX Data Layer. Introduction \u00b6 The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop. Description \u00b6 The implementation include the following steps: Create and start the 'DatalayerSystem' service Create a client with 'tcp' protocol for remote connection or 'ipc' protocol if running inside snap. Create a subscription with publish interval of 1 s Write data change notification of subscription to console with timestamp, node and value Read value with client via single read once and in an endless loop every 10 s Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.client . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-client.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-client.app -f | more Console Output \u00b6 Running inside snap: True ctrlX Data Layer system started. ctrlX Data Layer client created. Client connected: True 10 .03.2021 09 :15:10, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 10 :15:12, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:11, framework/metrics/system/cpu-utilisation-percent: 13 ,6 ( subscription ) 10 .03.2021 09 :15:12, framework/metrics/system/cpu-utilisation-percent: 2 ,5 ( subscription ) 10 .03.2021 09 :15:13, framework/metrics/system/cpu-utilisation-percent: 7 ,4 ( subscription ) 10 .03.2021 09 :15:14, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:15, framework/metrics/system/cpu-utilisation-percent: 3 ,7 ( subscription ) 10 .03.2021 09 :15:16, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:18, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:19, framework/metrics/system/cpu-utilisation-percent: 7 ,2 ( subscription ) 10 .03.2021 09 :15:20, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 10 :15:22, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:21, framework/metrics/system/cpu-utilisation-percent: 5 ( subscription ) 10 .03.2021 09 :15:22, framework/metrics/system/cpu-utilisation-percent: 7 ,3 ( subscription ) 10 .03.2021 09 :15:23, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:24, framework/metrics/system/cpu-utilisation-percent: 2 ,5 ( subscription ) 10 .03.2021 09 :15:25, framework/metrics/system/cpu-utilisation-percent: 6 ,1 ( subscription ) 10 .03.2021 09 :15:26, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:27, framework/metrics/system/cpu-utilisation-percent: 8 ,8 ( subscription ) 10 .03.2021 09 :15:28, framework/metrics/system/cpu-utilisation-percent: 10 ,3 ( subscription ) 10 .03.2021 09 :15:29, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:30, framework/metrics/system/cpu-utilisation-percent: 7 ,2 ( subscription ) 10 .03.2021 10 :15:32, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:31, framework/metrics/system/cpu-utilisation-percent: 6 ,1 ( subscription ) Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET datalayer.client"},{"location":"samples-net/datalayer.client/index.html#readme-net-datalayerclient","text":"This .NET sample reads values from ctrlX Data Layer.","title":"README .NET datalayer.client"},{"location":"samples-net/datalayer.client/index.html#introduction","text":"The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop.","title":"Introduction"},{"location":"samples-net/datalayer.client/index.html#description","text":"The implementation include the following steps: Create and start the 'DatalayerSystem' service Create a client with 'tcp' protocol for remote connection or 'ipc' protocol if running inside snap. Create a subscription with publish interval of 1 s Write data change notification of subscription to console with timestamp, node and value Read value with client via single read once and in an endless loop every 10 s","title":"Description"},{"location":"samples-net/datalayer.client/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.client/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.client . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-client.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-client.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.client/index.html#console-output","text":"Running inside snap: True ctrlX Data Layer system started. ctrlX Data Layer client created. Client connected: True 10 .03.2021 09 :15:10, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 10 :15:12, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:11, framework/metrics/system/cpu-utilisation-percent: 13 ,6 ( subscription ) 10 .03.2021 09 :15:12, framework/metrics/system/cpu-utilisation-percent: 2 ,5 ( subscription ) 10 .03.2021 09 :15:13, framework/metrics/system/cpu-utilisation-percent: 7 ,4 ( subscription ) 10 .03.2021 09 :15:14, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:15, framework/metrics/system/cpu-utilisation-percent: 3 ,7 ( subscription ) 10 .03.2021 09 :15:16, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:18, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:19, framework/metrics/system/cpu-utilisation-percent: 7 ,2 ( subscription ) 10 .03.2021 09 :15:20, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 10 :15:22, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:21, framework/metrics/system/cpu-utilisation-percent: 5 ( subscription ) 10 .03.2021 09 :15:22, framework/metrics/system/cpu-utilisation-percent: 7 ,3 ( subscription ) 10 .03.2021 09 :15:23, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:24, framework/metrics/system/cpu-utilisation-percent: 2 ,5 ( subscription ) 10 .03.2021 09 :15:25, framework/metrics/system/cpu-utilisation-percent: 6 ,1 ( subscription ) 10 .03.2021 09 :15:26, framework/metrics/system/cpu-utilisation-percent: 6 ( subscription ) 10 .03.2021 09 :15:27, framework/metrics/system/cpu-utilisation-percent: 8 ,8 ( subscription ) 10 .03.2021 09 :15:28, framework/metrics/system/cpu-utilisation-percent: 10 ,3 ( subscription ) 10 .03.2021 09 :15:29, framework/metrics/system/cpu-utilisation-percent: 4 ,9 ( subscription ) 10 .03.2021 09 :15:30, framework/metrics/system/cpu-utilisation-percent: 7 ,2 ( subscription ) 10 .03.2021 10 :15:32, framework/metrics/system/memused-percent: 14 ( single read ) 10 .03.2021 09 :15:31, framework/metrics/system/cpu-utilisation-percent: 6 ,1 ( subscription )","title":"Console Output"},{"location":"samples-net/datalayer.client/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.client/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.client/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.client/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.client/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.client/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.client/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.client.browse/index.html","text":"README .NET datalayer.client.browse \u00b6 This .NET sample writes out all node values from ctrlX Data Layer to console. Introduction \u00b6 The sample demonstrates how to traverse the whole ctrlX Data Layer tree. The values of the nodes if readable are printed out to console as human readable strings. Also complex values with structure (encoded by FlatBuffers ) are written as JSON string to console. Description \u00b6 The implementation include the following steps: Create and start the 'DatalayerSystem' service Create a client with 'tcp' protocol for remote connection or 'ipc' protocol if running inside snap. Browse recursively through the whole DataLayer tree and write out the nodes with values to console Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.client.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-client-browse.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-client-browse.app -f | more Console Output \u00b6 Running inside snap: False ctrlX Data Layer system started. ctrlX Data Layer client created. Client connected: True \\- [] | - [ datalayer ] | | - [ curvemq ] | | \\- [ publickey ] V = tGQ43.RsrvZ#K0 ] eLTs?vpyfCNN?^/sV6MGh7N | | - [ debug ] | | - [ nodes ] [ datalayer/debug/*,datalayer/curvemq/publickey,datalayer/nodes,datalayer/nodesrt,datalayer/subscriptions/clients/*,datalayer/subscriptions/clients/*/subscriptions/*,datalayer/subscriptions/clients/*/subscriptions/*/nodes,datalayer/subscriptions/clients/*/subscriptions/*/properties,datalayer/subscriptions/settings,datalayer/retain/emu/data,datalayer/retain/emu/data/__,datalayer/retain/emu/info,datalayer/retain/emu/map,datalayer/retain/chunks,datalayer/retain/chunks/__,datalayer/retain/stats,datalayer/retain/stats/free,datalayer/retain/stats/used,datalayer/retain/stats/total,datalayer/retain/stats/biggest-free,datalayer/retain/stats/info,datalayer/retain/stats/sync-counter,datalayer/retain/stats/last-used,types/datalayer/metadata,types/datalayer/reflection,types/datalayer/memory,types/datalayer/memory_map,types/datalayer/token,types/datalayer/problem,types/datalayer/retain_stats,types/datalayer/subscription_properties,types/datalayer/subscription_data,types/datalayer/subscription_settings,types/datalayer/persistence_param,types/datalayer/subscription,types/datalayer/bool8,types/datalayer/int8,types/datalayer/uint8,types/datalayer/int16,types/datalayer/uint16,types/datalayer/int32,types/datalayer/uint32,types/datalayer/int64,types/datalayer/uint64,types/datalayer/float32,types/datalayer/float64,types/datalayer/string,types/datalayer/array-of-bool8,types/datalayer/array-of-int8,types/datalayer/array-of-uint8,types/datalayer/array-of-int16,types/datalayer/array-of-uint16,types/datalayer/array-of-int32,types/datalayer/array-of-uint32,types/datalayer/array-of-int64,types/datalayer/array-of-uint64,types/datalayer/array-of-float32,types/datalayer/array-of-float64,types/datalayer/array-of-string,types/datalayer/raw,types/datalayer/remoteconfig,types/datalayer/framework/bundle,types/datalayer/framework/bundlelist,types/datalayer/framework/dependency,types/datalayer/framework/dependencylist,types/datalayer/framework/interface,types/datalayer/framework/interfacelist,types/datalayer/framework/component,types/datalayer/framework/componentlist,types/datalayer/framework/property,types/datalayer/framework/propertylist,types/diagnosis/cfg-class,types/diagnosis/identification,types/diagnosis/list-identification-timestamp,types/diagnosis/identification-timestamp,types/diagnosis/registration,types/diagnosis/set,types/scheduler/callable,types/scheduler/duration,types/scheduler/duration-timer,types/scheduler/histogram,types/scheduler/programs,types/scheduler/state,types/scheduler/task,types/scheduler/trigger-source,types/scheduler/startup-error-reaction,types/scheduler/admin,types/scheduler/watchdog-type,types/scheduler/watchdog-error-reaction-class,types/scheduler/watchdog-error-reaction-configuration,types/scheduler/watchdog,types/scheduler/controls,types/systemhandler/state,types/script/cfg,types/script/cfg/init-script,types/script/instances,types/script/instances/cmd/file,types/script/instances/cmd/string,types/script/instances/diag,types/script/state/languages,devices/remotes/__,framework/bundles,framework/bundles/__,framework/metrics/system/cpu-utilisation-percent,framework/metrics/system/memtotal-mb,framework/metrics/system/memfree-mb,framework/metrics/system/memavailable-mb,framework/metrics/system/memused-mb,framework/metrics/system/membuffers-mb,framework/metrics/system/memcache-mb,framework/metrics/system/memused-percent,framework/metrics/process/vmsize-kb,framework/metrics/process/vmrss-kb,framework/metrics/process/vmshared-kb,framework/metrics/process/memused-percent,framework/state,framework/events/framework-started,diagnosis/cfg/realtime/numbers,diagnosis/cfg/realtime/numbers/class,diagnosis/clear/error,diagnosis/confirm/error,diagnosis/get/actual/list,diagnosis/get/actual/log,diagnosis/get/text,diagnosis/registration/detailed/register,diagnosis/registration/detailed/unregister,diagnosis/registration/main/register,diagnosis/registration/main/unregister,diagnosis/set,diagnosis/set/reset-active,diagnosis/set/set-active,diagnosis/set/set-and-reset,trace/rexroth-automationcore/units,trace/rexroth-automationcore/units/__,trace/rexroth-automationcore/admin/cfg/*,scheduler/tasks/*/watchdog,scheduler/tasks/*/watchdog/__,scheduler/__,script/cfg,script/cfg/load-all,script/cfg/save-all,script/cfg/init-script,script/cfg/init-script/file,script/cfg/init-script/language,script/cfg/init-script/parameter,script/admin/cfg/load,script/admin/cfg/save,script/instances/*,script/instances/*/cmd/file,script/instances/*/cmd/string,script/instances/*/cmd/reset,script/instances/*/cmd/abort,script/instances/*/state/opstate,script/instances/*/state/script,script/instances/*/state/line,script/instances/*/state/attached-to,script/instances/*/state/pid,script/instances/*/diag,script/instances/*/diag/last-main-diag,script/instances/*/diag/last-detail-diag,script/instances/*/diag/err-msg,script/instances/*/diag/err-trace,script/state/languages/* ] | | - [ nodesrt ] [ datalayer/retain/emu ] | | - [ retain ] | | | - [ chunks ] [] | | | - [ emu ] | | | | - [ data ] [] | | | | - [ info ] { \"type\" : \"Shared\" , \"id\" : \"/snap.rexroth-automationcore.405e2e7a-63ae-0039-056b-deadbe000002\" , \"sizeBytes\" : 122880 } | | | \\- [ map ] { \"revision\" : 0 } | | \\- [ stats ] { \"total\" : 122880 , \"free\" : 122848 , \"used\" : 32 , \"biggestFree\" : 122848 , \"syncCounter\" : 124 , \"lastUsed\" : 32 } | | | - [ biggest-free ] 122848 | | | - [ free ] 122848 | | | - [ info ] emulated | | | - [ last-used ] 32 | | | - [ sync-counter ] 124 | | | - [ total ] 122880 | | \\- [ used ] 32 | \\- [ subscriptions ] ... Elapsed time for browsing ctrlX Data Layer tree: 9351 milliseconds Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET datalayer.client.browse"},{"location":"samples-net/datalayer.client.browse/index.html#readme-net-datalayerclientbrowse","text":"This .NET sample writes out all node values from ctrlX Data Layer to console.","title":"README .NET datalayer.client.browse"},{"location":"samples-net/datalayer.client.browse/index.html#introduction","text":"The sample demonstrates how to traverse the whole ctrlX Data Layer tree. The values of the nodes if readable are printed out to console as human readable strings. Also complex values with structure (encoded by FlatBuffers ) are written as JSON string to console.","title":"Introduction"},{"location":"samples-net/datalayer.client.browse/index.html#description","text":"The implementation include the following steps: Create and start the 'DatalayerSystem' service Create a client with 'tcp' protocol for remote connection or 'ipc' protocol if running inside snap. Browse recursively through the whole DataLayer tree and write out the nodes with values to console","title":"Description"},{"location":"samples-net/datalayer.client.browse/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.client.browse/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.client.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-client-browse.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-client-browse.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.client.browse/index.html#console-output","text":"Running inside snap: False ctrlX Data Layer system started. ctrlX Data Layer client created. Client connected: True \\- [] | - [ datalayer ] | | - [ curvemq ] | | \\- [ publickey ] V = tGQ43.RsrvZ#K0 ] eLTs?vpyfCNN?^/sV6MGh7N | | - [ debug ] | | - [ nodes ] [ datalayer/debug/*,datalayer/curvemq/publickey,datalayer/nodes,datalayer/nodesrt,datalayer/subscriptions/clients/*,datalayer/subscriptions/clients/*/subscriptions/*,datalayer/subscriptions/clients/*/subscriptions/*/nodes,datalayer/subscriptions/clients/*/subscriptions/*/properties,datalayer/subscriptions/settings,datalayer/retain/emu/data,datalayer/retain/emu/data/__,datalayer/retain/emu/info,datalayer/retain/emu/map,datalayer/retain/chunks,datalayer/retain/chunks/__,datalayer/retain/stats,datalayer/retain/stats/free,datalayer/retain/stats/used,datalayer/retain/stats/total,datalayer/retain/stats/biggest-free,datalayer/retain/stats/info,datalayer/retain/stats/sync-counter,datalayer/retain/stats/last-used,types/datalayer/metadata,types/datalayer/reflection,types/datalayer/memory,types/datalayer/memory_map,types/datalayer/token,types/datalayer/problem,types/datalayer/retain_stats,types/datalayer/subscription_properties,types/datalayer/subscription_data,types/datalayer/subscription_settings,types/datalayer/persistence_param,types/datalayer/subscription,types/datalayer/bool8,types/datalayer/int8,types/datalayer/uint8,types/datalayer/int16,types/datalayer/uint16,types/datalayer/int32,types/datalayer/uint32,types/datalayer/int64,types/datalayer/uint64,types/datalayer/float32,types/datalayer/float64,types/datalayer/string,types/datalayer/array-of-bool8,types/datalayer/array-of-int8,types/datalayer/array-of-uint8,types/datalayer/array-of-int16,types/datalayer/array-of-uint16,types/datalayer/array-of-int32,types/datalayer/array-of-uint32,types/datalayer/array-of-int64,types/datalayer/array-of-uint64,types/datalayer/array-of-float32,types/datalayer/array-of-float64,types/datalayer/array-of-string,types/datalayer/raw,types/datalayer/remoteconfig,types/datalayer/framework/bundle,types/datalayer/framework/bundlelist,types/datalayer/framework/dependency,types/datalayer/framework/dependencylist,types/datalayer/framework/interface,types/datalayer/framework/interfacelist,types/datalayer/framework/component,types/datalayer/framework/componentlist,types/datalayer/framework/property,types/datalayer/framework/propertylist,types/diagnosis/cfg-class,types/diagnosis/identification,types/diagnosis/list-identification-timestamp,types/diagnosis/identification-timestamp,types/diagnosis/registration,types/diagnosis/set,types/scheduler/callable,types/scheduler/duration,types/scheduler/duration-timer,types/scheduler/histogram,types/scheduler/programs,types/scheduler/state,types/scheduler/task,types/scheduler/trigger-source,types/scheduler/startup-error-reaction,types/scheduler/admin,types/scheduler/watchdog-type,types/scheduler/watchdog-error-reaction-class,types/scheduler/watchdog-error-reaction-configuration,types/scheduler/watchdog,types/scheduler/controls,types/systemhandler/state,types/script/cfg,types/script/cfg/init-script,types/script/instances,types/script/instances/cmd/file,types/script/instances/cmd/string,types/script/instances/diag,types/script/state/languages,devices/remotes/__,framework/bundles,framework/bundles/__,framework/metrics/system/cpu-utilisation-percent,framework/metrics/system/memtotal-mb,framework/metrics/system/memfree-mb,framework/metrics/system/memavailable-mb,framework/metrics/system/memused-mb,framework/metrics/system/membuffers-mb,framework/metrics/system/memcache-mb,framework/metrics/system/memused-percent,framework/metrics/process/vmsize-kb,framework/metrics/process/vmrss-kb,framework/metrics/process/vmshared-kb,framework/metrics/process/memused-percent,framework/state,framework/events/framework-started,diagnosis/cfg/realtime/numbers,diagnosis/cfg/realtime/numbers/class,diagnosis/clear/error,diagnosis/confirm/error,diagnosis/get/actual/list,diagnosis/get/actual/log,diagnosis/get/text,diagnosis/registration/detailed/register,diagnosis/registration/detailed/unregister,diagnosis/registration/main/register,diagnosis/registration/main/unregister,diagnosis/set,diagnosis/set/reset-active,diagnosis/set/set-active,diagnosis/set/set-and-reset,trace/rexroth-automationcore/units,trace/rexroth-automationcore/units/__,trace/rexroth-automationcore/admin/cfg/*,scheduler/tasks/*/watchdog,scheduler/tasks/*/watchdog/__,scheduler/__,script/cfg,script/cfg/load-all,script/cfg/save-all,script/cfg/init-script,script/cfg/init-script/file,script/cfg/init-script/language,script/cfg/init-script/parameter,script/admin/cfg/load,script/admin/cfg/save,script/instances/*,script/instances/*/cmd/file,script/instances/*/cmd/string,script/instances/*/cmd/reset,script/instances/*/cmd/abort,script/instances/*/state/opstate,script/instances/*/state/script,script/instances/*/state/line,script/instances/*/state/attached-to,script/instances/*/state/pid,script/instances/*/diag,script/instances/*/diag/last-main-diag,script/instances/*/diag/last-detail-diag,script/instances/*/diag/err-msg,script/instances/*/diag/err-trace,script/state/languages/* ] | | - [ nodesrt ] [ datalayer/retain/emu ] | | - [ retain ] | | | - [ chunks ] [] | | | - [ emu ] | | | | - [ data ] [] | | | | - [ info ] { \"type\" : \"Shared\" , \"id\" : \"/snap.rexroth-automationcore.405e2e7a-63ae-0039-056b-deadbe000002\" , \"sizeBytes\" : 122880 } | | | \\- [ map ] { \"revision\" : 0 } | | \\- [ stats ] { \"total\" : 122880 , \"free\" : 122848 , \"used\" : 32 , \"biggestFree\" : 122848 , \"syncCounter\" : 124 , \"lastUsed\" : 32 } | | | - [ biggest-free ] 122848 | | | - [ free ] 122848 | | | - [ info ] emulated | | | - [ last-used ] 32 | | | - [ sync-counter ] 124 | | | - [ total ] 122880 | | \\- [ used ] 32 | \\- [ subscriptions ] ... Elapsed time for browsing ctrlX Data Layer tree: 9351 milliseconds","title":"Console Output"},{"location":"samples-net/datalayer.client.browse/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.client.browse/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.client.browse/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.client.browse/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.client.browse/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.client.browse/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.client.browse/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.mqtt/index.html","text":"README .NET datalayer.mqtt \u00b6 This .NET sample connects the Data Layer to a MQTT 5 broker. The sample is based on MQTT.net . IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples. Introduction \u00b6 MQTT sample showing PUB/SUB with Data Layer in full interaction. Connect Datalayer to any MQTT Broker for data synchronization (SUB) or publishing (PUB) or even full broker synchronisation ( Topic Scanner ). A simple use-case could be any kind of M2M or M2Cloud communication as an light-weight alternative to full stack OPC UA Pub/Sub. Prerequisites \u00b6 Please use this sample in conjunction with any MQTT Broker supporting MQTT 5 . We recommend to use mosquitto MQTT Broker , which can be also installed on a ctrlX as snap snap install mosquitto Description \u00b6 The MQTT sample demonstrates How easy it is to interact Data Layer with MQTT A proposal to organize a set of logical grouped provided nodes using a handler hierarchy and how to populate nodes using some level node handlers , responsible for it's own set of children nodes How to create an light-weight node handler , returning just his own managed virtual nodes on OnBrowse() without the need of registering all nodes one-by-one which is very efficient for a large set of dynamically created nodes. A concept of creating configurable PUB configurations , publishing the value of a Data Layer source address to a MQTT topic. A concept of creating configurable SUB configurations , subscribing a MQTT topic (wildcards supported) and writing it back to a Data Layer target address. On top a fully functional Topic Scanner , scanning all topics present on the broker and revealing it into the address space of the Data Layer, which is very handy for other Data Layer clients to access MQTT related data immediately without connecting to MQTT itself. The most recent message of the topic will be memory-persisted as and accessible via a simple Data Layer address. Notes : The sample uses unsecure MQTT communication. Please use a MQTT TLS setup in any production environment. See broker documentation for details. The sample does not provide any persistence of created PUB or SUB configurations. Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.mqtt . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-mqtt.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: ```bash sudo snap logs ctrlx-dotnet-datalayer-mqtt.app -f | more Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET datalayer.mqtt"},{"location":"samples-net/datalayer.mqtt/index.html#readme-net-datalayermqtt","text":"This .NET sample connects the Data Layer to a MQTT 5 broker. The sample is based on MQTT.net . IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples.","title":"README .NET datalayer.mqtt"},{"location":"samples-net/datalayer.mqtt/index.html#introduction","text":"MQTT sample showing PUB/SUB with Data Layer in full interaction. Connect Datalayer to any MQTT Broker for data synchronization (SUB) or publishing (PUB) or even full broker synchronisation ( Topic Scanner ). A simple use-case could be any kind of M2M or M2Cloud communication as an light-weight alternative to full stack OPC UA Pub/Sub.","title":"Introduction"},{"location":"samples-net/datalayer.mqtt/index.html#prerequisites","text":"Please use this sample in conjunction with any MQTT Broker supporting MQTT 5 . We recommend to use mosquitto MQTT Broker , which can be also installed on a ctrlX as snap snap install mosquitto","title":"Prerequisites"},{"location":"samples-net/datalayer.mqtt/index.html#description","text":"The MQTT sample demonstrates How easy it is to interact Data Layer with MQTT A proposal to organize a set of logical grouped provided nodes using a handler hierarchy and how to populate nodes using some level node handlers , responsible for it's own set of children nodes How to create an light-weight node handler , returning just his own managed virtual nodes on OnBrowse() without the need of registering all nodes one-by-one which is very efficient for a large set of dynamically created nodes. A concept of creating configurable PUB configurations , publishing the value of a Data Layer source address to a MQTT topic. A concept of creating configurable SUB configurations , subscribing a MQTT topic (wildcards supported) and writing it back to a Data Layer target address. On top a fully functional Topic Scanner , scanning all topics present on the broker and revealing it into the address space of the Data Layer, which is very handy for other Data Layer clients to access MQTT related data immediately without connecting to MQTT itself. The most recent message of the topic will be memory-persisted as and accessible via a simple Data Layer address. Notes : The sample uses unsecure MQTT communication. Please use a MQTT TLS setup in any production environment. See broker documentation for details. The sample does not provide any persistence of created PUB or SUB configurations.","title":"Description"},{"location":"samples-net/datalayer.mqtt/index.html#prerequisites_1","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.mqtt/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.mqtt . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-mqtt.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: ```bash sudo snap logs ctrlx-dotnet-datalayer-mqtt.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.mqtt/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.mqtt/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.mqtt/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.mqtt/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.mqtt/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.mqtt/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.mqtt/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.provider/index.html","text":"README .NET datalayer.provider \u00b6 This .NET sample provides some registered nodes to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples. Introduction \u00b6 The sample demonstrates how to provide nodes to ctrlX Data Layer tree. The provider creates nodes with types of int/double/string. Also a complex type encoded by FlatBuffers is provided. Description \u00b6 The sample demonstrates How to provide nodes with different data types to ctrlX Data Layer How to create and provide meta data to nodes How to provide nodes with read-only or read-write support How to register a user defined flatbuffers type Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.provider . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: ```bash sudo snap logs ctrlx-dotnet-datalayer-provider.app -f | more Screenshot \u00b6 Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET datalayer.provider"},{"location":"samples-net/datalayer.provider/index.html#readme-net-datalayerprovider","text":"This .NET sample provides some registered nodes to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples.","title":"README .NET datalayer.provider"},{"location":"samples-net/datalayer.provider/index.html#introduction","text":"The sample demonstrates how to provide nodes to ctrlX Data Layer tree. The provider creates nodes with types of int/double/string. Also a complex type encoded by FlatBuffers is provided.","title":"Introduction"},{"location":"samples-net/datalayer.provider/index.html#description","text":"The sample demonstrates How to provide nodes with different data types to ctrlX Data Layer How to create and provide meta data to nodes How to provide nodes with read-only or read-write support How to register a user defined flatbuffers type","title":"Description"},{"location":"samples-net/datalayer.provider/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.provider/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.provider . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: ```bash sudo snap logs ctrlx-dotnet-datalayer-provider.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.provider/index.html#screenshot","text":"","title":"Screenshot"},{"location":"samples-net/datalayer.provider/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.provider/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.provider/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.provider/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.provider/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.provider/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.provider/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.provider.alldata/index.html","text":"README .NET datalayer.provider.alldata \u00b6 This .NET sample provides all types of data to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples. Introduction \u00b6 The sample demonstrates how to provide all available data types to ctrlX Data Layer tree. The demo creates a 'static' and a 'dynamic' folder under the root node 'samples'. The 'static' folder provides nodes with constant values. In the 'dynamic' folder the same nodes are provided as in 'static' folder but with changing value every second. Description \u00b6 The sample demonstrates How to provide nodes with different data types to ctrlX Data Layer How to create and provide meta data to nodes How to provide nodes with read-only or read-write support How to change node values dynamically How to register a user defined flatbuffers type How to read and write user defined flatbuffers nodes Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.provider.alldata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider-alldata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-provider-alldata.app -f | more Screenshot \u00b6 Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET datalayer.provider.alldata"},{"location":"samples-net/datalayer.provider.alldata/index.html#readme-net-datalayerprovideralldata","text":"This .NET sample provides all types of data to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples.","title":"README .NET datalayer.provider.alldata"},{"location":"samples-net/datalayer.provider.alldata/index.html#introduction","text":"The sample demonstrates how to provide all available data types to ctrlX Data Layer tree. The demo creates a 'static' and a 'dynamic' folder under the root node 'samples'. The 'static' folder provides nodes with constant values. In the 'dynamic' folder the same nodes are provided as in 'static' folder but with changing value every second.","title":"Introduction"},{"location":"samples-net/datalayer.provider.alldata/index.html#description","text":"The sample demonstrates How to provide nodes with different data types to ctrlX Data Layer How to create and provide meta data to nodes How to provide nodes with read-only or read-write support How to change node values dynamically How to register a user defined flatbuffers type How to read and write user defined flatbuffers nodes","title":"Description"},{"location":"samples-net/datalayer.provider.alldata/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.provider.alldata/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.provider.alldata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider-alldata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-provider-alldata.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.provider.alldata/index.html#screenshot","text":"","title":"Screenshot"},{"location":"samples-net/datalayer.provider.alldata/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.provider.alldata/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.provider.alldata/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.provider.alldata/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.provider.alldata/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.provider.alldata/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.provider.alldata/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/datalayer.provider.virtual/index.html","text":"README .NET datalayer.provider.virtual \u00b6 This .NET sample demonstrates how to write a light-weight provider, listing to a wildcard address and managing virtual nodes. IMPORTANT : The sample is recommended for large , very large or dynamic sized set of nodes to handle. We are listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is very efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples. Introduction \u00b6 The sample shows a basic concept for a leight-weight self-managed provider implementation Description \u00b6 The sample creates some virtual nodes hold by an self-managed dictionary using the address to look up. Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.provider.virtual . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider-virtual.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-provider-virtual.app -f | more Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET datalayer.provider.virtual"},{"location":"samples-net/datalayer.provider.virtual/index.html#readme-net-datalayerprovidervirtual","text":"This .NET sample demonstrates how to write a light-weight provider, listing to a wildcard address and managing virtual nodes. IMPORTANT : The sample is recommended for large , very large or dynamic sized set of nodes to handle. We are listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is very efficient. Please read the Best Practise section in common .NET documentation for more details and recommended samples.","title":"README .NET datalayer.provider.virtual"},{"location":"samples-net/datalayer.provider.virtual/index.html#introduction","text":"The sample shows a basic concept for a leight-weight self-managed provider implementation","title":"Introduction"},{"location":"samples-net/datalayer.provider.virtual/index.html#description","text":"The sample creates some virtual nodes hold by an self-managed dictionary using the address to look up.","title":"Description"},{"location":"samples-net/datalayer.provider.virtual/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/datalayer.provider.virtual/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.provider.virtual . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-datalayer-provider-virtual.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-datalayer-provider-virtual.app -f | more","title":"Getting Started"},{"location":"samples-net/datalayer.provider.virtual/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/datalayer.provider.virtual/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/datalayer.provider.virtual/index.html#support","text":"","title":"Support"},{"location":"samples-net/datalayer.provider.virtual/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/datalayer.provider.virtual/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/datalayer.provider.virtual/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/datalayer.provider.virtual/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/diagnostics.logbook/index.html","text":"README .NET diagnostics.logbook \u00b6 This .NET sample is logging messages to the logbook of ctrlX. Introduction \u00b6 The project diagnostics.logbook provides a simple application example to log messages to the logbook of ctrlX. Description \u00b6 The implementation shows different ways to write messages to ctrlX logbook. The class KernelLoggerSample writes kernel log messages with the linux system command 'logger'. The class MicrosoftLoggerSample uses the nuget package extension Microsoft.Extensions.Logging to write logs to logbook. Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory diagnostics.logbook . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-logbook.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-logbook.app -f | more Screenshot \u00b6 Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET diagnostics.logbook"},{"location":"samples-net/diagnostics.logbook/index.html#readme-net-diagnosticslogbook","text":"This .NET sample is logging messages to the logbook of ctrlX.","title":"README .NET diagnostics.logbook"},{"location":"samples-net/diagnostics.logbook/index.html#introduction","text":"The project diagnostics.logbook provides a simple application example to log messages to the logbook of ctrlX.","title":"Introduction"},{"location":"samples-net/diagnostics.logbook/index.html#description","text":"The implementation shows different ways to write messages to ctrlX logbook. The class KernelLoggerSample writes kernel log messages with the linux system command 'logger'. The class MicrosoftLoggerSample uses the nuget package extension Microsoft.Extensions.Logging to write logs to logbook.","title":"Description"},{"location":"samples-net/diagnostics.logbook/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/diagnostics.logbook/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory diagnostics.logbook . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-logbook.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-logbook.app -f | more","title":"Getting Started"},{"location":"samples-net/diagnostics.logbook/index.html#screenshot","text":"","title":"Screenshot"},{"location":"samples-net/diagnostics.logbook/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/diagnostics.logbook/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/diagnostics.logbook/index.html#support","text":"","title":"Support"},{"location":"samples-net/diagnostics.logbook/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/diagnostics.logbook/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/diagnostics.logbook/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/diagnostics.logbook/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/hello.web.asp/index.html","text":"README .NET hello asp.net \u00b6 This .NET sample is a simple ASP.NET application. Introduction \u00b6 Programm shows how to write a ASP.NET application running on ctrlX. Description \u00b6 The following code shows the main method with inline documentation: Program.cs Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory hello.web.asp . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-hello-web-asp.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-hello-web-asp.app -f | more Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET hello asp.net"},{"location":"samples-net/hello.web.asp/index.html#readme-net-hello-aspnet","text":"This .NET sample is a simple ASP.NET application.","title":"README .NET hello asp.net"},{"location":"samples-net/hello.web.asp/index.html#introduction","text":"Programm shows how to write a ASP.NET application running on ctrlX.","title":"Introduction"},{"location":"samples-net/hello.web.asp/index.html#description","text":"The following code shows the main method with inline documentation: Program.cs","title":"Description"},{"location":"samples-net/hello.web.asp/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/hello.web.asp/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory hello.web.asp . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-hello-web-asp.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-hello-web-asp.app -f | more","title":"Getting Started"},{"location":"samples-net/hello.web.asp/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/hello.web.asp/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/hello.web.asp/index.html#support","text":"","title":"Support"},{"location":"samples-net/hello.web.asp/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/hello.web.asp/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/hello.web.asp/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/hello.web.asp/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-net/hello.world/index.html","text":"README .NET hello.world \u00b6 This .NET sample prints out \"Hello World\" to the console. Introduction \u00b6 The app is prompting \"Hello World\" to standard output. Description \u00b6 The implementation include the following steps: Write 'Hello World' to console in an endless loop every second. Prerequisites \u00b6 Please read the common .NET docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-hello-world.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-hello-world.app -f | more Console Output \u00b6 bash Hello World! 11.03.2021 09:45:05 Hello World! 11.03.2021 09:45:06 Hello World! 11.03.2021 09:45:07 Hello World! 11.03.2021 09:45:08 Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README .NET hello.world"},{"location":"samples-net/hello.world/index.html#readme-net-helloworld","text":"This .NET sample prints out \"Hello World\" to the console.","title":"README .NET hello.world"},{"location":"samples-net/hello.world/index.html#introduction","text":"The app is prompting \"Hello World\" to standard output.","title":"Introduction"},{"location":"samples-net/hello.world/index.html#description","text":"The implementation include the following steps: Write 'Hello World' to console in an endless loop every second.","title":"Description"},{"location":"samples-net/hello.world/index.html#prerequisites","text":"Please read the common .NET docs here , first.","title":"Prerequisites"},{"location":"samples-net/hello.world/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-dotnet-hello-world.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-dotnet-hello-world.app -f | more","title":"Getting Started"},{"location":"samples-net/hello.world/index.html#console-output","text":"bash Hello World! 11.03.2021 09:45:05 Hello World! 11.03.2021 09:45:06 Hello World! 11.03.2021 09:45:07 Hello World! 11.03.2021 09:45:08","title":"Console Output"},{"location":"samples-net/hello.world/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-net/hello.world/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-net/hello.world/index.html#support","text":"","title":"Support"},{"location":"samples-net/hello.world/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-net/hello.world/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-net/hello.world/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-net/hello.world/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-node/index.html","text":"Find out the supported samples \u00b6 Hello World ctrlX Data Layer Client ctrlX Data Layer Client: Browser ctrlX Data Layer Provider ctrlX Data Layer Provider: All Data Types Build a Snap \u00b6 See Samples Overview","title":"Samples Nodejs"},{"location":"samples-node/index.html#find-out-the-supported-samples","text":"Hello World ctrlX Data Layer Client ctrlX Data Layer Client: Browser ctrlX Data Layer Provider ctrlX Data Layer Provider: All Data Types","title":"Find out the supported samples"},{"location":"samples-node/index.html#build-a-snap","text":"See Samples Overview","title":"Build a Snap"},{"location":"samples-node/datalayer.client/index.html","text":"README Node.js datalayer.client \u00b6 This Node.js sample reads values from ctrlX Data Layer. Introduction \u00b6 The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console. Description \u00b6 The sample datalayer.client demonstrates How easy to create a client for ctrlX Data Layer How to read values from ctrlX Data Layer nodes How to create a subscription to a ctrlX Data Layer node Prerequisites \u00b6 Please read the common Node.js docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder in QEMU VM . Open the directory datalayer.client . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-node-datalayer-client.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-node-datalayer-client.app -f | more Console Output \u00b6 running inside snap: false client remote address: tcp://boschrexroth:boschrexroth@10.0.2.2 framework/metrics/system/cpu-utilisation-percent: { \"value\" :1.9, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.892Z\" } framework/metrics/system/memavailable-mb: { \"value\" :680.578125, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.896Z\" } framework/metrics/system/membuffers-mb: { \"value\" :119.00390625, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.902Z\" } framework/metrics/system/memcache-mb: { \"value\" :514.56640625, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.905Z\" } framework/metrics/system/memfree-mb: { \"value\" :164.43359375, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.909Z\" } framework/metrics/system/memtotal-mb: { \"value\" :985.0078125, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.913Z\" } framework/metrics/system/memused-mb: { \"value\" :187.00390625, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.918Z\" } framework/metrics/system/memused-percent: { \"value\" :19.4, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.923Z\" } Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README Node.js datalayer.client"},{"location":"samples-node/datalayer.client/index.html#readme-nodejs-datalayerclient","text":"This Node.js sample reads values from ctrlX Data Layer.","title":"README Node.js datalayer.client"},{"location":"samples-node/datalayer.client/index.html#introduction","text":"The sample demonstrates how to read values from ctrlX Data Layer tree and write out the values to console.","title":"Introduction"},{"location":"samples-node/datalayer.client/index.html#description","text":"The sample datalayer.client demonstrates How easy to create a client for ctrlX Data Layer How to read values from ctrlX Data Layer nodes How to create a subscription to a ctrlX Data Layer node","title":"Description"},{"location":"samples-node/datalayer.client/index.html#prerequisites","text":"Please read the common Node.js docs here , first.","title":"Prerequisites"},{"location":"samples-node/datalayer.client/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder in QEMU VM . Open the directory datalayer.client . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-node-datalayer-client.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-node-datalayer-client.app -f | more","title":"Getting Started"},{"location":"samples-node/datalayer.client/index.html#console-output","text":"running inside snap: false client remote address: tcp://boschrexroth:boschrexroth@10.0.2.2 framework/metrics/system/cpu-utilisation-percent: { \"value\" :1.9, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.892Z\" } framework/metrics/system/memavailable-mb: { \"value\" :680.578125, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.896Z\" } framework/metrics/system/membuffers-mb: { \"value\" :119.00390625, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.902Z\" } framework/metrics/system/memcache-mb: { \"value\" :514.56640625, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.905Z\" } framework/metrics/system/memfree-mb: { \"value\" :164.43359375, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.909Z\" } framework/metrics/system/memtotal-mb: { \"value\" :985.0078125, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.913Z\" } framework/metrics/system/memused-mb: { \"value\" :187.00390625, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.918Z\" } framework/metrics/system/memused-percent: { \"value\" :19.4, \"type\" : \"double\" , \"timestamp\" : \"2021-10-20T13:40:45.923Z\" }","title":"Console Output"},{"location":"samples-node/datalayer.client/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-node/datalayer.client/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-node/datalayer.client/index.html#support","text":"","title":"Support"},{"location":"samples-node/datalayer.client/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-node/datalayer.client/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-node/datalayer.client/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-node/datalayer.client/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-node/datalayer.client.browse/index.html","text":"README Node.js datalayer.client.browse \u00b6 This Node.js sample writes out all node values from ctrlX Data Layer to console. Introduction \u00b6 The sample demonstrates how to traverse the whole ctrlX Data Layer tree. The values of the nodes if readable are printed out to console as human readable strings. Also complex values with structure (encoded by FlatBuffers ) are written as JSON string to console. Description \u00b6 The sample demonstrates how to browse th values from ctrlX Data Layer tree and write out the values to console. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop. Description \u00b6 The sample demonstrates How to browse nodes of the ctrlX Data Layer How to read value as json from a node Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.client.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-node-datalayer-client-browse.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-node-datalayer-client-browse.app -f | more Console Output \u00b6 Running inside snap: False ctrlX Data Layer system started. ctrlX Data Layer client created. Client connected: True \\- [] | - [ datalayer ] | | - [ curvemq ] | | \\- [ publickey ] V = tGQ43.RsrvZ#K0 ] eLTs?vpyfCNN?^/sV6MGh7N | | - [ debug ] | | - [ nodes ] [ datalayer/debug/*,datalayer/curvemq/publickey,datalayer/nodes,datalayer/nodesrt,datalayer/subscriptions/clients/*,datalayer/subscriptions/clients/*/subscriptions/*,datalayer/subscriptions/clients/*/subscriptions/*/nodes,datalayer/subscriptions/clients/*/subscriptions/*/properties,datalayer/subscriptions/settings,datalayer/retain/emu/data,datalayer/retain/emu/data/__,datalayer/retain/emu/info,datalayer/retain/emu/map,datalayer/retain/chunks,datalayer/retain/chunks/__,datalayer/retain/stats,datalayer/retain/stats/free,datalayer/retain/stats/used,datalayer/retain/stats/total,datalayer/retain/stats/biggest-free,datalayer/retain/stats/info,datalayer/retain/stats/sync-counter,datalayer/retain/stats/last-used,types/datalayer/metadata,types/datalayer/reflection,types/datalayer/memory,types/datalayer/memory_map,types/datalayer/token,types/datalayer/problem,types/datalayer/retain_stats,types/datalayer/subscription_properties,types/datalayer/subscription_data,types/datalayer/subscription_settings,types/datalayer/persistence_param,types/datalayer/subscription,types/datalayer/bool8,types/datalayer/int8,types/datalayer/uint8,types/datalayer/int16,types/datalayer/uint16,types/datalayer/int32,types/datalayer/uint32,types/datalayer/int64,types/datalayer/uint64,types/datalayer/float32,types/datalayer/float64,types/datalayer/string,types/datalayer/array-of-bool8,types/datalayer/array-of-int8,types/datalayer/array-of-uint8,types/datalayer/array-of-int16,types/datalayer/array-of-uint16,types/datalayer/array-of-int32,types/datalayer/array-of-uint32,types/datalayer/array-of-int64,types/datalayer/array-of-uint64,types/datalayer/array-of-float32,types/datalayer/array-of-float64,types/datalayer/array-of-string,types/datalayer/raw,types/datalayer/remoteconfig,types/datalayer/framework/bundle,types/datalayer/framework/bundlelist,types/datalayer/framework/dependency,types/datalayer/framework/dependencylist,types/datalayer/framework/interface,types/datalayer/framework/interfacelist,types/datalayer/framework/component,types/datalayer/framework/componentlist,types/datalayer/framework/property,types/datalayer/framework/propertylist,types/diagnosis/cfg-class,types/diagnosis/identification,types/diagnosis/list-identification-timestamp,types/diagnosis/identification-timestamp,types/diagnosis/registration,types/diagnosis/set,types/scheduler/callable,types/scheduler/duration,types/scheduler/duration-timer,types/scheduler/histogram,types/scheduler/programs,types/scheduler/state,types/scheduler/task,types/scheduler/trigger-source,types/scheduler/startup-error-reaction,types/scheduler/admin,types/scheduler/watchdog-type,types/scheduler/watchdog-error-reaction-class,types/scheduler/watchdog-error-reaction-configuration,types/scheduler/watchdog,types/scheduler/controls,types/systemhandler/state,types/script/cfg,types/script/cfg/init-script,types/script/instances,types/script/instances/cmd/file,types/script/instances/cmd/string,types/script/instances/diag,types/script/state/languages,devices/remotes/__,framework/bundles,framework/bundles/__,framework/metrics/system/cpu-utilisation-percent,framework/metrics/system/memtotal-mb,framework/metrics/system/memfree-mb,framework/metrics/system/memavailable-mb,framework/metrics/system/memused-mb,framework/metrics/system/membuffers-mb,framework/metrics/system/memcache-mb,framework/metrics/system/memused-percent,framework/metrics/process/vmsize-kb,framework/metrics/process/vmrss-kb,framework/metrics/process/vmshared-kb,framework/metrics/process/memused-percent,framework/state,framework/events/framework-started,diagnosis/cfg/realtime/numbers,diagnosis/cfg/realtime/numbers/class,diagnosis/clear/error,diagnosis/confirm/error,diagnosis/get/actual/list,diagnosis/get/actual/log,diagnosis/get/text,diagnosis/registration/detailed/register,diagnosis/registration/detailed/unregister,diagnosis/registration/main/register,diagnosis/registration/main/unregister,diagnosis/set,diagnosis/set/reset-active,diagnosis/set/set-active,diagnosis/set/set-and-reset,trace/rexroth-automationcore/units,trace/rexroth-automationcore/units/__,trace/rexroth-automationcore/admin/cfg/*,scheduler/tasks/*/watchdog,scheduler/tasks/*/watchdog/__,scheduler/__,script/cfg,script/cfg/load-all,script/cfg/save-all,script/cfg/init-script,script/cfg/init-script/file,script/cfg/init-script/language,script/cfg/init-script/parameter,script/admin/cfg/load,script/admin/cfg/save,script/instances/*,script/instances/*/cmd/file,script/instances/*/cmd/string,script/instances/*/cmd/reset,script/instances/*/cmd/abort,script/instances/*/state/opstate,script/instances/*/state/script,script/instances/*/state/line,script/instances/*/state/attached-to,script/instances/*/state/pid,script/instances/*/diag,script/instances/*/diag/last-main-diag,script/instances/*/diag/last-detail-diag,script/instances/*/diag/err-msg,script/instances/*/diag/err-trace,script/state/languages/* ] | | - [ nodesrt ] [ datalayer/retain/emu ] | | - [ retain ] | | | - [ chunks ] [] | | | - [ emu ] | | | | - [ data ] [] | | | | - [ info ] { \"type\" : \"Shared\" , \"id\" : \"/snap.rexroth-automationcore.405e2e7a-63ae-0039-056b-deadbe000002\" , \"sizeBytes\" : 122880 } | | | \\- [ map ] { \"revision\" : 0 } | | \\- [ stats ] { \"total\" : 122880 , \"free\" : 122848 , \"used\" : 32 , \"biggestFree\" : 122848 , \"syncCounter\" : 124 , \"lastUsed\" : 32 } | | | - [ biggest-free ] 122848 | | | - [ free ] 122848 | | | - [ info ] emulated | | | - [ last-used ] 32 | | | - [ sync-counter ] 124 | | | - [ total ] 122880 | | \\- [ used ] 32 | \\- [ subscriptions ] ... Elapsed time for browsing ctrlX Data Layer tree: 9351 milliseconds Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README Node.js datalayer.client.browse"},{"location":"samples-node/datalayer.client.browse/index.html#readme-nodejs-datalayerclientbrowse","text":"This Node.js sample writes out all node values from ctrlX Data Layer to console.","title":"README Node.js datalayer.client.browse"},{"location":"samples-node/datalayer.client.browse/index.html#introduction","text":"The sample demonstrates how to traverse the whole ctrlX Data Layer tree. The values of the nodes if readable are printed out to console as human readable strings. Also complex values with structure (encoded by FlatBuffers ) are written as JSON string to console.","title":"Introduction"},{"location":"samples-node/datalayer.client.browse/index.html#description","text":"The sample demonstrates how to browse th values from ctrlX Data Layer tree and write out the values to console. A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed every 10 seconds in an endless loop.","title":"Description"},{"location":"samples-node/datalayer.client.browse/index.html#description_1","text":"The sample demonstrates How to browse nodes of the ctrlX Data Layer How to read value as json from a node","title":"Description"},{"location":"samples-node/datalayer.client.browse/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.client.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-node-datalayer-client-browse.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-node-datalayer-client-browse.app -f | more","title":"Getting Started"},{"location":"samples-node/datalayer.client.browse/index.html#console-output","text":"Running inside snap: False ctrlX Data Layer system started. ctrlX Data Layer client created. Client connected: True \\- [] | - [ datalayer ] | | - [ curvemq ] | | \\- [ publickey ] V = tGQ43.RsrvZ#K0 ] eLTs?vpyfCNN?^/sV6MGh7N | | - [ debug ] | | - [ nodes ] [ datalayer/debug/*,datalayer/curvemq/publickey,datalayer/nodes,datalayer/nodesrt,datalayer/subscriptions/clients/*,datalayer/subscriptions/clients/*/subscriptions/*,datalayer/subscriptions/clients/*/subscriptions/*/nodes,datalayer/subscriptions/clients/*/subscriptions/*/properties,datalayer/subscriptions/settings,datalayer/retain/emu/data,datalayer/retain/emu/data/__,datalayer/retain/emu/info,datalayer/retain/emu/map,datalayer/retain/chunks,datalayer/retain/chunks/__,datalayer/retain/stats,datalayer/retain/stats/free,datalayer/retain/stats/used,datalayer/retain/stats/total,datalayer/retain/stats/biggest-free,datalayer/retain/stats/info,datalayer/retain/stats/sync-counter,datalayer/retain/stats/last-used,types/datalayer/metadata,types/datalayer/reflection,types/datalayer/memory,types/datalayer/memory_map,types/datalayer/token,types/datalayer/problem,types/datalayer/retain_stats,types/datalayer/subscription_properties,types/datalayer/subscription_data,types/datalayer/subscription_settings,types/datalayer/persistence_param,types/datalayer/subscription,types/datalayer/bool8,types/datalayer/int8,types/datalayer/uint8,types/datalayer/int16,types/datalayer/uint16,types/datalayer/int32,types/datalayer/uint32,types/datalayer/int64,types/datalayer/uint64,types/datalayer/float32,types/datalayer/float64,types/datalayer/string,types/datalayer/array-of-bool8,types/datalayer/array-of-int8,types/datalayer/array-of-uint8,types/datalayer/array-of-int16,types/datalayer/array-of-uint16,types/datalayer/array-of-int32,types/datalayer/array-of-uint32,types/datalayer/array-of-int64,types/datalayer/array-of-uint64,types/datalayer/array-of-float32,types/datalayer/array-of-float64,types/datalayer/array-of-string,types/datalayer/raw,types/datalayer/remoteconfig,types/datalayer/framework/bundle,types/datalayer/framework/bundlelist,types/datalayer/framework/dependency,types/datalayer/framework/dependencylist,types/datalayer/framework/interface,types/datalayer/framework/interfacelist,types/datalayer/framework/component,types/datalayer/framework/componentlist,types/datalayer/framework/property,types/datalayer/framework/propertylist,types/diagnosis/cfg-class,types/diagnosis/identification,types/diagnosis/list-identification-timestamp,types/diagnosis/identification-timestamp,types/diagnosis/registration,types/diagnosis/set,types/scheduler/callable,types/scheduler/duration,types/scheduler/duration-timer,types/scheduler/histogram,types/scheduler/programs,types/scheduler/state,types/scheduler/task,types/scheduler/trigger-source,types/scheduler/startup-error-reaction,types/scheduler/admin,types/scheduler/watchdog-type,types/scheduler/watchdog-error-reaction-class,types/scheduler/watchdog-error-reaction-configuration,types/scheduler/watchdog,types/scheduler/controls,types/systemhandler/state,types/script/cfg,types/script/cfg/init-script,types/script/instances,types/script/instances/cmd/file,types/script/instances/cmd/string,types/script/instances/diag,types/script/state/languages,devices/remotes/__,framework/bundles,framework/bundles/__,framework/metrics/system/cpu-utilisation-percent,framework/metrics/system/memtotal-mb,framework/metrics/system/memfree-mb,framework/metrics/system/memavailable-mb,framework/metrics/system/memused-mb,framework/metrics/system/membuffers-mb,framework/metrics/system/memcache-mb,framework/metrics/system/memused-percent,framework/metrics/process/vmsize-kb,framework/metrics/process/vmrss-kb,framework/metrics/process/vmshared-kb,framework/metrics/process/memused-percent,framework/state,framework/events/framework-started,diagnosis/cfg/realtime/numbers,diagnosis/cfg/realtime/numbers/class,diagnosis/clear/error,diagnosis/confirm/error,diagnosis/get/actual/list,diagnosis/get/actual/log,diagnosis/get/text,diagnosis/registration/detailed/register,diagnosis/registration/detailed/unregister,diagnosis/registration/main/register,diagnosis/registration/main/unregister,diagnosis/set,diagnosis/set/reset-active,diagnosis/set/set-active,diagnosis/set/set-and-reset,trace/rexroth-automationcore/units,trace/rexroth-automationcore/units/__,trace/rexroth-automationcore/admin/cfg/*,scheduler/tasks/*/watchdog,scheduler/tasks/*/watchdog/__,scheduler/__,script/cfg,script/cfg/load-all,script/cfg/save-all,script/cfg/init-script,script/cfg/init-script/file,script/cfg/init-script/language,script/cfg/init-script/parameter,script/admin/cfg/load,script/admin/cfg/save,script/instances/*,script/instances/*/cmd/file,script/instances/*/cmd/string,script/instances/*/cmd/reset,script/instances/*/cmd/abort,script/instances/*/state/opstate,script/instances/*/state/script,script/instances/*/state/line,script/instances/*/state/attached-to,script/instances/*/state/pid,script/instances/*/diag,script/instances/*/diag/last-main-diag,script/instances/*/diag/last-detail-diag,script/instances/*/diag/err-msg,script/instances/*/diag/err-trace,script/state/languages/* ] | | - [ nodesrt ] [ datalayer/retain/emu ] | | - [ retain ] | | | - [ chunks ] [] | | | - [ emu ] | | | | - [ data ] [] | | | | - [ info ] { \"type\" : \"Shared\" , \"id\" : \"/snap.rexroth-automationcore.405e2e7a-63ae-0039-056b-deadbe000002\" , \"sizeBytes\" : 122880 } | | | \\- [ map ] { \"revision\" : 0 } | | \\- [ stats ] { \"total\" : 122880 , \"free\" : 122848 , \"used\" : 32 , \"biggestFree\" : 122848 , \"syncCounter\" : 124 , \"lastUsed\" : 32 } | | | - [ biggest-free ] 122848 | | | - [ free ] 122848 | | | - [ info ] emulated | | | - [ last-used ] 32 | | | - [ sync-counter ] 124 | | | - [ total ] 122880 | | \\- [ used ] 32 | \\- [ subscriptions ] ... Elapsed time for browsing ctrlX Data Layer tree: 9351 milliseconds","title":"Console Output"},{"location":"samples-node/datalayer.client.browse/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-node/datalayer.client.browse/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-node/datalayer.client.browse/index.html#support","text":"","title":"Support"},{"location":"samples-node/datalayer.client.browse/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-node/datalayer.client.browse/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-node/datalayer.client.browse/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-node/datalayer.client.browse/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-node/datalayer.provider/index.html","text":"README Node.js datalayer.provider \u00b6 This Node.js sample provides some registered nodes to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common Node.js documentation for more details and recommended samples. Introduction \u00b6 The sample demonstrates how to provide nodes to ctrlX Data Layer tree. The provider creates nodes with types of int/double/string. Also a complex type encoded by FlatBuffers is provided. Description \u00b6 The sample demonstrates How to provide nodes with different data types to ctrlX Data Layer How to create and provide meta data to nodes How to provide nodes with read-only or read-write support How to register a user defined flatbuffers type Prerequisites \u00b6 Please read the common Node.js docs here , first. Compile Flatbuffers Schema \u00b6 This app uses a flatbuffer defined in the schema file sampleSchema.fbs. From this schema file we have to create a binary file which is registered on the ctrlX and a Node.js class to create and access the defined flatbuffer data. These tasks can be done with the command line tool flatc. This tool is provided by this SDK under /bin/oss.flatbuffers/..insert OS version here../release/ Do following steps Create a binary flatbuffers file with Visual Studio Code tasks: \"flatc binary (x64)\" \"flatc binary (arm64)\" The generated file is stored in src/sampleSchema.bfbs Generate the Node.js class with Visual Studio Code tasks: \"flatc class (x64)\" \"flatc class (arm64)\" The generated code is stored in src/sampleSchema_generated.js Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder in QEMU VM . Open the directory datalayer.provider . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-node-datalayer-provider.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-node-datalayer-provider.app -f | more Screenshot \u00b6 Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README Node.js datalayer.provider"},{"location":"samples-node/datalayer.provider/index.html#readme-nodejs-datalayerprovider","text":"This Node.js sample provides some registered nodes to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common Node.js documentation for more details and recommended samples.","title":"README Node.js datalayer.provider"},{"location":"samples-node/datalayer.provider/index.html#introduction","text":"The sample demonstrates how to provide nodes to ctrlX Data Layer tree. The provider creates nodes with types of int/double/string. Also a complex type encoded by FlatBuffers is provided.","title":"Introduction"},{"location":"samples-node/datalayer.provider/index.html#description","text":"The sample demonstrates How to provide nodes with different data types to ctrlX Data Layer How to create and provide meta data to nodes How to provide nodes with read-only or read-write support How to register a user defined flatbuffers type","title":"Description"},{"location":"samples-node/datalayer.provider/index.html#prerequisites","text":"Please read the common Node.js docs here , first.","title":"Prerequisites"},{"location":"samples-node/datalayer.provider/index.html#compile-flatbuffers-schema","text":"This app uses a flatbuffer defined in the schema file sampleSchema.fbs. From this schema file we have to create a binary file which is registered on the ctrlX and a Node.js class to create and access the defined flatbuffer data. These tasks can be done with the command line tool flatc. This tool is provided by this SDK under /bin/oss.flatbuffers/..insert OS version here../release/ Do following steps Create a binary flatbuffers file with Visual Studio Code tasks: \"flatc binary (x64)\" \"flatc binary (arm64)\" The generated file is stored in src/sampleSchema.bfbs Generate the Node.js class with Visual Studio Code tasks: \"flatc class (x64)\" \"flatc class (arm64)\" The generated code is stored in src/sampleSchema_generated.js","title":"Compile Flatbuffers Schema"},{"location":"samples-node/datalayer.provider/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder in QEMU VM . Open the directory datalayer.provider . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-node-datalayer-provider.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-node-datalayer-provider.app -f | more","title":"Getting Started"},{"location":"samples-node/datalayer.provider/index.html#screenshot","text":"","title":"Screenshot"},{"location":"samples-node/datalayer.provider/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-node/datalayer.provider/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-node/datalayer.provider/index.html#support","text":"","title":"Support"},{"location":"samples-node/datalayer.provider/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-node/datalayer.provider/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-node/datalayer.provider/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-node/datalayer.provider/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-node/datalayer.provider.alldata/index.html","text":"README Node.js datalayer.provider.alldata \u00b6 This Node.js sample provides all types of data to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common Node.js documentation for more details and recommended samples. Introduction \u00b6 The sample demonstrates how to provide all available data types to ctrlX Data Layer tree. The demo creates a 'static' and a 'dynamic' folder under the root node 'samples'. The 'static' folder provides nodes with constant values. In the 'dynamic' folder the same nodes are provided as in 'static' folder but with changing value every second. Description \u00b6 The sample demonstrates How to provide nodes with different data types to ctrlX Data Layer How to create and provide meta data to nodes How to provide nodes with read-only or read-write support How to change node values dynamically How to register a user defined flatbuffers type How to read and write user defined flatbuffers nodes Prerequisites \u00b6 Please read the common Node.js docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.provider.alldata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-node-datalayer-provider-alldata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-node-datalayer-provider-alldata.app -f | more Screenshot \u00b6 Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README Node.js datalayer.provider.alldata"},{"location":"samples-node/datalayer.provider.alldata/index.html#readme-nodejs-datalayerprovideralldata","text":"This Node.js sample provides all types of data to the ctrlX Data Layer tree. IMPORTANT : The sample creates and registers all nodes individually, which is recommended for small to medium sized set of nodes to handle. If you're dealing with a large set of nodes (big data provider) or any dynamic node hierarchy , we recommend to use a virtual provider approach, listening just to any wildcarded address ( e.g. myRoot/**) and using self-managed virtual nodes , just returned in OnBrowse() method, which is more efficient. Please read the Best Practise section in common Node.js documentation for more details and recommended samples.","title":"README Node.js datalayer.provider.alldata"},{"location":"samples-node/datalayer.provider.alldata/index.html#introduction","text":"The sample demonstrates how to provide all available data types to ctrlX Data Layer tree. The demo creates a 'static' and a 'dynamic' folder under the root node 'samples'. The 'static' folder provides nodes with constant values. In the 'dynamic' folder the same nodes are provided as in 'static' folder but with changing value every second.","title":"Introduction"},{"location":"samples-node/datalayer.provider.alldata/index.html#description","text":"The sample demonstrates How to provide nodes with different data types to ctrlX Data Layer How to create and provide meta data to nodes How to provide nodes with read-only or read-write support How to change node values dynamically How to register a user defined flatbuffers type How to read and write user defined flatbuffers nodes","title":"Description"},{"location":"samples-node/datalayer.provider.alldata/index.html#prerequisites","text":"Please read the common Node.js docs here , first.","title":"Prerequisites"},{"location":"samples-node/datalayer.provider.alldata/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.provider.alldata . Build and install snap as described here . Checkout ctrlX Data Layer web frontend (System | Data Layer) Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-node-datalayer-provider-alldata.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-node-datalayer-provider-alldata.app -f | more","title":"Getting Started"},{"location":"samples-node/datalayer.provider.alldata/index.html#screenshot","text":"","title":"Screenshot"},{"location":"samples-node/datalayer.provider.alldata/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-node/datalayer.provider.alldata/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-node/datalayer.provider.alldata/index.html#support","text":"","title":"Support"},{"location":"samples-node/datalayer.provider.alldata/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-node/datalayer.provider.alldata/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-node/datalayer.provider.alldata/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-node/datalayer.provider.alldata/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-node/hello-world/index.html","text":"README node hello.world \u00b6 This node sample prints out \"Hello World from Node.js!\" to the console. Introduction \u00b6 Programm is prompting \"Hello World from Node.js!\" to standard output. Description \u00b6 The samples demonstrates how to snap a simple Node.js script with the snapcraft npm plugin . Prerequisites \u00b6 Please read the common node docs here , first. Getting Started \u00b6 Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-node-hello-world.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-node-hello-world.app -f | more Console Output \u00b6 bash Hello World from Node.js! Thu, 07 Oct 2021 11:35:08 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:09 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:10 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:11 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:12 GMT Install the App \u00b6 Login into ctrlX and install the App (Apps). Gratulations - We're finished - Let's start coding! \u00b6 Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README node hello.world"},{"location":"samples-node/hello-world/index.html#readme-node-helloworld","text":"This node sample prints out \"Hello World from Node.js!\" to the console.","title":"README node hello.world"},{"location":"samples-node/hello-world/index.html#introduction","text":"Programm is prompting \"Hello World from Node.js!\" to standard output.","title":"Introduction"},{"location":"samples-node/hello-world/index.html#description","text":"The samples demonstrates how to snap a simple Node.js script with the snapcraft npm plugin .","title":"Description"},{"location":"samples-node/hello-world/index.html#prerequisites","text":"Please read the common node docs here , first.","title":"Prerequisites"},{"location":"samples-node/hello-world/index.html#getting-started","text":"Launch Visual Studio Code Click on the Remote Explorer from the menu. Choose Open Folder . Open the directory datalayer.browse . Build and install snap as described here . Check the output using Diagnostics : Login into your ctrlX Navigate to Diagnostics -> Logbook Click Settings on the right top corner Enable Show system messages Navigate to Filter -> Units and check your snap.ctrlx-node-hello-world.app.service Now you should the see the app output diagnostics. Press Refresh to update. If you have root permissions, you can also watch the output on any ssh console with the command: sudo snap logs ctrlx-node-hello-world.app -f | more","title":"Getting Started"},{"location":"samples-node/hello-world/index.html#console-output","text":"bash Hello World from Node.js! Thu, 07 Oct 2021 11:35:08 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:09 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:10 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:11 GMT Hello World from Node.js! Thu, 07 Oct 2021 11:35:12 GMT","title":"Console Output"},{"location":"samples-node/hello-world/index.html#install-the-app","text":"Login into ctrlX and install the App (Apps).","title":"Install the App"},{"location":"samples-node/hello-world/index.html#gratulations-were-finished-lets-start-coding","text":"","title":"Gratulations - We're finished - Let's start coding!"},{"location":"samples-node/hello-world/index.html#support","text":"","title":"Support"},{"location":"samples-node/hello-world/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-node/hello-world/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-node/hello-world/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-node/hello-world/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/index.html","text":"Find out the supported samples \u00b6 AppData File Storage ctrlX Data Layer Calculation operations ctrlX Data Layer Client ctrlX Data Layer Client Browse ctrlX Data Layer Client Light ctrlX Data Layer Client Subscription ctrlX Data Layer Provider ctrlX Data Layer Provider All Data Types Example Remote Debugging with Python ctrlX Diagnostics Logbook ctrlX Data Layer + Webserver Build a Snap \u00b6 See Samples Overview Working with Visual Studio Code \u00b6 Visual Studio Code Extensions for Python \u00b6 Start Visual Studio Code on your host computer. Connect to your SDK build environment. Open the folder of a Python sample under samples-python/ Install the extension 'Python from Microsoft': Install in SSH:... Working with a Python Sample Project \u00b6 From the main menu click File --> Open Folder and select the folder of your desired Python project. Start a bash terminal within the main menu item - Terminal - New Terminal. Install a Virtual Environment \u00b6 We recommend to create and activate a virtual Python environment for your project. Furthermore all required packages have to be installed. Call this script from the command line: ./install-venv.sh The script runs following commands: virtualenv -p python3 venv source venv/bin/activate pip3 install -r requirements.txt A subfolder venv/ will be created and activated as virtual environment which contains the Python runtime and all required packages. Debugging with Visual Studio Code \u00b6 Open main.py Select the Python interpreter: Shift+Ctrl+P --> Select 'Python ... ('venv':venv) ... Recommended' *) Set a breakpoint to the first code line e.g. import ... Press F5 (Start Debugging) *) Click update icon if 'Python ... ('venv':venv) ... Recommended' doesn't appear. Troubleshooting \u00b6 Enable SSH access to your ctrlX CORE. Watch trace of your snap on the ctrlX CORE e.g.: $ sudo snap logs -f sdk-py-provider-alldata Debugging Python code on the ctrlX CORE is described here Remote Debugging . Support \u00b6 Developer Community \u00b6 Please join the Developer Community Issues \u00b6 If you've found an error in these samples, please file an issue","title":"Samples Python"},{"location":"samples-python/index.html#find-out-the-supported-samples","text":"AppData File Storage ctrlX Data Layer Calculation operations ctrlX Data Layer Client ctrlX Data Layer Client Browse ctrlX Data Layer Client Light ctrlX Data Layer Client Subscription ctrlX Data Layer Provider ctrlX Data Layer Provider All Data Types Example Remote Debugging with Python ctrlX Diagnostics Logbook ctrlX Data Layer + Webserver","title":"Find out the supported samples"},{"location":"samples-python/index.html#build-a-snap","text":"See Samples Overview","title":"Build a Snap"},{"location":"samples-python/index.html#working-with-visual-studio-code","text":"","title":"Working with Visual Studio Code"},{"location":"samples-python/index.html#visual-studio-code-extensions-for-python","text":"Start Visual Studio Code on your host computer. Connect to your SDK build environment. Open the folder of a Python sample under samples-python/ Install the extension 'Python from Microsoft': Install in SSH:...","title":"Visual Studio Code Extensions for Python"},{"location":"samples-python/index.html#working-with-a-python-sample-project","text":"From the main menu click File --> Open Folder and select the folder of your desired Python project. Start a bash terminal within the main menu item - Terminal - New Terminal.","title":"Working with a Python Sample Project"},{"location":"samples-python/index.html#install-a-virtual-environment","text":"We recommend to create and activate a virtual Python environment for your project. Furthermore all required packages have to be installed. Call this script from the command line: ./install-venv.sh The script runs following commands: virtualenv -p python3 venv source venv/bin/activate pip3 install -r requirements.txt A subfolder venv/ will be created and activated as virtual environment which contains the Python runtime and all required packages.","title":"Install a Virtual Environment"},{"location":"samples-python/index.html#debugging-with-visual-studio-code","text":"Open main.py Select the Python interpreter: Shift+Ctrl+P --> Select 'Python ... ('venv':venv) ... Recommended' *) Set a breakpoint to the first code line e.g. import ... Press F5 (Start Debugging) *) Click update icon if 'Python ... ('venv':venv) ... Recommended' doesn't appear.","title":"Debugging with Visual Studio Code"},{"location":"samples-python/index.html#troubleshooting","text":"Enable SSH access to your ctrlX CORE. Watch trace of your snap on the ctrlX CORE e.g.: $ sudo snap logs -f sdk-py-provider-alldata Debugging Python code on the ctrlX CORE is described here Remote Debugging .","title":"Troubleshooting"},{"location":"samples-python/index.html#support","text":"","title":"Support"},{"location":"samples-python/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-python/index.html#issues","text":"If you've found an error in these samples, please file an issue","title":"Issues"},{"location":"samples-python/appdata/index.html","text":"AppData File Storage \u00b6 Introduction \u00b6 This Python sample app shows how to persist application data in ctrlX environment. Function Description \u00b6 This app uses a web server to listen for events regarding loading and save configuration data. Running in the snap environment of a ctrlX CORE therefor a web socket connection is used. In debug mode (running in the build environment) a TCP/IP connection is used. Implementation Description \u00b6 main.py starts the web server in TCP or Unix socket mode. The package web contains the web server implementation using the build in Python module http.server. For encoding and decoding JSON Web Tokens the Python library pyjwt is used. The folder configs contains the file package-manifest.json. It is used to register the snap with in the ctrlX CORE as participant of the configuration load/store mechanism. License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"AppData File Storage"},{"location":"samples-python/appdata/index.html#appdata-file-storage","text":"","title":"AppData File Storage"},{"location":"samples-python/appdata/index.html#introduction","text":"This Python sample app shows how to persist application data in ctrlX environment.","title":"Introduction"},{"location":"samples-python/appdata/index.html#function-description","text":"This app uses a web server to listen for events regarding loading and save configuration data. Running in the snap environment of a ctrlX CORE therefor a web socket connection is used. In debug mode (running in the build environment) a TCP/IP connection is used.","title":"Function Description"},{"location":"samples-python/appdata/index.html#implementation-description","text":"main.py starts the web server in TCP or Unix socket mode. The package web contains the web server implementation using the build in Python module http.server. For encoding and decoding JSON Web Tokens the Python library pyjwt is used. The folder configs contains the file package-manifest.json. It is used to register the snap with in the ctrlX CORE as participant of the configuration load/store mechanism.","title":"Implementation Description"},{"location":"samples-python/appdata/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.calc/index.html","text":"ctrlX Data Layer Calculation operations \u00b6 Introduction \u00b6 This app is a ctrlX Data Layer Provider and Client written in Python. Function Description \u00b6 The app reads two Data Layer values and calculates the output value 'out'. All values are float64 value types. The Data Layer addresses of the input values are configured by the string input values 'in1' and 'in2'. How the out value is calculated can be configured as string value of the node 'mode'. Supported operations are: + - * / Implementation Description \u00b6 There are two Python scripts: main.py - the main function calculations.basic_arithmetic_operations.py - Class called BasicArithmeticOperations which reads the input values and calculates the output value. main.py \u00b6 This function manages the Data Layer Provider and Client connection. Furthermore it creates one instance of the BasicArithmeticOperations class and starts it. If the client connection is lost the main function exits with an error code. If the app is installed as snap the system will restart the application after a short period of time. calculations.basic_arithmetic_operations.py \u00b6 This class BasicArithmeticOperations has several functions. It is a Data Layer Provider for four nodes: 1. in1: string, specifies the DL address of the first operand 2. in2: string, specifies the DL address of the second operand 3. mode: string, specifies the operation 4. out: float64, the result Important The operands have to be 'double' values (FLOAT64)! With the address values of in1 and in2 a subscription is started. Every time when new values are published the value of out is recalculated. License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Calculation operations"},{"location":"samples-python/datalayer.calc/index.html#ctrlx-data-layer-calculation-operations","text":"","title":"ctrlX Data Layer Calculation operations"},{"location":"samples-python/datalayer.calc/index.html#introduction","text":"This app is a ctrlX Data Layer Provider and Client written in Python.","title":"Introduction"},{"location":"samples-python/datalayer.calc/index.html#function-description","text":"The app reads two Data Layer values and calculates the output value 'out'. All values are float64 value types. The Data Layer addresses of the input values are configured by the string input values 'in1' and 'in2'. How the out value is calculated can be configured as string value of the node 'mode'. Supported operations are: + - * /","title":"Function Description"},{"location":"samples-python/datalayer.calc/index.html#implementation-description","text":"There are two Python scripts: main.py - the main function calculations.basic_arithmetic_operations.py - Class called BasicArithmeticOperations which reads the input values and calculates the output value.","title":"Implementation Description"},{"location":"samples-python/datalayer.calc/index.html#mainpy","text":"This function manages the Data Layer Provider and Client connection. Furthermore it creates one instance of the BasicArithmeticOperations class and starts it. If the client connection is lost the main function exits with an error code. If the app is installed as snap the system will restart the application after a short period of time.","title":"main.py"},{"location":"samples-python/datalayer.calc/index.html#calculationsbasic_arithmetic_operationspy","text":"This class BasicArithmeticOperations has several functions. It is a Data Layer Provider for four nodes: 1. in1: string, specifies the DL address of the first operand 2. in2: string, specifies the DL address of the second operand 3. mode: string, specifies the operation 4. out: float64, the result Important The operands have to be 'double' values (FLOAT64)! With the address values of in1 and in2 a subscription is started. Every time when new values are published the value of out is recalculated.","title":"calculations.basic_arithmetic_operations.py"},{"location":"samples-python/datalayer.calc/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.client/index.html","text":"README datalayer.client \u00b6 Introduction \u00b6 This python app runs Data Layer client operations like read, write and so on. It can be used as sample to implement own apps. Function Description \u00b6 This Python app depends from the C++ sample samples-cpp/datalayer.provider.all-data. It handles the Data Layer nodes created by the C++ sample. Implementation Description \u00b6 main.py creates the Data Layer connection and and an instance of CallDataLayerClient. app/call_datalayer_client.py contains the class CallDataLayerClient. This class runs all the data access activities. License \u00b6 MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README datalayer.client"},{"location":"samples-python/datalayer.client/index.html#readme-datalayerclient","text":"","title":"README datalayer.client"},{"location":"samples-python/datalayer.client/index.html#introduction","text":"This python app runs Data Layer client operations like read, write and so on. It can be used as sample to implement own apps.","title":"Introduction"},{"location":"samples-python/datalayer.client/index.html#function-description","text":"This Python app depends from the C++ sample samples-cpp/datalayer.provider.all-data. It handles the Data Layer nodes created by the C++ sample.","title":"Function Description"},{"location":"samples-python/datalayer.client/index.html#implementation-description","text":"main.py creates the Data Layer connection and and an instance of CallDataLayerClient. app/call_datalayer_client.py contains the class CallDataLayerClient. This class runs all the data access activities.","title":"Implementation Description"},{"location":"samples-python/datalayer.client/index.html#license","text":"MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.client.browse/index.html","text":"ctrlX Data Layer Client Browse \u00b6 Introduction \u00b6 The app demonstrates how the Data Layer browse functionality works. Function Description \u00b6 The ctrlX Data Layer tree is browsed recursively and the data of the nodes are listed to the console output. Implementation Description \u00b6 Module main.py creates a Data Layer client connection and calls the function browse_tree(). This function tries to read and list the value of the (root) node. Then it scans recursively through all sub nodes. When all nodes are listed the app ends. The app is restarted automatically ny snapd because of its restart option in snap/snapcraft.yaml. License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Client Browse"},{"location":"samples-python/datalayer.client.browse/index.html#ctrlx-data-layer-client-browse","text":"","title":"ctrlX Data Layer Client Browse"},{"location":"samples-python/datalayer.client.browse/index.html#introduction","text":"The app demonstrates how the Data Layer browse functionality works.","title":"Introduction"},{"location":"samples-python/datalayer.client.browse/index.html#function-description","text":"The ctrlX Data Layer tree is browsed recursively and the data of the nodes are listed to the console output.","title":"Function Description"},{"location":"samples-python/datalayer.client.browse/index.html#implementation-description","text":"Module main.py creates a Data Layer client connection and calls the function browse_tree(). This function tries to read and list the value of the (root) node. Then it scans recursively through all sub nodes. When all nodes are listed the app ends. The app is restarted automatically ny snapd because of its restart option in snap/snapcraft.yaml.","title":"Implementation Description"},{"location":"samples-python/datalayer.client.browse/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.client.light/index.html","text":"README datalayer.client.light \u00b6 Introduction \u00b6 The sample demonstrates how to read values from ctrlX Data Layer. Function Description \u00b6 A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed in an endless loop. Implementation Description \u00b6 The module main.py connects to the Data Layer and handles the Data Layer access. License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README datalayer.client.light"},{"location":"samples-python/datalayer.client.light/index.html#readme-datalayerclientlight","text":"","title":"README datalayer.client.light"},{"location":"samples-python/datalayer.client.light/index.html#introduction","text":"The sample demonstrates how to read values from ctrlX Data Layer.","title":"Introduction"},{"location":"samples-python/datalayer.client.light/index.html#function-description","text":"A subscription is used to get values by data change event in a deterministic publish interval. The single read is performed in an endless loop.","title":"Function Description"},{"location":"samples-python/datalayer.client.light/index.html#implementation-description","text":"The module main.py connects to the Data Layer and handles the Data Layer access.","title":"Implementation Description"},{"location":"samples-python/datalayer.client.light/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.client.sub/index.html","text":"ctrlX Data Layer Client Subscription \u00b6 Introduction \u00b6 The code shows how in Python the values of the ctrlX Data Layer are subscribed. Code snippets can be used in your own Python app. Function Description \u00b6 The app uses a single node and a multi node subscription. First the single node subscription is started. It will be stopped after a short period of time. Then the multi node subscription is started. It will run until a connection break to the Data Layer is detected. In this case the app unsubscribes the multi node subscription and ends. The app is restarted automatically by snapd. Implementation Description \u00b6 main.py is the single module. It has following tasks: * Create a Data Layer client connection * Subscribe/unsubscribe a Data Layer single node subscription * Subscribe/unsubscribe a Data Layer multi node subscription * Close app on Data Layer client connection break License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Client Subscription"},{"location":"samples-python/datalayer.client.sub/index.html#ctrlx-data-layer-client-subscription","text":"","title":"ctrlX Data Layer Client Subscription"},{"location":"samples-python/datalayer.client.sub/index.html#introduction","text":"The code shows how in Python the values of the ctrlX Data Layer are subscribed. Code snippets can be used in your own Python app.","title":"Introduction"},{"location":"samples-python/datalayer.client.sub/index.html#function-description","text":"The app uses a single node and a multi node subscription. First the single node subscription is started. It will be stopped after a short period of time. Then the multi node subscription is started. It will run until a connection break to the Data Layer is detected. In this case the app unsubscribes the multi node subscription and ends. The app is restarted automatically by snapd.","title":"Function Description"},{"location":"samples-python/datalayer.client.sub/index.html#implementation-description","text":"main.py is the single module. It has following tasks: * Create a Data Layer client connection * Subscribe/unsubscribe a Data Layer single node subscription * Subscribe/unsubscribe a Data Layer multi node subscription * Close app on Data Layer client connection break","title":"Implementation Description"},{"location":"samples-python/datalayer.client.sub/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.provider/index.html","text":"ctrlX Data Layer Provider \u00b6 The app demonstrates how a Data Layer connection is established and a string and flatbuffers node are provided. Function Description \u00b6 The app connects to the ctrlX Data Layer and provides a string and flatbuffers node . If the Data Layer connection breaks the app will exit. After 10s it will be automatically restarted by snapd. Preparation \u00b6 This sample uses a flatbuffers node defined in sampleSchema.fbs and metadata information defined in metadata.csv. For easy of use the project contains the according compiled files: sampleSchema.fbs: ./bfbs/sampleSchema.bfbs, ./schema/InertialValue.py metadata.csv: ./mddb/metadata.mddb With these compilation files the project can instantly debugged or snaps can be build. If changes have been made to the definition files, the compiles must be regenerated. This is done by the script make-bfbs-mddb.sh . The script can be called from the console: ./make-bfbs-mddb.sh It can also be called from Visual Studio Code: Main menu -> Terminal --> Run Task ... --> make bfbs mddb Implementation Description \u00b6 Definition Files \u00b6 Flatbuffers \u00b6 sampleSchema.fbs: Defines a flatbuffers value (structed value). If changed compile it - see above. Metadata \u00b6 metadata.csv: Defines metadata for the provided Data Layer nodes. If changed compile it - see above. metadata.mddb: Compiled information of metadata.csv. Modules \u00b6 The module main.py manages the Data Layer connection and the creation of the Data Layer nodes. The module helper/ctrlx_datalayer_helper.py Provides methods to easily establish a Data Layer connection. The module app/my_provider_node.py contains the class MyProviderNode with the callback function needed by the Data Layer. The module sample/schema/InertialValue.py is generated by flatc from sampleSchema.fbs. It is used to manage the flatbuffers data struct. License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Provider"},{"location":"samples-python/datalayer.provider/index.html#ctrlx-data-layer-provider","text":"The app demonstrates how a Data Layer connection is established and a string and flatbuffers node are provided.","title":"ctrlX Data Layer Provider"},{"location":"samples-python/datalayer.provider/index.html#function-description","text":"The app connects to the ctrlX Data Layer and provides a string and flatbuffers node . If the Data Layer connection breaks the app will exit. After 10s it will be automatically restarted by snapd.","title":"Function Description"},{"location":"samples-python/datalayer.provider/index.html#preparation","text":"This sample uses a flatbuffers node defined in sampleSchema.fbs and metadata information defined in metadata.csv. For easy of use the project contains the according compiled files: sampleSchema.fbs: ./bfbs/sampleSchema.bfbs, ./schema/InertialValue.py metadata.csv: ./mddb/metadata.mddb With these compilation files the project can instantly debugged or snaps can be build. If changes have been made to the definition files, the compiles must be regenerated. This is done by the script make-bfbs-mddb.sh . The script can be called from the console: ./make-bfbs-mddb.sh It can also be called from Visual Studio Code: Main menu -> Terminal --> Run Task ... --> make bfbs mddb","title":"Preparation"},{"location":"samples-python/datalayer.provider/index.html#implementation-description","text":"","title":"Implementation Description"},{"location":"samples-python/datalayer.provider/index.html#definition-files","text":"","title":"Definition Files"},{"location":"samples-python/datalayer.provider/index.html#flatbuffers","text":"sampleSchema.fbs: Defines a flatbuffers value (structed value). If changed compile it - see above.","title":"Flatbuffers"},{"location":"samples-python/datalayer.provider/index.html#metadata","text":"metadata.csv: Defines metadata for the provided Data Layer nodes. If changed compile it - see above. metadata.mddb: Compiled information of metadata.csv.","title":"Metadata"},{"location":"samples-python/datalayer.provider/index.html#modules","text":"The module main.py manages the Data Layer connection and the creation of the Data Layer nodes. The module helper/ctrlx_datalayer_helper.py Provides methods to easily establish a Data Layer connection. The module app/my_provider_node.py contains the class MyProviderNode with the callback function needed by the Data Layer. The module sample/schema/InertialValue.py is generated by flatc from sampleSchema.fbs. It is used to manage the flatbuffers data struct.","title":"Modules"},{"location":"samples-python/datalayer.provider/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.provider.all-data/index.html","text":"ctrlX Data Layer Provider All Data \u00b6 Introduction \u00b6 This Python app provides ctrlX Data Layer nodes representing different data types. Function Description \u00b6 When this app is started it connects to the ctrlX Data Layer and creates two subtrees with data nodes. The values of the nodes in the 'static' subtree cannot be changed by clients but they can be used to test reading different types of data and their numerical limits. The values of the nodes in the 'dynamic' subtree can be changed (written) by clients. Implementation Description \u00b6 main.py starts the Data Layer system and the Data Layer provider. Furthermore two instances of the class ProviderNodeAllData are created. One instance is called for creating static (immutable) Data Layer nodes. The other instance is called for creating dynamic (changeable) Data Layer nodes. The package datalayerprovider contains the classes for data storage, configuration and Data Layer handling. License \u00b6 MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer Provider All Data"},{"location":"samples-python/datalayer.provider.all-data/index.html#ctrlx-data-layer-provider-all-data","text":"","title":"ctrlX Data Layer Provider All Data"},{"location":"samples-python/datalayer.provider.all-data/index.html#introduction","text":"This Python app provides ctrlX Data Layer nodes representing different data types.","title":"Introduction"},{"location":"samples-python/datalayer.provider.all-data/index.html#function-description","text":"When this app is started it connects to the ctrlX Data Layer and creates two subtrees with data nodes. The values of the nodes in the 'static' subtree cannot be changed by clients but they can be used to test reading different types of data and their numerical limits. The values of the nodes in the 'dynamic' subtree can be changed (written) by clients.","title":"Function Description"},{"location":"samples-python/datalayer.provider.all-data/index.html#implementation-description","text":"main.py starts the Data Layer system and the Data Layer provider. Furthermore two instances of the class ProviderNodeAllData are created. One instance is called for creating static (immutable) Data Layer nodes. The other instance is called for creating dynamic (changeable) Data Layer nodes. The package datalayerprovider contains the classes for data storage, configuration and Data Layer handling.","title":"Implementation Description"},{"location":"samples-python/datalayer.provider.all-data/index.html#license","text":"MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/datalayer.remote.debug/index.html","text":"Sample Project datalayer.remote.debug \u00b6 The remote debugging of snaps written in Python is described here Debugging , chapter \"Python\". Enabling Remote Debugging \u00b6 Remote debugging is enabled when the app is called with a command line parameter --debug-port=.... If this parameter is missing the debugging functions are disabled, the app starts normally. For debugging in the build environment this parameter doesn't matter. Python Package debugpy and Script debugging.py \u00b6 We use the Python package debugpy for remote debugging. To simplify the usage of this package the debugging code is outsourced into the script debugging.py. To use debugpy and the script in your own Python projects too install the package into your project environment, copy the script debugging.py into your project folder and add the function calls into your code. License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Sample Project datalayer.remote.debug"},{"location":"samples-python/datalayer.remote.debug/index.html#sample-project-datalayerremotedebug","text":"The remote debugging of snaps written in Python is described here Debugging , chapter \"Python\".","title":"Sample Project datalayer.remote.debug"},{"location":"samples-python/datalayer.remote.debug/index.html#enabling-remote-debugging","text":"Remote debugging is enabled when the app is called with a command line parameter --debug-port=.... If this parameter is missing the debugging functions are disabled, the app starts normally. For debugging in the build environment this parameter doesn't matter.","title":"Enabling Remote Debugging"},{"location":"samples-python/datalayer.remote.debug/index.html#python-package-debugpy-and-script-debuggingpy","text":"We use the Python package debugpy for remote debugging. To simplify the usage of this package the debugging code is outsourced into the script debugging.py. To use debugpy and the script in your own Python projects too install the package into your project environment, copy the script debugging.py into your project folder and add the function calls into your code.","title":"Python Package debugpy and Script debugging.py"},{"location":"samples-python/datalayer.remote.debug/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/logbook/index.html","text":"ctrlX Diagnostics Logbook \u00b6 Introduction \u00b6 This python app showes how to log with different log levels into the logbook of the ctrlX. Function Description \u00b6 The app writes log messages using the Python package JournaldLogHandler. Implementation Description \u00b6 main.py just calls the function in logbook/app.py. The methon run() in logbook/app.py sends the messages. License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Diagnostics Logbook"},{"location":"samples-python/logbook/index.html#ctrlx-diagnostics-logbook","text":"","title":"ctrlX Diagnostics Logbook"},{"location":"samples-python/logbook/index.html#introduction","text":"This python app showes how to log with different log levels into the logbook of the ctrlX.","title":"Introduction"},{"location":"samples-python/logbook/index.html#function-description","text":"The app writes log messages using the Python package JournaldLogHandler.","title":"Function Description"},{"location":"samples-python/logbook/index.html#implementation-description","text":"main.py just calls the function in logbook/app.py. The methon run() in logbook/app.py sends the messages.","title":"Implementation Description"},{"location":"samples-python/logbook/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-python/webserver/index.html","text":"ctrlX Data Layer + Webserver \u00b6 Introduction \u00b6 This python app deploys a simple webserver including Data Layer connection and user permissions with webinterface accessible from ctrlX webpage. Function Description \u00b6 The app runs a simple webserver with reverse proxy and Data Layer access, setup user permissions through package-manifest and token authentification. Once the installation of the snap was finished, you can access to the provided webpage through the sidebar or overview menu of ctrlX CORE webpage. The Python-Webpage allows you to read and write at the Data Layer (depends on permissions of the current user) and shows permissions of the current user. You can find the configuration of user permissions (scopes) at settings section Users & Permissions > Users The integration of the app inside ctrlX Core webpage (sidebar and overview integration, reverse proxy, bearertoken, scopes) is done by the package-manifest ( ./configs/package-assets/rexroth-python-webserver.package-manifest.json ). Take a look at package-manifest to find out the basics. Implementation Description \u00b6 The app has these modules: main.py starts the web server. In snap environment an Unix socket connection is established otherwise a TCP/IP connectin. web/webserver.py contains the web server implementation. Internally the Python package http.server is used. web/webtoken.py decodes the token string using the Python package jwt app/datalayerclient.py handles the Data Layer node data access. License \u00b6 MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"ctrlX Data Layer + Webserver"},{"location":"samples-python/webserver/index.html#ctrlx-data-layer-webserver","text":"","title":"ctrlX Data Layer + Webserver"},{"location":"samples-python/webserver/index.html#introduction","text":"This python app deploys a simple webserver including Data Layer connection and user permissions with webinterface accessible from ctrlX webpage.","title":"Introduction"},{"location":"samples-python/webserver/index.html#function-description","text":"The app runs a simple webserver with reverse proxy and Data Layer access, setup user permissions through package-manifest and token authentification. Once the installation of the snap was finished, you can access to the provided webpage through the sidebar or overview menu of ctrlX CORE webpage. The Python-Webpage allows you to read and write at the Data Layer (depends on permissions of the current user) and shows permissions of the current user. You can find the configuration of user permissions (scopes) at settings section Users & Permissions > Users The integration of the app inside ctrlX Core webpage (sidebar and overview integration, reverse proxy, bearertoken, scopes) is done by the package-manifest ( ./configs/package-assets/rexroth-python-webserver.package-manifest.json ). Take a look at package-manifest to find out the basics.","title":"Function Description"},{"location":"samples-python/webserver/index.html#implementation-description","text":"The app has these modules: main.py starts the web server. In snap environment an Unix socket connection is established otherwise a TCP/IP connectin. web/webserver.py contains the web server implementation. Internally the Python package http.server is used. web/webtoken.py decodes the token string using the Python package jwt app/datalayerclient.py handles the Data Layer node data access.","title":"Implementation Description"},{"location":"samples-python/webserver/index.html#license","text":"MIT License Copyright (c) 2020-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-sh/index.html","text":"Find out the supported samples \u00b6 TPM2 Consumer How to use the TPM inside your application","title":"Samples Shell"},{"location":"samples-sh/index.html#find-out-the-supported-samples","text":"TPM2 Consumer How to use the TPM inside your application","title":"Find out the supported samples"},{"location":"samples-sh/tpm2.consumer/index.html","text":"README tpm2.consumer \u00b6 The sample app tpm2.consumer shows the basic usage of a TPM2 inside your application. Also see TPM2 . Introduction \u00b6 It demonstrates how you can use the TPM2.0 of the ctrlX CORE or the emulated TPM2.0 on the ctrlX CORE virtual . Build the TPM2 Trusted Software Stack (TSS) including OpenSSL engine. Integrate your application into key and certificate management of the ctrlX CORE. Convert the TPM2 Key to a keyform usable with OpenSSL Use the TPM2 TSS OpenSSL engine with an example webserver Pre-requisites \u00b6 Recommended: ctrlX WORKS App Build Environment (QEMU Virtual Machine) - see Setup ctrlX AUTOMATION SDK Version 1. ctrlX CORE virtual or ctrlX CORE Getting Started \u00b6 Launch Visual Studio Code Open the sample directory samples-sh/tpm2.consumer Build and install the snap as described in Setup section Go to the webinterface -> Settings -> Certificate & Keys -> TPM2 Webserver Create a key named \"webserver\" as RSA 2048 and \"HSM protected\" Create a certificate signing request (CSR), download Create a certificate (webserver.crt) with help of the CSR on your PC or CA # For example, create yourself a CA mkdir ca openssl genrsa -out ca/ca.key 2048 openssl req -new -x509 -days 10000 -key ca/ca.key -out ca/ca.crt openssl x509 -req -days 360 -in webserver_csr.pem -CA ca/ca.crt -CAkey ca/ca.key -CAcreateserial -out webserver.crt -sha256 8. Upload the certificate webserver.crt the TPM2 Webserver application 9. Open webserver on Port 44330 of the ctrlX CORE or ctrlX CORE virtual (adapt port settings accordingly). Support \u00b6 If you've any questions visit the ctrlX AUTOMATION Community License \u00b6 MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README tpm2.consumer"},{"location":"samples-sh/tpm2.consumer/index.html#readme-tpm2consumer","text":"The sample app tpm2.consumer shows the basic usage of a TPM2 inside your application. Also see TPM2 .","title":"README tpm2.consumer"},{"location":"samples-sh/tpm2.consumer/index.html#introduction","text":"It demonstrates how you can use the TPM2.0 of the ctrlX CORE or the emulated TPM2.0 on the ctrlX CORE virtual . Build the TPM2 Trusted Software Stack (TSS) including OpenSSL engine. Integrate your application into key and certificate management of the ctrlX CORE. Convert the TPM2 Key to a keyform usable with OpenSSL Use the TPM2 TSS OpenSSL engine with an example webserver","title":"Introduction"},{"location":"samples-sh/tpm2.consumer/index.html#pre-requisites","text":"Recommended: ctrlX WORKS App Build Environment (QEMU Virtual Machine) - see Setup ctrlX AUTOMATION SDK Version 1. ctrlX CORE virtual or ctrlX CORE","title":"Pre-requisites"},{"location":"samples-sh/tpm2.consumer/index.html#getting-started","text":"Launch Visual Studio Code Open the sample directory samples-sh/tpm2.consumer Build and install the snap as described in Setup section Go to the webinterface -> Settings -> Certificate & Keys -> TPM2 Webserver Create a key named \"webserver\" as RSA 2048 and \"HSM protected\" Create a certificate signing request (CSR), download Create a certificate (webserver.crt) with help of the CSR on your PC or CA # For example, create yourself a CA mkdir ca openssl genrsa -out ca/ca.key 2048 openssl req -new -x509 -days 10000 -key ca/ca.key -out ca/ca.crt openssl x509 -req -days 360 -in webserver_csr.pem -CA ca/ca.crt -CAkey ca/ca.key -CAcreateserial -out webserver.crt -sha256 8. Upload the certificate webserver.crt the TPM2 Webserver application 9. Open webserver on Port 44330 of the ctrlX CORE or ctrlX CORE virtual (adapt port settings accordingly).","title":"Getting Started"},{"location":"samples-sh/tpm2.consumer/index.html#support","text":"If you've any questions visit the ctrlX AUTOMATION Community","title":"Support"},{"location":"samples-sh/tpm2.consumer/index.html#license","text":"MIT License Copyright (c) 2021 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-sh/ulimit-snap/index.html","text":"Example Snap to increase the maximal number of opened files \u00b6 Introduction \u00b6 Solution \u00b6 To increase the maximal number of opened files the command ulimit -n xxx can be used. This command can be called within a snap defining a daemon which starts a script with this command. Files \u00b6 build-snap.sh \u00b6 Calling this script will build a snap for amd64 and arm64 architecture. ulimit-script/increase-ulimit.sh \u00b6 This script calls the ulimit command. snap/snapcraft.yaml \u00b6 This section causes the script to be packed into the snap archive: parts: ulimit-script: plugin: dump source: ./ulimit-script Here the daemon is defined to call the script when the snap is started: apps: ulimit: daemon: simple command: increase-ulimit.sh License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Example Snap to increase the maximal number of opened files"},{"location":"samples-sh/ulimit-snap/index.html#example-snap-to-increase-the-maximal-number-of-opened-files","text":"","title":"Example Snap to increase the maximal number of opened files"},{"location":"samples-sh/ulimit-snap/index.html#introduction","text":"","title":"Introduction"},{"location":"samples-sh/ulimit-snap/index.html#solution","text":"To increase the maximal number of opened files the command ulimit -n xxx can be used. This command can be called within a snap defining a daemon which starts a script with this command.","title":"Solution"},{"location":"samples-sh/ulimit-snap/index.html#files","text":"","title":"Files"},{"location":"samples-sh/ulimit-snap/index.html#build-snapsh","text":"Calling this script will build a snap for amd64 and arm64 architecture.","title":"build-snap.sh"},{"location":"samples-sh/ulimit-snap/index.html#ulimit-scriptincrease-ulimitsh","text":"This script calls the ulimit command.","title":"ulimit-script/increase-ulimit.sh"},{"location":"samples-sh/ulimit-snap/index.html#snapsnapcraftyaml","text":"This section causes the script to be packed into the snap archive: parts: ulimit-script: plugin: dump source: ./ulimit-script Here the daemon is defined to call the script when the snap is started: apps: ulimit: daemon: simple command: increase-ulimit.sh","title":"snap/snapcraft.yaml"},{"location":"samples-sh/ulimit-snap/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"samples-snap/index.html","text":"Snap Samples \u00b6 Find out the supported samples \u00b6 Generate Manifest Monitor Health","title":"Samples Snap"},{"location":"samples-snap/index.html#snap-samples","text":"","title":"Snap Samples"},{"location":"samples-snap/index.html#find-out-the-supported-samples","text":"Generate Manifest Monitor Health","title":"Find out the supported samples"},{"location":"samples-snap/generate-manifest/index.html","text":"Generate Package Manifest during Installation \u00b6 Goal \u00b6 For a few use cases, it might be necessary to generate a package-manifest depending on the device or on the setup in is installed. This is possible during installation by using snap hook mechanism. This how-to describes how this can be resolved. The snap build in this examples takes two random words and uses them to generate a menu entry in the ctrlX CORE sidebar. It will look like this: Precondition \u00b6 Basic understanding of: snap interfaces hooks package-manifest Creating the snap \u00b6 Choose an empty folder and initialize the snap enviroment by using snapcraft snapcraft init Create the folders as in the following image: dump/ bin/ package-assets/ snap/ hooks/ snapcraft.yaml .gitignore The folder \"dump\" contains files that will be copied into our snap. This includes scripts inside the \"bin\" folder and the package-manifest.template used to blueprint when generating the actual package-manifest. Next to the snapcraft.yaml we need the hooks folder where we will later add the \"hook\" scripts. After that open the snapcraft.yaml file and edit it as following name : changing-world base : core20 version : '1.0.0' summary : Simple snap with random menu entry description : | This is a sample snap that generates a random menu entry when getting installed or updated grade : stable confinement : strict parts : dump : plugin : dump source : ./dump stage-packages : - wamerican - jq apps : my-service : command : bin/service.sh daemon : simple slots : package-assets : interface : content content : package-assets source : read : - $SNAP_DATA/package-assets/$SNAPCRAFT_PROJECT_NAME The dump part is used to copy the files from the dump folder into the snap and to install two packages used to generate the package-manifest. The \"wamerican\" package is a dictionary of american english words, the jq package provides the jq tool to manipulate json files using shell. The slot \"package-assets\" is similar to the one described in the SDK, the only difference is that it reference $SNAP_DATA instead of $SNAP, to provide a writeable directory. We added here a my-service app, this is just a simple daemon which logs a string to stdout for demo purpose, see #!/bin/bash while true do echo \"Hello changing world\" sleep 10 done The script \u00b6 We will now add the script in the \"dump/bin\" folder by creating a file called \"generate_manifest.sh\" and make it executable (chmod +x) dump/ bin/ generate_manifest.sh Here you will find the content #!/bin/bash -x # Update json NAME = $( shuf -n2 $SNAP /usr/share/dict/words | tr '\\n' ' ' ) mkdir -p $SNAP_DATA /package-assets/ $SNAP_NAME $SNAP /usr/bin/jq \".menus.sidebar[].title = \\\" $NAME \\\"\" \\ $SNAP /package-assets/changing-world.package-manifest.json.template > $SNAP_DATA /package-assets/changing-world/changing-world.package-manifest.json In line 4 we use shuf to select two random words from the dictionary and tr to bring them into one line and store it in \"NAME\". In line 5 we prepare the directory to ensure it exists. In line 6-7 we use jq to change the existing menus.sidebar.title of the template to \"NAME\" and write it into the package-assets folder. To make this work we need to create the script template in the \"dump/package-assets\" folder: { \"$schema\" : \"https://json-schema.boschrexroth.com/ctrlx-automation/ctrlx-core/apps/package-manifest/package-manifest.v1.schema.json\" , \"version\" : \"1.0.0\" , \"id\" : \"changing-world\" , \"menus\" : { \"sidebar\" : [ { \"id\" : \"changing-world\" , \"title\" : \"\" , \"icon\" : \"bosch-ic-automation\" , \"link\" : \"https://www.google.com/\" } ] } } As you can see, the title property is empty. The hooks \u00b6 Now we need to execute the script to generate the package-manifest on the installation and every update of the snap. So we need to add the corresponding hooks: snap/ hooks/ install post-refresh Both need to be executable (chmod +x). Both have the same content as below: #!/bin/bash # Generate manifest $SNAP /snap/command-chain/snapcraft-runner generate_manifest.sh It executes the generate_manifest.sh mentioned above using the snaps environment by using the snapcraft-runner, it sets all required environment variables (e.g. PATH). It is generated by the snap itself if you have defined an app in your snap. Interface definitions \u00b6 Interfaces (slots and plugs) can be declared in two different ways: Specific for each app and hook (Preferred solution) Globally to be valid for all defined apps and hooks Examples \u00b6 Specific declaration: Each app and each hook defines all needed interfaces. apps : example : command : bin/sh plugs : wayland : x11 : example2 : command : bin/sh2 plugs : wayland : x11 : hooks : configure : plugs : wayland : x11 : Globally defined: The plugs wayland and x11 are valid for the apps example, example2 as well as the configure-hook. apps : example : command : bin/sh example2 : command : bin/sh2 hooks : configure : plugs : wayland : x11 : Both definitions lead to the same result. Nevertheless if you mix these two, this could lead to unexpected behaviour. Bad Example: In the following yaml, the global plugs wayland and x11 can only be accessed by the example app. The app example2 and the configure hook have no interfaces declared, which is probably not the desired result. apps : example : command : bin/sh plugs : wayland : x11 : opengl : example2 : command : bin/sh2 hooks : configure : plugs : wayland : x11 : Therefore declaring all interfaces specific for each app and hook should be the preferred solution. If your snapcraft.yaml does not contain any apps or hooks at all, then declaring interfaces globally is the right approach. Build and run \u00b6 Now build the snap using \"snapcraft\" and install it on your device, on every reinstall, it will change the name of the menu entry. Thats it.","title":"Generate Package Manifest during Installation"},{"location":"samples-snap/generate-manifest/index.html#generate-package-manifest-during-installation","text":"","title":"Generate Package Manifest during Installation"},{"location":"samples-snap/generate-manifest/index.html#goal","text":"For a few use cases, it might be necessary to generate a package-manifest depending on the device or on the setup in is installed. This is possible during installation by using snap hook mechanism. This how-to describes how this can be resolved. The snap build in this examples takes two random words and uses them to generate a menu entry in the ctrlX CORE sidebar. It will look like this:","title":"Goal"},{"location":"samples-snap/generate-manifest/index.html#precondition","text":"Basic understanding of: snap interfaces hooks package-manifest","title":"Precondition"},{"location":"samples-snap/generate-manifest/index.html#creating-the-snap","text":"Choose an empty folder and initialize the snap enviroment by using snapcraft snapcraft init Create the folders as in the following image: dump/ bin/ package-assets/ snap/ hooks/ snapcraft.yaml .gitignore The folder \"dump\" contains files that will be copied into our snap. This includes scripts inside the \"bin\" folder and the package-manifest.template used to blueprint when generating the actual package-manifest. Next to the snapcraft.yaml we need the hooks folder where we will later add the \"hook\" scripts. After that open the snapcraft.yaml file and edit it as following name : changing-world base : core20 version : '1.0.0' summary : Simple snap with random menu entry description : | This is a sample snap that generates a random menu entry when getting installed or updated grade : stable confinement : strict parts : dump : plugin : dump source : ./dump stage-packages : - wamerican - jq apps : my-service : command : bin/service.sh daemon : simple slots : package-assets : interface : content content : package-assets source : read : - $SNAP_DATA/package-assets/$SNAPCRAFT_PROJECT_NAME The dump part is used to copy the files from the dump folder into the snap and to install two packages used to generate the package-manifest. The \"wamerican\" package is a dictionary of american english words, the jq package provides the jq tool to manipulate json files using shell. The slot \"package-assets\" is similar to the one described in the SDK, the only difference is that it reference $SNAP_DATA instead of $SNAP, to provide a writeable directory. We added here a my-service app, this is just a simple daemon which logs a string to stdout for demo purpose, see #!/bin/bash while true do echo \"Hello changing world\" sleep 10 done","title":"Creating the snap"},{"location":"samples-snap/generate-manifest/index.html#the-script","text":"We will now add the script in the \"dump/bin\" folder by creating a file called \"generate_manifest.sh\" and make it executable (chmod +x) dump/ bin/ generate_manifest.sh Here you will find the content #!/bin/bash -x # Update json NAME = $( shuf -n2 $SNAP /usr/share/dict/words | tr '\\n' ' ' ) mkdir -p $SNAP_DATA /package-assets/ $SNAP_NAME $SNAP /usr/bin/jq \".menus.sidebar[].title = \\\" $NAME \\\"\" \\ $SNAP /package-assets/changing-world.package-manifest.json.template > $SNAP_DATA /package-assets/changing-world/changing-world.package-manifest.json In line 4 we use shuf to select two random words from the dictionary and tr to bring them into one line and store it in \"NAME\". In line 5 we prepare the directory to ensure it exists. In line 6-7 we use jq to change the existing menus.sidebar.title of the template to \"NAME\" and write it into the package-assets folder. To make this work we need to create the script template in the \"dump/package-assets\" folder: { \"$schema\" : \"https://json-schema.boschrexroth.com/ctrlx-automation/ctrlx-core/apps/package-manifest/package-manifest.v1.schema.json\" , \"version\" : \"1.0.0\" , \"id\" : \"changing-world\" , \"menus\" : { \"sidebar\" : [ { \"id\" : \"changing-world\" , \"title\" : \"\" , \"icon\" : \"bosch-ic-automation\" , \"link\" : \"https://www.google.com/\" } ] } } As you can see, the title property is empty.","title":"The script"},{"location":"samples-snap/generate-manifest/index.html#the-hooks","text":"Now we need to execute the script to generate the package-manifest on the installation and every update of the snap. So we need to add the corresponding hooks: snap/ hooks/ install post-refresh Both need to be executable (chmod +x). Both have the same content as below: #!/bin/bash # Generate manifest $SNAP /snap/command-chain/snapcraft-runner generate_manifest.sh It executes the generate_manifest.sh mentioned above using the snaps environment by using the snapcraft-runner, it sets all required environment variables (e.g. PATH). It is generated by the snap itself if you have defined an app in your snap.","title":"The hooks"},{"location":"samples-snap/generate-manifest/index.html#interface-definitions","text":"Interfaces (slots and plugs) can be declared in two different ways: Specific for each app and hook (Preferred solution) Globally to be valid for all defined apps and hooks","title":"Interface definitions"},{"location":"samples-snap/generate-manifest/index.html#examples","text":"Specific declaration: Each app and each hook defines all needed interfaces. apps : example : command : bin/sh plugs : wayland : x11 : example2 : command : bin/sh2 plugs : wayland : x11 : hooks : configure : plugs : wayland : x11 : Globally defined: The plugs wayland and x11 are valid for the apps example, example2 as well as the configure-hook. apps : example : command : bin/sh example2 : command : bin/sh2 hooks : configure : plugs : wayland : x11 : Both definitions lead to the same result. Nevertheless if you mix these two, this could lead to unexpected behaviour. Bad Example: In the following yaml, the global plugs wayland and x11 can only be accessed by the example app. The app example2 and the configure hook have no interfaces declared, which is probably not the desired result. apps : example : command : bin/sh plugs : wayland : x11 : opengl : example2 : command : bin/sh2 hooks : configure : plugs : wayland : x11 : Therefore declaring all interfaces specific for each app and hook should be the preferred solution. If your snapcraft.yaml does not contain any apps or hooks at all, then declaring interfaces globally is the right approach.","title":"Examples"},{"location":"samples-snap/generate-manifest/index.html#build-and-run","text":"Now build the snap using \"snapcraft\" and install it on your device, on every reinstall, it will change the name of the menu entry. Thats it.","title":"Build and run"},{"location":"samples-snap/monitor-health/index.html","text":"README monitor-health \u00b6 This sample shows how to provide easy health monitoring of an production app using an observation script started as an second app service in parallel to monitor the health of your main app. This is monitoring the state of the service and setting the health. Status Health Message Code active okay - - inactive error app stopped! - disabled error app disabled! - Description \u00b6 The sample contains a dummy production app ./app/dummy-app , which is monitored for it's health. Setup health monitoring for your own app \u00b6 Copy the script ./health/check-health to your project to folder ./health. Change the name of your snap (here: 'ctrlx-monitor-health') and your production app (part-name, here: 'app') to be observed. Ensure Linux line endings (LF). Make script ./health/check-health executable: sudo chmod +x ./health/check-health Edit ./snap/snapcraft.yaml and add the script as a health observation service to app. apps : check - health : command : check - health daemon : simple restart - condition : on - failure passthrough : restart - delay : 10 s ... parts : check - health : plugin : dump source : ./ health Support \u00b6 Developer Community \u00b6 Please join the Developer Community SDK Forum \u00b6 Please visit the SDK Forum Issues \u00b6 If you've found an error in these sample, please file an issue License \u00b6 MIT License Copyright (c) 2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"README monitor-health"},{"location":"samples-snap/monitor-health/index.html#readme-monitor-health","text":"This sample shows how to provide easy health monitoring of an production app using an observation script started as an second app service in parallel to monitor the health of your main app. This is monitoring the state of the service and setting the health. Status Health Message Code active okay - - inactive error app stopped! - disabled error app disabled! -","title":"README monitor-health"},{"location":"samples-snap/monitor-health/index.html#description","text":"The sample contains a dummy production app ./app/dummy-app , which is monitored for it's health.","title":"Description"},{"location":"samples-snap/monitor-health/index.html#setup-health-monitoring-for-your-own-app","text":"Copy the script ./health/check-health to your project to folder ./health. Change the name of your snap (here: 'ctrlx-monitor-health') and your production app (part-name, here: 'app') to be observed. Ensure Linux line endings (LF). Make script ./health/check-health executable: sudo chmod +x ./health/check-health Edit ./snap/snapcraft.yaml and add the script as a health observation service to app. apps : check - health : command : check - health daemon : simple restart - condition : on - failure passthrough : restart - delay : 10 s ... parts : check - health : plugin : dump source : ./ health","title":"Setup health monitoring for your own app"},{"location":"samples-snap/monitor-health/index.html#support","text":"","title":"Support"},{"location":"samples-snap/monitor-health/index.html#developer-community","text":"Please join the Developer Community","title":"Developer Community"},{"location":"samples-snap/monitor-health/index.html#sdk-forum","text":"Please visit the SDK Forum","title":"SDK Forum"},{"location":"samples-snap/monitor-health/index.html#issues","text":"If you've found an error in these sample, please file an issue","title":"Issues"},{"location":"samples-snap/monitor-health/index.html#license","text":"MIT License Copyright (c) 2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"scripts/environment/index.html","text":"QEMU VM with Ubuntu Server as ctrlX Application Build Environment \u00b6 Indroduction \u00b6 This folder contains configuration files and scripts to build and launch QEMU virtual machines running Ubuntu Server guest operating system on Windows 10 or Linux host operating systems. Important : The host operating system must be amd64 based. Installation and configuration of the Ubuntu Server guest operating system are automatically done on first boot by the Ubuntu Cloud-Init Technology. For this purpose, a so-called user image file is specified when the VM is started. This file contains the compiled information of a cloud-config file which is processed by the cloud-init service. For more informations cloud-init File Overview \u00b6 Hint: The parameters of .sh/.bat files are explained in comment lines at the beginning of these files. Build Files: \u00b6 build.bat Windows batch file to download Ubuntu Server image - check/change environment variables build.sh Linux build script to install packages, to compile a cloud-config file and to download Ubuntu Server image build-all.sh Linux build script to compile all types of user image files (amd64/aarch64, proxy/noproxy). cloud-config Files \u00b6 Cloud-config files are containing settings (user/password, proxy,...) and a list of packages to be installed: cloud-config-aarch64 For aarch64 VMs cloud-config-amd64 For amd64 VMs For informations on the content of cloud-config files see Cloud config examples . Creating a QEMU Virtual Machine instance \u00b6 Files starting with create-new... are creating a new folder and copying all necessary files into it: create-new-vm-ARCH-PROXY.bat Creates a new VM where ARCH is amd64 or aarch64, PROXY is proxy or noproxy create-new-vm.bat Called as subroutine Helper Scripts to Install Packages on Linux (Ubuntu) Host Operating Systems \u00b6 The scripts has to be started on the host system: install-kvm-on-host.sh Install the kvm package install-qemu-on-host.sh Download, build and install QEMU Start a QEMU VM \u00b6 launch.bat Generic bat file to start an VM launch-ARCH-PROXY.bat Helper Calls launch.bat with the parameters ARCH and PROXY. Script Files to be started in the QEMU VM \u00b6 install-nodejs-npm-from-binary-archive.sh Uninstall snap node, install node and npm from https://nodejs.org User Image Files \u00b6 Instead of compiling a cloud-config file on Windows host systems one of the precompiled user image file has to be used : ubuntu-20.04-server-cloudimg-amd64-user-data-proxy.img amd64 VM with proxy usage ubuntu-20.04-server-cloudimg-amd64-user-data-noproxy.img amd64 VM without proxy usage ubuntu-20.04-server-cloudimg-aarch64-user-data-proxy.img aarch64 VM with proxy usage ubuntu-20.04-server-cloudimg-aarch64-user-data-noproxy.img aarch64 VM without proxy usage Windows Helper Batchs \u00b6 ssh-keygen-copy-id.bat \u00b6 Enables login without password by adding .ssh\\id_rsa.pub of the host to ~/.authorized_keys of the QM VM. Important We recommend to use this script instead of always signing in with the password. shrink-qcow2.bat \u00b6 Shrinks the qcow2 snapshot file. Important This action takes some time, do not interrupt. wget.bat \u00b6 Calls PowerShell to download files. License \u00b6 MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"QEMU VM with Ubuntu Server as ctrlX Application Build Environment"},{"location":"scripts/environment/index.html#qemu-vm-with-ubuntu-server-as-ctrlx-application-build-environment","text":"","title":"QEMU VM with Ubuntu Server as ctrlX Application Build Environment"},{"location":"scripts/environment/index.html#indroduction","text":"This folder contains configuration files and scripts to build and launch QEMU virtual machines running Ubuntu Server guest operating system on Windows 10 or Linux host operating systems. Important : The host operating system must be amd64 based. Installation and configuration of the Ubuntu Server guest operating system are automatically done on first boot by the Ubuntu Cloud-Init Technology. For this purpose, a so-called user image file is specified when the VM is started. This file contains the compiled information of a cloud-config file which is processed by the cloud-init service. For more informations cloud-init","title":"Indroduction"},{"location":"scripts/environment/index.html#file-overview","text":"Hint: The parameters of .sh/.bat files are explained in comment lines at the beginning of these files.","title":"File Overview"},{"location":"scripts/environment/index.html#build-files","text":"build.bat Windows batch file to download Ubuntu Server image - check/change environment variables build.sh Linux build script to install packages, to compile a cloud-config file and to download Ubuntu Server image build-all.sh Linux build script to compile all types of user image files (amd64/aarch64, proxy/noproxy).","title":"Build Files:"},{"location":"scripts/environment/index.html#cloud-config-files","text":"Cloud-config files are containing settings (user/password, proxy,...) and a list of packages to be installed: cloud-config-aarch64 For aarch64 VMs cloud-config-amd64 For amd64 VMs For informations on the content of cloud-config files see Cloud config examples .","title":"cloud-config Files"},{"location":"scripts/environment/index.html#creating-a-qemu-virtual-machine-instance","text":"Files starting with create-new... are creating a new folder and copying all necessary files into it: create-new-vm-ARCH-PROXY.bat Creates a new VM where ARCH is amd64 or aarch64, PROXY is proxy or noproxy create-new-vm.bat Called as subroutine","title":"Creating a QEMU Virtual Machine instance"},{"location":"scripts/environment/index.html#helper-scripts-to-install-packages-on-linux-ubuntu-host-operating-systems","text":"The scripts has to be started on the host system: install-kvm-on-host.sh Install the kvm package install-qemu-on-host.sh Download, build and install QEMU","title":"Helper Scripts to Install Packages on Linux (Ubuntu) Host Operating Systems"},{"location":"scripts/environment/index.html#start-a-qemu-vm","text":"launch.bat Generic bat file to start an VM launch-ARCH-PROXY.bat Helper Calls launch.bat with the parameters ARCH and PROXY.","title":"Start a QEMU VM"},{"location":"scripts/environment/index.html#script-files-to-be-started-in-the-qemu-vm","text":"install-nodejs-npm-from-binary-archive.sh Uninstall snap node, install node and npm from https://nodejs.org","title":"Script Files to be started in the QEMU VM"},{"location":"scripts/environment/index.html#user-image-files","text":"Instead of compiling a cloud-config file on Windows host systems one of the precompiled user image file has to be used : ubuntu-20.04-server-cloudimg-amd64-user-data-proxy.img amd64 VM with proxy usage ubuntu-20.04-server-cloudimg-amd64-user-data-noproxy.img amd64 VM without proxy usage ubuntu-20.04-server-cloudimg-aarch64-user-data-proxy.img aarch64 VM with proxy usage ubuntu-20.04-server-cloudimg-aarch64-user-data-noproxy.img aarch64 VM without proxy usage","title":"User Image Files"},{"location":"scripts/environment/index.html#windows-helper-batchs","text":"","title":"Windows Helper Batchs"},{"location":"scripts/environment/index.html#ssh-keygen-copy-idbat","text":"Enables login without password by adding .ssh\\id_rsa.pub of the host to ~/.authorized_keys of the QM VM. Important We recommend to use this script instead of always signing in with the password.","title":"ssh-keygen-copy-id.bat"},{"location":"scripts/environment/index.html#shrink-qcow2bat","text":"Shrinks the qcow2 snapshot file. Important This action takes some time, do not interrupt.","title":"shrink-qcow2.bat"},{"location":"scripts/environment/index.html#wgetbat","text":"Calls PowerShell to download files.","title":"wget.bat"},{"location":"scripts/environment/index.html#license","text":"MIT License Copyright (c) 2021-2022 Bosch Rexroth AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}